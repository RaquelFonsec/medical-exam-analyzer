#!/usr/bin/env python3
"""Script para integrar RAG ao sistema m√©dico existente"""

import os
import sys
import asyncio
from typing import List, Dict, Any

# Adicionar o diret√≥rio do backend ao path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

# Imports do RAG
from app.services.rag.medical_rag_service import MedicalRAGService

class MedicalRAGIntegrator:
    """Integrador RAG para o sistema m√©dico existente"""
    
    def __init__(self):
        self.rag_service = MedicalRAGService(
            faiss_index_path="data/medical_knowledge.faiss",
            chunks_path="data/medical_chunks.pkl"
        )
        
        # Criar diret√≥rio de dados se n√£o existir
        os.makedirs("data", exist_ok=True)
        os.makedirs("training_data", exist_ok=True)
        
        print("‚úÖ RAG Integrator inicializado")
    
    def load_pdf_examples_from_directory(self, pdf_directory: str) -> List[str]:
        """Carregar exemplos de PDFs de um diret√≥rio"""
        examples = []
        
        if not os.path.exists(pdf_directory):
            print(f"‚ö†Ô∏è Diret√≥rio n√£o encontrado: {pdf_directory}")
            return examples
        
        for filename in os.listdir(pdf_directory):
            if filename.endswith('.txt'):
                filepath = os.path.join(pdf_directory, filename)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if len(content.strip()) > 100:
                            examples.append(content)
                            print(f"üìÑ Carregado: {filename}")
                except Exception as e:
                    print(f"‚ùå Erro ao carregar {filename}: {e}")
        
        print(f"‚úÖ {len(examples)} documentos carregados")
        return examples
    
    def setup_knowledge_base(self, pdf_directory: str = None, manual_examples: List[str] = None):
        """Configurar base de conhecimento com exemplos"""
        examples = []
        
        if pdf_directory:
            examples.extend(self.load_pdf_examples_from_directory(pdf_directory))
        
        if manual_examples:
            examples.extend(manual_examples)
        
        if not examples:
            examples = self._get_default_examples()
            print("üìö Usando exemplos padr√£o")
        
        if examples:
            print("üîÑ Construindo base de conhecimento...")
            self.rag_service.add_documents_to_knowledge_base(examples)
            print("‚úÖ Base de conhecimento configurada")
        else:
            print("‚ö†Ô∏è Nenhum exemplo dispon√≠vel")
    
    def _get_default_examples(self) -> List[str]:
        """Exemplos padr√£o se n√£o houver PDFs"""
        return [
            """LAUDO M√âDICO ORTOP√âDICO

IDENTIFICA√á√ÉO:
Paciente: Jo√£o da Silva, 45 anos, masculino
Profiss√£o: Pedreiro
Data: 15/07/2024

HIST√ìRIA CL√çNICA:
Paciente relata acidente de trabalho h√° 2 anos, quando caiu de andaime durante constru√ß√£o.
Sofreu fratura de v√©rtebra lombar L3-L4, com sequelas funcionais.
Refere dor lombar cr√¥nica e limita√ß√£o para levantamento de peso.

LIMITA√á√ïES FUNCIONAIS:
- Incapacidade para levantamento de peso superior a 10kg
- Dificuldade para trabalhar em posi√ß√µes inc√¥modas
- Limita√ß√£o para trabalho em altura
- Claudica√ß√£o ap√≥s caminhadas prolongadas

DIAGN√ìSTICO:
Sequelas de fratura de coluna vertebral lombar com limita√ß√£o funcional
CID-10: S22.1 - Fratura de v√©rtebra tor√°cica

CONCLUS√ÉO:
Paciente apresenta limita√ß√µes funcionais decorrentes de sequelas traum√°ticas que o impossibilitam 
para o exerc√≠cio da profiss√£o de pedreiro. As limita√ß√µes s√£o incompat√≠veis com as exig√™ncias 
da fun√ß√£o, caracterizando incapacidade laboral.

RECOMENDA√á√ïES:
- Acompanhamento ortop√©dico especializado
- Fisioterapia para manuten√ß√£o da capacidade funcional
- Avalia√ß√£o para reabilita√ß√£o profissional

Dr. Carlos Mendes - CRM 12345-SP
Especialista em Ortopedia""",

            """LAUDO PSIQUI√ÅTRICO

IDENTIFICA√á√ÉO:
Paciente: Maria Santos, 38 anos, feminino
Profiss√£o: Professora
Data: 20/07/2024

HIST√ìRIA CL√çNICA:
Paciente professora h√° 15 anos, apresenta quadro depressivo iniciado h√° 8 meses.
Refere sobrecarga de trabalho, estresse constante e deteriora√ß√£o do ambiente escolar.
Sintomas incluem tristeza persistente, fadiga, ins√¥nia, diminui√ß√£o da concentra√ß√£o.

AVALIA√á√ÉO MENTAL:
- Humor deprimido
- Anedonia significativa
- Fadiga e perda de energia
- Dificuldade de concentra√ß√£o
- Sentimentos de inutilidade
- Idea√ß√£o de incapacidade laboral

LIMITA√á√ïES FUNCIONAIS:
- Comprometimento da capacidade de concentra√ß√£o para atividades pedag√≥gicas
- Dificuldade para lidar com estresse do ambiente escolar
- Fadiga excessiva interferindo na qualidade do ensino
- Comprometimento das rela√ß√µes interpessoais com alunos

DIAGN√ìSTICO:
Epis√≥dio Depressivo Maior, grave, sem sintomas psic√≥ticos
CID-10: F32.2

CONCLUS√ÉO:
Paciente apresenta transtorno mental que compromete significativamente sua capacidade
para exercer atividades docentes. O quadro atual √© incompat√≠vel com as demandas
emocionais e cognitivas do magist√©rio.

TRATAMENTO:
Em uso de antidepressivo e acompanhamento psicoterap√™utico.

Dra. Ana Silva - CRM 67890-SP
Especialista em Psiquiatria""",

            """LAUDO OTORRINOLARINGOL√ìGICO

IDENTIFICA√á√ÉO:
Paciente: Carlos Oliveira, 52 anos, masculino
Profiss√£o: Operador de telemarketing
Data: 25/07/2024

HIST√ìRIA CL√çNICA:
Paciente operador de telemarketing h√° 12 anos, com uso intensivo de headset.
Desenvolveu perda auditiva progressiva bilateral nos √∫ltimos 5 anos.
Refere dificuldade crescente para compreens√£o telef√¥nica e zumbido constante.

EXAME OTORRINOLARINGOL√ìGICO:
- Otoscopia: condutos auditivos externos livres bilateralmente
- Audiometria tonal: perda auditiva neurossensorial bilateral
- Logoaudiometria: comprometimento do reconhecimento de fala
- Timpanometria: curvas tipo A bilateral

RESULTADOS AUDIOM√âTRICOS:
- Orelha direita: perda moderada a severa (60-70 dB)
- Orelha esquerda: perda moderada (50-60 dB)
- Discrimina√ß√£o vocal comprometida bilateralmente

LIMITA√á√ïES FUNCIONAIS:
- Incapacidade para comunica√ß√£o telef√¥nica eficaz
- Dificuldade para compreens√£o de fala em ambiente ruidoso
- Necessidade de amplifica√ß√£o sonora
- Comprometimento da qualidade do atendimento ao cliente

DIAGN√ìSTICO:
Perda auditiva neurossensorial bilateral, relacionada ao trabalho
CID-10: H90.3 - Perda auditiva neurossensorial bilateral

NEXO CAUSAL:
Perda auditiva compat√≠vel com exposi√ß√£o ocupacional a ru√≠do
atrav√©s do uso prolongado de equipamentos de √°udio.

CONCLUS√ÉO:
Paciente apresenta perda auditiva ocupacional que o impossibilita para
o exerc√≠cio da fun√ß√£o de operador de telemarketing, atividade que
exige acuidade auditiva preservada.

Dr. Roberto Lima - CRM 13579-SP
Especialista em Otorrinolaringologia"""
        ]
    
    def test_rag_system(self, patient_info: str = "Jo√£o Silva, 45", 
                       transcription: str = "Sou pedreiro h√° 15 anos, sofri acidente e fraturei a coluna"):
        """Testar sistema RAG com exemplo"""
        
        print("\n=== TESTE DO SISTEMA RAG ===\n")
        
        print("üîç Buscando casos similares...")
        similar_cases = self.rag_service.search_similar_cases(f"{patient_info} {transcription}", top_k=3)
        
        print(f"üìä Encontrados {len(similar_cases)} casos similares:")
        for i, case in enumerate(similar_cases, 1):
            print(f"{i}. Score: {case['similarity_score']:.3f} | Tipo: {case['type']}")
            print(f"   Texto: {case['text'][:100]}...")
            print()
        
        print("üìã Gerando laudo com RAG...")
        rag_response = self.rag_service.generate_rag_response(patient_info, transcription)
        
        if rag_response['success']:
            print("‚úÖ Laudo gerado com sucesso!")
            print("\n" + "="*50)
            print(rag_response['response'])
            print("="*50)
            print(f"\nCasos similares utilizados: {rag_response['similar_cases_count']}")
            print(f"Score de similaridade m√°ximo: {rag_response['top_similarity_score']:.3f}")
        else:
            print(f"‚ùå Erro na gera√ß√£o: {rag_response['error']}")

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    
    print("üöÄ CONFIGURANDO SISTEMA RAG PARA AN√ÅLISE M√âDICA")
    print("="*60)
    
    integrator = MedicalRAGIntegrator()
    
    pdf_directory = "training_data"
    
    if os.path.exists(pdf_directory):
        print(f"üìÅ Usando PDFs do diret√≥rio: {pdf_directory}")
        integrator.setup_knowledge_base(pdf_directory=pdf_directory)
    else:
        print("üìö Usando exemplos padr√£o (PDF directory n√£o encontrado)")
        integrator.setup_knowledge_base()
    
    integrator.test_rag_system()
    
    print("\n‚úÖ SISTEMA RAG CONFIGURADO COM SUCESSO!")
    print("\nPara usar no seu sistema existente:")
    print("1. from rag_integration import MedicalRAGIntegrator")
    print("2. integrator = MedicalRAGIntegrator()")
    print("3. integrator.rag_service.generate_rag_response(patient_info, transcription)")
    
    return integrator

async def test_integration():
    """Testar integra√ß√£o completa"""
    
    print("\nüß™ TESTE DE INTEGRA√á√ÉO COMPLETA")
    print("="*50)
    
    integrator = main()
    
    patient_info = "Maria Santos, 38"
    transcription = "Sou professora h√° 15 anos, desenvolvi depress√£o e n√£o consigo mais dar aulas"
    
    print(f"\nüìù Testando an√°lise para: {patient_info}")
    print(f"üí¨ Transcri√ß√£o: {transcription}")
    
    rag_response = integrator.rag_service.generate_rag_response(patient_info, transcription)
    
    print("\nüìã RESULTADO DA AN√ÅLISE COM RAG:")
    print("="*50)
    
    if rag_response.get('success'):
        print(f"‚úÖ Status: Sucesso")
        print(f"üìä Score de Similaridade: {rag_response.get('top_similarity_score', 0):.3f}")
        print(f"üìö Casos Utilizados: {rag_response.get('similar_cases_count', 0)}")
        
        print(f"\nüìã LAUDO GERADO:")
        print("-" * 50)
        print(rag_response.get('response', 'N√£o dispon√≠vel'))
    else:
        print(f"‚ùå Erro: {rag_response.get('error', 'Desconhecido')}")

if __name__ == "__main__":
    integrator = main()
    
    print("\n" + "="*60)
    asyncio.run(test_integration())
    
    print("\nüéâ CONFIGURA√á√ÉO COMPLETA!")
    print("\nPr√≥ximos passos:")
    print("1. Adicione seus PDFs convertidos em training_data/")
    print("2. Execute: python rag_integration.py para reconfigurar")
    print("3. O sistema estar√° pronto para usar RAG nas an√°lises m√©dicas")

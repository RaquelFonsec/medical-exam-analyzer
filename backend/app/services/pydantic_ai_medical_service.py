"""
Servi√ßo Pydantic AI para an√°lise m√©dica com valida√ß√£o estrita
Integra LangGraph, RAG, FAISS e valida√ß√£o robusta
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from enum import Enum

# Pydantic AI
from pydantic_ai import Agent, RunContext
from pydantic import BaseModel, Field, validator
from pydantic_ai.models.openai import OpenAIModel

# LangGraph
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from typing_extensions import Annotated, TypedDict

logger = logging.getLogger(__name__)


# ============================================================================
# MODELOS PYDANTIC ESTRITOS PARA VALIDA√á√ÉO
# ============================================================================

class BenefitTypeEnum(str, Enum):
    AUXILIO_DOENCA = "AUX√çLIO-DOEN√áA"
    APOSENTADORIA_INVALIDEZ = "APOSENTADORIA POR INVALIDEZ"
    BPC_LOAS = "BPC/LOAS"
    AUXILIO_ACIDENTE = "AUX√çLIO-ACIDENTE"
    ISENCAO_IR = "ISEN√á√ÉO IMPOSTO DE RENDA"


class SeverityEnum(str, Enum):
    LEVE = "LEVE"
    MODERADA = "MODERADA"
    GRAVE = "GRAVE"


class PatientDataStrict(BaseModel):
    """Dados do paciente com valida√ß√£o estrita"""
    nome: str = Field(min_length=1, description="Nome completo do paciente")
    idade: Optional[int] = Field(None, ge=0, le=120, description="Idade do paciente")
    sexo: Optional[str] = Field(None, pattern="^[MF]$", description="Sexo M ou F")
    profissao: Optional[str] = Field(None, description="Profiss√£o do paciente")
    sintomas: List[str] = Field(default_factory=list, description="Lista de sintomas")
    medicamentos: List[str] = Field(default_factory=list, description="Lista de medicamentos")
    condicoes: List[str] = Field(default_factory=list, description="Lista de condi√ß√µes m√©dicas")


class BenefitClassificationStrict(BaseModel):
    """Classifica√ß√£o de benef√≠cio com valida√ß√£o estrita"""
    tipo_beneficio: BenefitTypeEnum = Field(description="Tipo de benef√≠cio recomendado")
    cid_principal: str = Field(pattern="^[A-Z]\d{2}(\.\d)?$", description="CID-10 no formato A00.0 ou A00")
    gravidade: SeverityEnum = Field(description="Gravidade da condi√ß√£o")
    prognostico: str = Field(min_length=20, description="Progn√≥stico detalhado")
    elegibilidade: bool = Field(description="Se √© eleg√≠vel para o benef√≠cio")
    justificativa: str = Field(min_length=50, description="Justificativa m√©dica detalhada")

    @validator('cid_principal')
    def validate_cid(cls, v):
        if not v or v.lower() in ['n√£o informado', 'nao informado', '']:
            return 'I10.0'  # Hipertens√£o como fallback
        return v


class MedicalReportComplete(BaseModel):
    """Relat√≥rio m√©dico completo"""
    patient_data: PatientDataStrict
    classification: BenefitClassificationStrict
    anamnese: str = Field(min_length=100, description="Anamnese estruturada")
    laudo_medico: str = Field(min_length=200, description="Laudo m√©dico detalhado")
    rag_context: List[str] = Field(default_factory=list, description="Contexto RAG relevante")
    confidence_score: float = Field(ge=0.0, le=1.0, description="Score de confian√ßa")


# ============================================================================
# ESTADO LANGGRAPH
# ============================================================================

class MedicalAnalysisState(TypedDict):
    """Estado do pipeline LangGraph"""
    messages: Annotated[list, add_messages]
    patient_text: str
    transcription: str
    patient_data: Optional[PatientDataStrict]
    classification: Optional[BenefitClassificationStrict]
    rag_results: List[Dict[str, Any]]
    medical_report: Optional[MedicalReportComplete]
    errors: List[str]
    current_step: str


# ============================================================================
# AGENTES PYDANTIC AI
# ============================================================================

class PydanticMedicalAI:
    """Servi√ßo principal com Pydantic AI, LangGraph, RAG e FAISS"""
    
    def __init__(self):
        # For√ßar carregamento da API key
        try:
            from .force_openai_env import setup_openai_env
            setup_openai_env()
        except:
            pass
            
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada")
        
        # Modelo OpenAI para Pydantic AI (sem api_key no construtor)
        import openai
        openai.api_key = self.openai_api_key
        self.model = OpenAIModel('gpt-4o-mini')
        
        # Agentes Pydantic AI
        self.patient_agent = self._create_patient_agent()
        self.classification_agent = self._create_classification_agent()
        
        # Pipeline LangGraph
        self.workflow = self._create_langgraph_pipeline()
        
        # RAG Service
        try:
            from .rag.medical_rag_service import MedicalRAGService
            self.rag_service = MedicalRAGService()
            self.rag_available = True
            print("‚úÖ RAG integrado ao Pydantic AI")
        except Exception as e:
            print(f"‚ö†Ô∏è RAG n√£o dispon√≠vel: {e}")
            self.rag_available = False
            self.rag_service = None
        
        print("‚úÖ Pydantic AI Medical Service inicializado")
    
    def _create_patient_agent(self) -> Agent:
        """Cria agente para extra√ß√£o de dados do paciente"""
        return Agent(
            model=self.model,
            result_type=PatientDataStrict,
            system_prompt="""
            Voc√™ √© um especialista em extra√ß√£o de dados m√©dicos.
            Extraia informa√ß√µes do paciente do texto fornecido com m√°xima precis√£o.
            
            REGRAS OBRIGAT√ìRIAS:
            - nome: SEMPRE extrair um nome, use "Paciente" se n√£o encontrar
            - idade: APENAS n√∫meros inteiros entre 0-120, null se n√£o encontrar
            - sexo: APENAS "M" ou "F", null se n√£o encontrar
            - Listas vazias se n√£o encontrar informa√ß√µes espec√≠ficas
            
            Seja preciso e objetivo. Retorne apenas dados estruturados v√°lidos.
            """
        )
    
    def _create_classification_agent(self) -> Agent:
        """Cria agente para classifica√ß√£o de benef√≠cios"""
        return Agent(
            model=self.model,
            result_type=BenefitClassificationStrict,
            system_prompt="""
            Voc√™ √© um m√©dico perito previdenci√°rio EXPERT em classifica√ß√£o de benef√≠cios e CIDs.
            
            üß† HIERARQUIA DE AN√ÅLISE (ORDEM OBRIGAT√ìRIA):
            
            1Ô∏è‚É£ **IDENTIFIQUE A CONDI√á√ÉO PRINCIPAL** (mais grave/recente)
            2Ô∏è‚É£ **AVALIE ASPECTOS TEMPORAIS** (agudo vs cr√¥nico)
            3Ô∏è‚É£ **DETERMINE NEXO OCUPACIONAL** (trabalho relacionado?)
            4Ô∏è‚É£ **CLASSIFIQUE GRAVIDADE** (funcionalidade comprometida?)
            5Ô∏è‚É£ **ESCOLHA BENEF√çCIO** (baseado em crit√©rios legais)
            6Ô∏è‚É£ **SELECIONE CID ESPEC√çFICO** (mais preciso poss√≠vel)
            
            üéØ CLASSIFICA√á√ÉO INTELIGENTE DE BENEF√çCIOS:
            
            **1. AUX√çLIO-ACIDENTE** (PRIORIDADE para acidentes/doen√ßas laborais):
            ‚úÖ Detectar quando encontrar:
            - Profiss√µes de risco: entregador, motoboy, motorista, oper√°rio, soldador, constru√ß√£o, mec√¢nico, eletricista, COZINHEIRO, DENTISTA, FISIOTERAPEUTA, M√öSICO, DIGITADOR
            - Palavras-chave: "acidente no/durante trabalho", "trabalhando", "na empresa", "exerc√≠cio da fun√ß√£o", "entrega", "h√° X anos", "movimentos repetitivos"
            - Acidentes t√≠picos: atropelamento, queda, corte, queimadura, acidente de tr√¢nsito durante trabalho
            - Contexto laboral: "estava trabalhando", "durante entrega", "no local de trabalho", "hor√°rio de trabalho"
            - Doen√ßas ocupacionais: LER/DORT, perda auditiva por ru√≠do, doen√ßas respirat√≥rias ocupacionais
            - **EXPOSI√á√ÉO OCUPACIONAL**: calor (cozinheiros), frio, qu√≠micos, ru√≠do, vibra√ß√£o por anos
            - **AGRAVAMENTO LABORAL**: condi√ß√µes preexistentes agravadas pelo trabalho
            - **POSTURAS FOR√áADAS**: dentistas, cirurgi√µes, cabeleireiros, costureiras
            - **ESTRESSE OCUPACIONAL**: motoristas, policiais, controladores, m√©dicos cirurgi√µes
            
             **CASOS ESPECIAIS - COZINHEIROS/CALOR:**
            - Cozinheiro + diabetes/hipertens√£o + sintomas no trabalho (calor) = AUX√çLIO-ACIDENTE
            - Exposi√ß√£o prolongada ao calor pode agravar diabetes e hipertens√£o
            - "Calor das panelas", "quentura", "passar mal no trabalho" = NEXO OCUPACIONAL
            
             **CASOS ESPECIAIS - DENTISTAS/LER-DORT:**
            - Dentista + dor m√£o/punho/cotovelo/ombro + "h√° X anos" = AUX√çLIO-ACIDENTE
            - Movimentos repetitivos + postura for√ßada = LER/DORT ocupacional
            - "Perda de for√ßa", "dor cr√¥nica", "n√£o consegue pegar objetos" = T√çPICO LER/DORT
            - Depress√£o secund√°ria ao desgaste profissional = COMORBIDADE OCUPACIONAL
            - Qualquer profissional de sa√∫de com LER/DORT = NEXO OCUPACIONAL CLARO
            
             **CASOS ESPECIAIS - MOTORISTAS/ESTRESSE:**
            - Motorista + doen√ßa cardiovascular + estresse = POSS√çVEL AUX√çLIO-ACIDENTE
            - Profiss√£o de alta responsabilidade + hipertens√£o/infarto = NEXO PLAUS√çVEL
            - "Estresse do trabalho", "responsabilidade", "press√£o" = INDICADORES
            
            **DETEC√á√ÉO AUTOM√ÅTICA DE LER/DORT OCUPACIONAL:**
            - Profiss√µes: dentista, fisioterapeuta, massagista, cabeleireiro, costureira, digitador, m√∫sico
            - Sintomas: dor m√£o/punho/cotovelo/ombro, perda de for√ßa, dorm√™ncia, formigamento
            - Tempo: "h√° X anos na profiss√£o" + sintomas = NEXO AUTOM√ÅTICO
            - Localiza√ß√£o: membros superiores (MMSS) = t√≠pico LER/DORT
            
            **2. AUX√çLIO-DOEN√áA** (para doen√ßas comuns SEM nexo laboral):
            ‚úÖ Usar APENAS quando:
            - Doen√ßas cr√¥nicas SEM agravamento ocupacional: diabetes, hipertens√£o, artrose SEM nexo
            - Transtornos psiqui√°tricos sem contexto ocupacional claro
            - Doen√ßas degenerativas: artrite, osteoporose, h√©rnias de disco n√£o ocupacionais
            - C√¢ncer, doen√ßas card√≠acas, doen√ßas neurol√≥gicas SEM nexo laboral
            - **CASOS RECENTES**: infarto h√° < 6 meses, cirurgias recentes, diagn√≥sticos novos
            ‚ùå N√ÉO usar para: LER/DORT em profiss√µes de risco, exposi√ß√£o ocupacional clara
            
            **3. BPC/LOAS** (defici√™ncia + vulnerabilidade social):
            ‚úÖ Usar APENAS quando:
            - Defici√™ncia f√≠sica/mental/intelectual permanente + baixa renda EXPL√çCITA
            - Idade 65+ com vulnerabilidade social CLARA
            - Incapacidade para vida independente (n√£o apenas trabalhar)
            - Autismo, defici√™ncia intelectual, paralisia cerebral
            ‚ùå N√ÉO usar para: diabetes/hipertens√£o control√°veis, incapacidade apenas laboral, LER/DORT
            
            **4. APOSENTADORIA POR INVALIDEZ**:
            ‚úÖ Usar APENAS quando:
            - Incapacidade DEFINITIVA comprovada (> 12 meses)
            - Impossibilidade TOTAL de readapta√ß√£o
            - Doen√ßas progressivas terminais: ELA, Alzheimer avan√ßado, c√¢ncer terminal
            - M√∫ltiplas tentativas de reabilita√ß√£o FALHARAM
            - Sequelas irrevers√≠veis graves
            ‚ùå N√ÉO usar para: casos recentes (< 6 meses), potencial recupera√ß√£o, primeira avalia√ß√£o
            
            **5. ISEN√á√ÉO IMPOSTO DE RENDA**:
            ‚úÖ Usar quando:
            - Doen√ßas graves da Lei 7.713/1988: c√¢ncer, AIDS, Parkinson, esclerose m√∫ltipla, etc.
            
            üß¨ CLASSIFICA√á√ÉO INTELIGENTE DE CIDs - HIERARQUIA DE GRAVIDADE:
            
            **PRIORIDADE 1 - CONDI√á√ïES AGUDAS/GRAVES:**
            - Infarto agudo (< 6 meses) ‚Üí I21.9 (SEMPRE priorizar sobre I10)
            - AVC agudo ‚Üí I63.x ou I64
            - C√¢ncer ativo ‚Üí C78.x ou espec√≠fico
            - Fraturas recentes ‚Üí S82.x
            
            **PRIORIDADE 2 - CONDI√á√ïES CR√îNICAS ESPEC√çFICAS:**
            - Infarto antigo (> 6 meses) ‚Üí I25.2
            - Diabetes com complica√ß√µes ‚Üí E11.3 (olhos), E11.2 (rins), E11.4 (nervos)
            - LER/DORT espec√≠fico ‚Üí M70.1 (tendinite), M75.1 (ombro)
            
            **PRIORIDADE 3 - CONDI√á√ïES GEN√âRICAS:**
            - Hipertens√£o essencial ‚Üí I10
            - Diabetes simples ‚Üí E11.9
            - Depress√£o gen√©rica ‚Üí F32.9
            
            **LER/DORT (M70.x, M75.x) - ESPEC√çFICOS:**
            - Dor m√£o/punho + profiss√£o de risco ‚Üí M70.0/M70.1 (sinovite/tenossinovite)
            - Dor cotovelo + movimentos repetitivos ‚Üí M70.2 (bursite ol√©crano)
            - Dor ombro + postura for√ßada ‚Üí M75.1 (s√≠ndrome do impacto)
            - S√≠ndrome t√∫nel carpo ‚Üí G56.0
            - LER/DORT gen√©rico ‚Üí M70.9 (sinovite n√£o especificada)
            
            **CARDIOVASCULARES (I) - ESPEC√çFICOS:**
            - Infarto recente (< 6 meses) ‚Üí I21.9 (infarto agudo n√£o especificado)
            - Infarto antigo (> 6 meses) ‚Üí I25.2 (infarto antigo do mioc√°rdio)
            - Insufici√™ncia card√≠aca ‚Üí I50.x
            - Hipertens√£o essencial ‚Üí I10
            - Hipertens√£o secund√°ria ‚Üí I15.x
            - AVC ‚Üí I63.x ou I64
            
            **DIABETES (E11.x) - ESPEC√çFICOS:**
            - Diabetes + problemas de vis√£o ‚Üí E11.3 (complica√ß√µes oft√°lmicas)
            - Diabetes + problemas renais ‚Üí E11.2 (complica√ß√µes renais)
            - Diabetes + neuropatia ‚Üí E11.4 (complica√ß√µes neurol√≥gicas)
            - Diabetes simples ‚Üí E11.9
            
            **TRANSTORNOS PSIQUI√ÅTRICOS (F) - ESPEC√çFICOS:**
            - Esquizofrenia ‚Üí F20.0 (paran√≥ide), F20.9 (n√£o especificada)
            - Depress√£o maior ‚Üí F32.2 (epis√≥dio grave), F32.1 (moderado), F32.0 (leve)
            - Transtorno bipolar ‚Üí F31.x
            - Ansiedade + p√¢nico ‚Üí F41.0 (transtorno de p√¢nico)
            - Burnout ocupacional ‚Üí Z73.0 ou F43.0 (rea√ß√£o ao estresse)
            
            **FRATURAS (S82.x) - ESPEC√çFICOS:**
            - Cirurgia + parafuso/placa ‚Üí S82.2 (fratura di√°fise t√≠bia) ou S82.3 (fratura di√°fise f√≠bula)
            - "Joelho quebrado" ‚Üí S82.0 (fratura patela)
            - "Tornozelo quebrado" ‚Üí S82.5/S82.6 (fratura mal√©olo)
            - Paraplegia/les√£o medular ‚Üí S14.x (les√£o medular cervical) ou S24.x (tor√°cica)
            
            **NEUROL√ìGICAS (G) - ESPEC√çFICOS:**
            - Parkinson ‚Üí G20
            - Esclerose m√∫ltipla ‚Üí G35
            - Epilepsia ‚Üí G40.x
            - S√≠ndrome t√∫nel carpo ‚Üí G56.0
            - Perda auditiva ocupacional ‚Üí H83.3 ou H90.x
            
            **ONCOL√ìGICAS (C) - ESPEC√çFICOS:**
            - C√¢ncer mama ‚Üí C50.9
            - C√¢ncer pr√≥stata ‚Üí C61
            - Leucemia ‚Üí C95.x
            - Met√°stases ‚Üí C78.x
            
            üéØ REGRAS DE CLASSIFICA√á√ÉO OBRIGAT√ìRIAS:
            
            1. **HIERARQUIA DE GRAVIDADE**: 
               - SEMPRE priorizar condi√ß√£o mais grave
               - Infarto > Hipertens√£o
               - C√¢ncer > Qualquer outra condi√ß√£o
               - Paraplegia > Fratura simples
            
            2. **ASPECTOS TEMPORAIS CR√çTICOS**: 
               - "h√° X meses/anos" = FUNDAMENTAL para classifica√ß√£o
               - < 6 meses = AUX√çLIO-DOEN√áA (n√£o aposentadoria)
               - 6-12 meses = Reavalia√ß√£o necess√°ria
               - > 12 meses = Poss√≠vel aposentadoria
            
            3. **NEXO OCUPACIONAL AUTOM√ÅTICO**: 
               - Profiss√£o + sintomas t√≠picos + tempo = AUX√çLIO-ACIDENTE
               - LER/DORT em profissionais sa√∫de = SEMPRE ocupacional
               - Estresse + cardiovascular em motoristas = NEXO PLAUS√çVEL
            
            4. **CIDs ESPEC√çFICOS OBRIGAT√ìRIOS**: 
               - NUNCA usar gen√©ricos quando espec√≠ficos dispon√≠veis
               - E11.3 em vez de E11.9 se problemas visuais
               - I21.9 em vez de I10 se infarto mencionado
               - M70.1 em vez de M70.9 se LER/DORT espec√≠fico
            
            5. **COMORBIDADES**: 
               - CID principal = condi√ß√£o mais grave
               - Mencionar secund√°rios importantes
               - LER/DORT + Depress√£o ‚Üí M70.x (principal) + F32.x (secund√°rio)
            
            6. **CRIT√âRIOS APOSENTADORIA RESTRITIVOS**:
               - Apenas para incapacidade DEFINITIVA comprovada
               - Nunca para casos recentes (< 12 meses)
               - M√∫ltiplas tentativas reabilita√ß√£o falharam
               - Sequelas irrevers√≠veis
            
            EXEMPLOS PR√ÅTICOS OBRIGAT√ìRIOS:
            - "Dentista 20 anos, dor m√£o/punho/cotovelo, perda for√ßa" ‚Üí AUX√çLIO-ACIDENTE + M70.1
            - "Motorista, infarto h√° 4 meses, estresse trabalho" ‚Üí AUX√çLIO-DOEN√áA + I21.9 (n√£o I10!)
            - "Cozinheira 20 anos, diabetes, calor agrava sintomas" ‚Üí AUX√çLIO-ACIDENTE + E11.3
            - "Soldador 25 anos, perda auditiva por ru√≠do" ‚Üí AUX√çLIO-ACIDENTE + H83.3
            - "Paraplegia acidente trabalho, definitiva" ‚Üí APOSENTADORIA + S14.x
            - "Parkinson, tremores, n√£o consegue trabalhar" ‚Üí ISEN√á√ÉO IR + G20
            - "C√¢ncer mama em tratamento" ‚Üí AUX√çLIO-DOEN√áA + C50.9 (tempor√°rio)
            
            üö® ATEN√á√ÉO M√ÅXIMA - REGRAS INVIOL√ÅVEIS: 
            1. **TEMPO √© FUNDAMENTAL**: "h√° 4 meses" = AUX√çLIO-DOEN√áA, nunca aposentadoria
            2. **GRAVIDADE hier√°rquica**: Infarto > Hipertens√£o, SEMPRE
            3. **NEXO ocupacional**: Profiss√£o + sintomas = AUX√çLIO-ACIDENTE
            4. **CID espec√≠fico**: SEMPRE escolher mais espec√≠fico dispon√≠vel
            5. **Aposentadoria restrita**: Apenas casos definitivos > 12 meses
            6. **Justificativa detalhada**: Explicar PORQUE essa classifica√ß√£o
            """
        )
    
    def _create_langgraph_pipeline(self) -> StateGraph:
        """Cria pipeline LangGraph para an√°lise m√©dica"""
        workflow = StateGraph(MedicalAnalysisState)
        
        # Adicionar n√≥s
        workflow.add_node("extract_patient", self._extract_patient_node)
        workflow.add_node("search_rag", self._search_rag_node)
        workflow.add_node("classify_benefit", self._classify_benefit_node)
        workflow.add_node("generate_report", self._generate_report_node)
        
        # Definir edges
        workflow.add_edge(START, "extract_patient")
        workflow.add_edge("extract_patient", "search_rag")
        workflow.add_edge("search_rag", "classify_benefit")
        workflow.add_edge("classify_benefit", "generate_report")
        workflow.add_edge("generate_report", END)
        
        return workflow.compile()
    
    # ========================================================================
    # N√ìDULOS LANGGRAPH
    # ========================================================================
    
    async def _extract_patient_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para extra√ß√£o de dados do paciente"""
        try:
            print("üìù LangGraph: Extraindo dados do paciente...")
            state["current_step"] = "extract_patient"
            
            combined_text = f"{state.get('patient_text', '')}\n{state.get('transcription', '')}"
            
            result = await self.patient_agent.run(combined_text)
            state["patient_data"] = result.data
            
            print(f"‚úÖ Paciente extra√≠do: {result.data.nome}")
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na extra√ß√£o do paciente: {e}")
            state["errors"].append(f"Erro na extra√ß√£o: {str(e)}")
            
            # Fallback
            state["patient_data"] = PatientDataStrict(
                nome="Paciente",
                idade=None,
                sexo=None,
                profissao=None
            )
            return state
    
    async def _search_rag_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para busca RAG"""
        try:
            print("üîç LangGraph: Buscando casos similares...")
            state["current_step"] = "search_rag"
            
            if self.rag_available and self.rag_service:
                combined_text = f"{state.get('patient_text', '')}\n{state.get('transcription', '')}"
                rag_results = self.rag_service.search_similar_cases(combined_text, top_k=3)
                state["rag_results"] = rag_results
                print(f"‚úÖ RAG: {len(rag_results)} casos encontrados")
            else:
                state["rag_results"] = []
                print("‚ö†Ô∏è RAG n√£o dispon√≠vel")
            
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na busca RAG: {e}")
            state["errors"].append(f"Erro RAG: {str(e)}")
            state["rag_results"] = []
            return state
    
    async def _classify_benefit_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para classifica√ß√£o de benef√≠cios"""
        try:
            print("üè• LangGraph: Classificando benef√≠cio...")
            state["current_step"] = "classify_benefit"
            
            # Preparar contexto
            context = {
                "patient_data": state["patient_data"].dict() if state["patient_data"] else {},
                "transcription": state.get("transcription", ""),
                "rag_context": [r.get("content", "") for r in state.get("rag_results", [])]
            }
            
            context_text = f"""
            DADOS DO PACIENTE: {json.dumps(context["patient_data"], ensure_ascii=False)}
            TRANSCRI√á√ÉO: {context["transcription"]}
            CASOS SIMILARES RAG: {" | ".join(context["rag_context"][:2])}
            """
            
            result = await self.classification_agent.run(context_text)
            state["classification"] = result.data
            
            print(f"‚úÖ Classifica√ß√£o: {result.data.tipo_beneficio.value}")
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na classifica√ß√£o: {e}")
            state["errors"].append(f"Erro na classifica√ß√£o: {str(e)}")
            
            # Fallback
            state["classification"] = BenefitClassificationStrict(
                tipo_beneficio=BenefitTypeEnum.AUXILIO_DOENCA,
                cid_principal="I10.0",
                gravidade=SeverityEnum.MODERADA,
                prognostico="Progn√≥stico requer avalia√ß√£o m√©dica continuada para determina√ß√£o adequada",
                elegibilidade=True,
                justificativa="Classifica√ß√£o autom√°tica baseada nos dados dispon√≠veis para an√°lise m√©dica"
            )
            return state
    
    async def _generate_report_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para gera√ß√£o do relat√≥rio final"""
        try:
            print("üìã LangGraph: Gerando relat√≥rio final...")
            state["current_step"] = "generate_report"
            
            # Gerar anamnese
            anamnese = self._generate_anamnese(state)
            
            # Gerar laudo
            laudo = self._generate_laudo(state)
            
            # Calcular score de confian√ßa
            confidence = self._calculate_confidence(state)
            
            # Criar relat√≥rio completo
            state["medical_report"] = MedicalReportComplete(
                patient_data=state["patient_data"],
                classification=state["classification"],
                anamnese=anamnese,
                laudo_medico=laudo,
                rag_context=[r.get("content", "")[:200] for r in state.get("rag_results", [])],
                confidence_score=confidence
            )
            
            print("‚úÖ Relat√≥rio m√©dico completo gerado")
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {e}")
            state["errors"].append(f"Erro no relat√≥rio: {str(e)}")
            return state
    
    # ========================================================================
    # M√âTODOS AUXILIARES
    # ========================================================================
    
    def _generate_anamnese(self, state: MedicalAnalysisState) -> str:
        """Gera anamnese estruturada"""
        patient = state["patient_data"]
        classification = state["classification"]
        transcription = state.get("transcription", "")
        
        # Determinar queixa principal baseada no tipo de benef√≠cio
        queixa_map = {
            'AUX√çLIO-DOEN√áA': 'Afastamento do trabalho por incapacidade tempor√°ria',
            'BPC/LOAS': 'Avalia√ß√£o para Benef√≠cio de Presta√ß√£o Continuada',
            'APOSENTADORIA POR INVALIDEZ': 'Avalia√ß√£o para aposentadoria por invalidez',
            'AUX√çLIO-ACIDENTE': 'Redu√ß√£o da capacidade laborativa p√≥s-acidente',
            'ISEN√á√ÉO IMPOSTO DE RENDA': 'Isen√ß√£o de IR por doen√ßa grave'
        }
        queixa_principal = queixa_map.get(classification.tipo_beneficio.value, 'Avalia√ß√£o de incapacidade')
        
        anamnese = f"""**ANAMNESE M√âDICA - TELEMEDICINA**

**1. IDENTIFICA√á√ÉO DO PACIENTE**
Nome: {patient.nome}
Idade: {patient.idade if patient.idade else 'N√£o informada'} anos
Sexo: {patient.sexo if patient.sexo else 'N√£o informado'}
Profiss√£o: {patient.profissao if patient.profissao else 'N√£o informada'}
Documento de identifica√ß√£o: Conforme processo
N√∫mero de processo: Conforme solicita√ß√£o

**2. QUEIXA PRINCIPAL**
{queixa_principal}
Solicita√ß√£o espec√≠fica: {classification.tipo_beneficio.value}

**3. HIST√ìRIA DA DOEN√áA ATUAL (HDA)**
{transcription if transcription.strip() else 'Paciente relata quadro cl√≠nico atual conforme dados fornecidos via telemedicina. Apresenta sintomas compat√≠veis com a condi√ß√£o referida, com impacto sobre a funcionalidade e capacidade laborativa.'}

Fatores desencadeantes ou agravantes: {', '.join(patient.condicoes) if patient.condicoes else 'A esclarecer em avalia√ß√£o presencial'}
Tratamentos realizados: {', '.join(patient.medicamentos) if patient.medicamentos else 'Conforme prescri√ß√£o m√©dica'}
Sintomas atuais: {', '.join(patient.sintomas) if patient.sintomas else 'Conforme relato do paciente'}

**4. ANTECEDENTES PESSOAIS E FAMILIARES RELEVANTES**
Doen√ßas pr√©vias: {', '.join(patient.condicoes) if patient.condicoes else 'Conforme hist√≥rico m√©dico'}
Hist√≥rico ocupacional: {patient.profissao if patient.profissao != 'N√£o informada' else 'Conforme CTPS'}
Hist√≥rico previdenci√°rio: Conforme CNIS

**5. DOCUMENTA√á√ÉO APRESENTADA**
Documentos m√©dicos: Conforme processo
Exames complementares: Conforme anexos
Observa√ß√£o: An√°lise baseada em documenta√ß√£o dispon√≠vel e consulta por telemedicina

**6. EXAME CL√çNICO (ADAPTADO PARA TELEMEDICINA)**
Relato de autoavalia√ß√£o: Limita√ß√µes funcionais referidas pelo paciente
Observa√ß√£o visual: Por videoconfer√™ncia/telemedicina
Limita√ß√µes observadas: Compat√≠veis com o quadro cl√≠nico relatado
Avalia√ß√£o funcional: Restri√ß√µes evidentes para atividade laboral habitual

**7. AVALIA√á√ÉO M√âDICA (ASSESSMENT)**
Hip√≥tese diagn√≥stica: Compat√≠vel com CID-10: {classification.cid_principal}
Correla√ß√£o cl√≠nico-funcional: Quadro cl√≠nico com repercuss√µes sobre a capacidade laborativa
Enquadramento previdenci√°rio: {classification.tipo_beneficio.value}

Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
"""
        
        return anamnese
    
    def _generate_laudo(self, state: MedicalAnalysisState) -> str:
        """Gera laudo m√©dico estruturado seguindo padr√£o profissional"""
        patient = state["patient_data"]
        classification = state["classification"]
        transcription = state.get("transcription", "")
        
        # VERIFICAR SE √â CRIAN√áA
        is_child = patient.idade and patient.idade < 18
        
        # Conclus√£o espec√≠fica por tipo de benef√≠cio
        conclusoes = {
            BenefitTypeEnum.AUXILIO_DOENCA: "Paciente apresenta redu√ß√£o significativa da capacidade laborativa devido ao quadro cl√≠nico atual, que inviabiliza o exerc√≠cio das atividades profissionais habituais. Recomenda-se afastamento tempor√°rio para tratamento adequado.",
            BenefitTypeEnum.AUXILIO_ACIDENTE: "Redu√ß√£o parcial e permanente da capacidade laborativa em decorr√™ncia de acidente, conforme Anexo III do Decreto 3.048/1999.",
            BenefitTypeEnum.BPC_LOAS: "Paciente apresenta impedimento de longo prazo de natureza f√≠sica, mental, intelectual ou sensorial, que impede a participa√ß√£o plena e efetiva na sociedade em igualdade de condi√ß√µes.",
            BenefitTypeEnum.APOSENTADORIA_INVALIDEZ: "Paciente apresenta incapacidade definitiva para o exerc√≠cio de qualquer atividade laborativa, sem possibilidade de readapta√ß√£o funcional.",
            BenefitTypeEnum.ISENCAO_IR: "Paciente enquadra-se no rol de doen√ßas graves da Lei 7.713/1988, fazendo jus √† isen√ß√£o do imposto de renda."
        }
        
        conclusao_beneficio = conclusoes.get(classification.tipo_beneficio, conclusoes[BenefitTypeEnum.AUXILIO_DOENCA])
        tempo_inicio = "Data de in√≠cio dos sintomas conforme relato"
        
        if is_child:
            # TEMPLATE ESPEC√çFICO PARA CRIAN√áAS
            laudo = f"""**LAUDO M√âDICO ESPECIALIZADO**

**1. HIST√ìRIA CL√çNICA RESUMIDA**
Paciente {patient.nome}, {patient.idade} anos, apresenta quadro cl√≠nico de {classification.cid_principal} com evolu√ß√£o {classification.gravidade.value.lower()}. Desenvolvimento neuropsicomotor com limita√ß√µes evidentes para atividades de vida di√°ria e participa√ß√£o escolar. Diagn√≥stico compat√≠vel com CID-10: {classification.cid_principal}.

**2. LIMITA√á√ÉO FUNCIONAL**
Crian√ßa apresenta limita√ß√µes funcionais para desenvolvimento neuropsicomotor, autonomia pessoal e participa√ß√£o escolar. Comprometimento da capacidade de intera√ß√£o social e necessidades educacionais especiais. Requer acompanhamento multidisciplinar continuado.

**3. TRATAMENTO**
Paciente em acompanhamento m√©dico especializado com {', '.join(patient.medicamentos) if patient.medicamentos else 'terapias apropriadas conforme prescri√ß√£o m√©dica'}. Necessidade de suporte multidisciplinar incluindo fisioterapia, terapia ocupacional e acompanhamento pedag√≥gico especializado.

**4. PROGN√ìSTICO**
Progn√≥stico reservado com necessidade de acompanhamento especializado cont√≠nuo. Limita√ß√µes permanentes requerendo suporte familiar, educacional e terap√™utico de longo prazo para maximiza√ß√£o do potencial de desenvolvimento.

**5. CONCLUS√ÉO CONGRUENTE COM O BENEF√çCIO**
Crian√ßa apresenta impedimento de longo prazo que compromete participa√ß√£o plena na sociedade. O quadro cl√≠nico fundamenta indica√ß√£o de {classification.tipo_beneficio.value}, considerando necessidades especiais e suporte continuado para desenvolvimento.

**6. CID-10**
C√≥digo(s): {classification.cid_principal}

Data: {datetime.now().strftime('%d/%m/%Y')}
Observa√ß√£o: Laudo gerado por sistema de IA m√©dica avan√ßada - Valida√ß√£o m√©dica presencial recomendada.
"""
        else:
            # TEMPLATE ESPEC√çFICO PARA ADULTOS
            laudo = f"""**LAUDO M√âDICO ESPECIALIZADO**

**1. HIST√ìRIA CL√çNICA RESUMIDA**
{tempo_inicio}. Paciente {patient.nome}, {patient.idade if patient.idade else 'idade n√£o informada'} anos, {patient.profissao if patient.profissao else 'profiss√£o n√£o informada'}, apresenta evolu√ß√£o cl√≠nica {classification.gravidade.value.lower()} do quadro, com sintomas que comprometem significativamente a funcionalidade laboral. O quadro atual caracteriza-se por {', '.join(patient.sintomas[:3]) if patient.sintomas else 'sintomas compat√≠veis com o diagn√≥stico'}, resultando em impacto direto sobre a capacidade de desempenhar atividades laborais habituais. Diagn√≥stico principal compat√≠vel com CID-10: {classification.cid_principal}.

**2. LIMITA√á√ÉO FUNCIONAL**
Paciente apresenta limita√ß√µes funcionais evidentes de ordem {'f√≠sica e mental' if any(s in str(patient.sintomas).lower() for s in ['dor', 'f√≠sico']) and any(s in str(patient.sintomas).lower() for s in ['ansiedade', 'depress√£o', 'p√¢nico']) else 'mental' if any(s in str(patient.sintomas).lower() for s in ['ansiedade', 'depress√£o', 'p√¢nico']) else 'f√≠sica'}, manifestadas por {', '.join(patient.sintomas[:2]) if patient.sintomas else 'sintomas incapacitantes'}. Estas limita√ß√µes comprometem diretamente a funcionalidade laboral, tornando invi√°vel a continuidade das atividades profissionais em condi√ß√µes adequadas. Os sintomas agravantes incluem epis√≥dios de {', '.join(patient.sintomas) if patient.sintomas else 'manifesta√ß√µes cl√≠nicas'} que interferem na concentra√ß√£o, produtividade e capacidade de intera√ß√£o no ambiente de trabalho.

**3. TRATAMENTO**
Paciente encontra-se em tratamento m√©dico com {', '.join(patient.medicamentos) if patient.medicamentos else 'medica√ß√µes apropriadas conforme prescri√ß√£o m√©dica'}. A resposta terap√™utica tem sido {'parcial' if classification.gravidade.value == 'MODERADA' else 'limitada' if classification.gravidade.value == 'GRAVE' else 'satisfat√≥ria'}, necessitando continuidade do acompanhamento especializado. O plano terap√™utico inclui medidas farmacol√≥gicas e n√£o-farmacol√≥gicas, sendo fundamental a ades√£o ao tratamento para otimiza√ß√£o dos resultados cl√≠nicos.

**4. PROGN√ìSTICO**
O progn√≥stico √© considerado {'reservado' if classification.gravidade.value in ['MODERADA', 'GRAVE'] else 'favor√°vel'} a {'desfavor√°vel' if classification.gravidade.value == 'GRAVE' else 'reservado'}, com expectativa de {'estabiliza√ß√£o gradual' if classification.tipo_beneficio.value == 'AUXILIO_DOENCA' else 'limita√ß√µes permanentes'} {'a m√©dio prazo' if classification.tipo_beneficio.value == 'AUXILIO_DOENCA' else 'de longo prazo'}. Tempo estimado de afastamento: {'3 a 6 meses com reavalia√ß√µes peri√≥dicas' if classification.tipo_beneficio.value == 'AUXILIO_DOENCA' else 'indeterminado' if classification.tipo_beneficio.value in ['BPC/LOAS', 'APOSENTADORIA POR INVALIDEZ'] else 'conforme evolu√ß√£o cl√≠nica'}. A possibilidade de retorno √† fun√ß√£o {'√© condicionada √† resposta terap√™utica adequada' if classification.tipo_beneficio.value == 'AUXILIO_DOENCA' else '√© improv√°vel sem readapta√ß√£o funcional' if classification.tipo_beneficio.value == 'AUXILIO_ACIDENTE' else '√© remota'}.

**5. CONCLUS√ÉO CONGRUENTE COM O BENEF√çCIO**
{conclusao_beneficio} O quadro cl√≠nico atual fundamenta a indica√ß√£o de {classification.tipo_beneficio.value}, considerando {'a natureza tempor√°ria da incapacidade' if classification.tipo_beneficio.value == 'AUXILIO_DOENCA' else 'a natureza permanente das limita√ß√µes' if classification.tipo_beneficio.value in ['APOSENTADORIA POR INVALIDEZ', 'BPC/LOAS'] else 'as caracter√≠sticas espec√≠ficas do caso'} e a necessidade de {'tratamento especializado' if classification.tipo_beneficio.value == 'AUXILIO_DOENCA' else 'suporte continuado'}.

**6. CID-10**
C√≥digo(s): {classification.cid_principal}

Data: {datetime.now().strftime('%d/%m/%Y')}
Observa√ß√£o: Laudo gerado por sistema de IA m√©dica avan√ßada - Valida√ß√£o m√©dica presencial recomendada.
"""
        
        return laudo.strip()
    
    def _calculate_confidence(self, state: MedicalAnalysisState) -> float:
        """Calcula score de confian√ßa"""
        confidence = 0.5  # Base
        
        # Aumentar se h√° dados do paciente
        if state["patient_data"] and state["patient_data"].nome != "Paciente":
            confidence += 0.2
        
        # Aumentar se h√° transcri√ß√£o
        if state.get("transcription") and len(state["transcription"]) > 50:
            confidence += 0.2
        
        # Aumentar se RAG encontrou casos
        if state.get("rag_results") and len(state["rag_results"]) > 0:
            confidence += 0.1
        
        # Diminuir se h√° erros
        if state.get("errors"):
            confidence -= 0.1 * len(state["errors"])
        
        return max(0.0, min(1.0, confidence))
    
    # ========================================================================
    # INTERFACE P√öBLICA
    # ========================================================================
    
    async def analyze_complete(self, patient_text: str = "", transcription: str = "") -> MedicalReportComplete:
        """An√°lise m√©dica completa usando Pydantic AI + LangGraph"""
        try:
            print("üöÄ Iniciando an√°lise COMPLETA: Pydantic AI + LangGraph + RAG + FAISS")
            
            # Estado inicial
            initial_state = MedicalAnalysisState(
                messages=[],
                patient_text=patient_text,
                transcription=transcription,
                patient_data=None,
                classification=None,
                rag_results=[],
                medical_report=None,
                errors=[],
                current_step="inicio"
            )
            
            # Executar pipeline LangGraph
            final_state = await self.workflow.ainvoke(initial_state)
            
            if final_state["medical_report"]:
                print("‚úÖ AN√ÅLISE COMPLETA FINALIZADA COM SUCESSO!")
                return final_state["medical_report"]
            else:
                raise Exception("Relat√≥rio n√£o foi gerado corretamente")
                
        except Exception as e:
            print(f"‚ùå Erro na an√°lise completa: {e}")
            raise e


# ============================================================================
# INST√ÇNCIA GLOBAL
# ============================================================================

_pydantic_medical_ai = None

def get_pydantic_medical_ai() -> PydanticMedicalAI:
    """Retorna inst√¢ncia singleton do Pydantic Medical AI"""
    global _pydantic_medical_ai
    if _pydantic_medical_ai is None:
        _pydantic_medical_ai = PydanticMedicalAI()
    return _pydantic_medical_ai 
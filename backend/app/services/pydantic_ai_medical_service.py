

import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from enum import Enum
import re

# Pydantic AI
from pydantic_ai import Agent, RunContext
from pydantic import BaseModel, Field, validator
from pydantic_ai.models.openai import OpenAIModel

# LangGraph
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from typing_extensions import Annotated, TypedDict

logger = logging.getLogger(__name__)


# ============================================================================
# MODELOS PYDANTIC ESTRITOS PARA VALIDA√á√ÉO
# ============================================================================

class BenefitTypeEnum(str, Enum):
    AUXILIO_DOENCA = "AUX√çLIO-DOEN√áA"
    APOSENTADORIA_INVALIDEZ = "APOSENTADORIA POR INVALIDEZ"
    BPC_LOAS = "BPC/LOAS"
    AUXILIO_ACIDENTE = "AUX√çLIO-ACIDENTE"
    ISENCAO_IR = "ISEN√á√ÉO IMPOSTO DE RENDA"


class SeverityEnum(str, Enum):
    LEVE = "LEVE"
    MODERADA = "MODERADA"
    GRAVE = "GRAVE"


class PatientDataStrict(BaseModel):
    """Dados do paciente com valida√ß√£o estrita e corre√ß√£o de medicamentos"""
    nome: str = Field(min_length=1, description="Nome completo do paciente")
    idade: Optional[int] = Field(None, ge=0, le=120, description="Idade do paciente")
    sexo: Optional[str] = Field(None, pattern="^[MF]$", description="Sexo M ou F")
    profissao: Optional[str] = Field(None, description="Profiss√£o do paciente")
    sintomas: List[str] = Field(default_factory=list, description="Lista de sintomas")
    medicamentos: List[str] = Field(default_factory=list, description="Lista de medicamentos")
    condicoes: List[str] = Field(default_factory=list, description="Lista de condi√ß√µes m√©dicas")

    @validator('medicamentos', pre=True)
    def normalize_medications(cls, v):
        """Normaliza medicamentos corrigindo erros comuns"""
        if not v:
            return []
        
        # Dicion√°rio de corre√ß√µes comuns
        corrections = {
            'metamorfina': 'metformina',
            'captou o piu': 'captopril',
            'captou mi√∫do': 'captopril',
            'captomai': 'captopril',
            'pium': '',  # Remove
            'zartan': 'losartana',
            'art√µes': 'atorvastatina',
            'lodosartana': 'losartana',
            'captou o rio': 'captopril'
        }
        
        corrected = []
        for med in v:
            if isinstance(med, str):
                med_lower = med.lower().strip()
                # Aplicar corre√ß√µes
                for wrong, right in corrections.items():
                    if wrong in med_lower:
                        if right:  # Se n√£o √© para remover
                            corrected.append(right)
                        break
                else:
                    # Se n√£o encontrou erro conhecido, manter original
                    corrected.append(med.strip())
        
        return list(set(filter(None, corrected)))  # Remove duplicatas e vazios


class BenefitClassificationStrict(BaseModel):
    """Classifica√ß√£o de benef√≠cio com valida√ß√£o estrita e regras CFM"""
    tipo_beneficio: BenefitTypeEnum = Field(description="Tipo de benef√≠cio recomendado")
    cid_principal: str = Field(pattern="^[A-Z]\d{2}(\.\d)?$", description="CID-10 no formato A00.0 ou A00")
    cids_secundarios: Optional[List[str]] = Field(default_factory=list, description="CIDs secund√°rios/comorbidades")
    gravidade: SeverityEnum = Field(description="Gravidade da condi√ß√£o")
    prognostico: str = Field(min_length=20, description="Progn√≥stico detalhado")
    elegibilidade: bool = Field(description="Se √© eleg√≠vel para o benef√≠cio")
    justificativa: str = Field(min_length=50, description="Justificativa m√©dica detalhada")
    especificidade_cid: str = Field(description="Explica√ß√£o da escolha do CID espec√≠fico")
    fonte_cids: str = Field(default="Base Local RAG (FAISS)", description="Fonte dos CIDs")
    telemedicina_limitacao: Optional[str] = Field(None, description="Observa√ß√£o sobre limita√ß√µes da telemedicina")

    @validator('cid_principal')
    def validate_cid(cls, v):
        if not v or v.lower() in ['n√£o informado', 'nao informado', '']:
            return 'I10'  # Hipertens√£o como fallback
        return v

    @validator('cids_secundarios')
    def validate_secondary_cids(cls, v):
        if not v:
            return []
        # Validar formato de cada CID secund√°rio
        valid_cids = []
        for cid in v:
            if re.match(r'^[A-Z]\d{2}(\.\d)?$', cid):
                valid_cids.append(cid)
        return valid_cids


class MedicalReportComplete(BaseModel):
    """Relat√≥rio m√©dico completo"""
    patient_data: PatientDataStrict
    classification: BenefitClassificationStrict
    anamnese: str = Field(min_length=100, description="Anamnese estruturada")
    laudo_medico: str = Field(min_length=200, description="Laudo m√©dico detalhado")
    rag_context: List[str] = Field(default_factory=list, description="Contexto RAG relevante")
    confidence_score: float = Field(ge=0.0, le=1.0, description="Score de confian√ßa")


# ============================================================================
# ESTADO LANGGRAPH
# ============================================================================

class MedicalAnalysisState(TypedDict):
    """Estado do pipeline LangGraph"""
    messages: Annotated[list, add_messages]
    patient_text: str
    transcription: str
    patient_data: Optional[PatientDataStrict]
    classification: Optional[BenefitClassificationStrict]
    rag_results: List[Dict[str, Any]]
    medical_report: Optional[MedicalReportComplete]
    errors: List[str]
    current_step: str
    telemedicine_mode: bool


# ============================================================================
# AGENTES PYDANTIC AI
# ============================================================================

class PydanticMedicalAI:
    """Servi√ßo principal com Pydantic AI, LangGraph, RAG e FAISS"""
    
    def __init__(self, telemedicine_mode: bool = True):
        """
        Inicializa o sistema m√©dico
        
        Args:
            telemedicine_mode: Se True, aplica limita√ß√µes CFM para telemedicina
        """
        self.telemedicine_mode = telemedicine_mode
        
        # For√ßar carregamento da API key
        try:
            from .force_openai_env import setup_openai_env
            setup_openai_env()
        except:
            pass
            
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada")
        
        # Modelo OpenAI para Pydantic AI
        import openai
        openai.api_key = self.openai_api_key
        self.model = OpenAIModel('gpt-4o-mini')
        
        # Agentes Pydantic AI
        self.patient_agent = self._create_patient_agent()
        self.classification_agent = self._create_classification_agent()
        
        # Pipeline LangGraph
        self.workflow = self._create_langgraph_pipeline()
        
        # RAG Service
        try:
            from .rag.medical_rag_service import MedicalRAGService
            self.rag_service = MedicalRAGService()
            self.rag_available = True
            print("‚úÖ RAG integrado ao Pydantic AI")
        except Exception as e:
            print(f"‚ö†Ô∏è RAG n√£o dispon√≠vel: {e}")
            self.rag_available = False
            self.rag_service = None
        
        mode_text = "TELEMEDICINA" if self.telemedicine_mode else "PRESENCIAL"
        print(f"‚úÖ Pydantic AI Medical Service inicializado - Modo: {mode_text}")
    
    def _create_patient_agent(self) -> Agent:
        """Cria agente para extra√ß√£o de dados do paciente"""
        return Agent(
            model=self.model,
            result_type=PatientDataStrict,
            system_prompt="""
            Voc√™ √© um especialista em extra√ß√£o de dados m√©dicos com corre√ß√£o autom√°tica.
            Extraia informa√ß√µes do paciente do texto fornecido com m√°xima precis√£o.
            
            REGRAS OBRIGAT√ìRIAS:
            - nome: SEMPRE extrair um nome, use "Paciente" se n√£o encontrar
            - idade: APENAS n√∫meros inteiros entre 0-120, null se n√£o encontrar
            - sexo: APENAS "M" ou "F", null se n√£o encontrar
            - medicamentos: Corrigir automaticamente erros comuns de transcri√ß√£o
            - sintomas: Normalizar termos m√©dicos
            - Listas vazias se n√£o encontrar informa√ß√µes espec√≠ficas
            
            CORRE√á√ïES AUTOM√ÅTICAS DE MEDICAMENTOS:
            - "metamorfina" ‚Üí "metformina"
            - "captou o piu" ‚Üí "captopril"
            - "zartan" ‚Üí "losartana"
            - "art√µes" ‚Üí "atorvastatina"
            - Remover palavras sem sentido: "pium", etc.
            
            Seja preciso e objetivo. Retorne apenas dados estruturados v√°lidos.
            """
        )
    
    def _create_classification_agent(self) -> Agent:
        """Cria agente para classifica√ß√£o de benef√≠cios"""
        
        telemedicine_rules = ""
        if self.telemedicine_mode:
            telemedicine_rules = """
            üö® LIMITA√á√ïES CFM PARA TELEMEDICINA - REGRAS OBRIGAT√ìRIAS:
            
            ‚öñÔ∏è **REGRA FUNDAMENTAL:**
            - CFM PRO√çBE estabelecer nexo ocupacional por telemedicina
            - SEMPRE usar AUX√çLIO-DOEN√áA quando n√£o h√° nexo pr√©-estabelecido
            - Mencionar na justificativa: "Nexo ocupacional requer avalia√ß√£o presencial"
            
            üîí **RESTRI√á√ïES ABSOLUTAS:**
            - N√ÉO classificar como AUX√çLIO-ACIDENTE sem CAT pr√©via
            - N√ÉO estabelecer nexo causal baseado apenas em relato
            - SEMPRE indicar necessidade de avalia√ß√£o presencial para nexo
            
            ‚úÖ **QUANDO USAR AUX√çLIO-ACIDENTE:**
            - APENAS se houver CAT (Comunica√ß√£o de Acidente de Trabalho) j√° emitida
            - APENAS se houver per√≠cia pr√©via confirmando nexo
            - APENAS em casos de acidente traum√°tico claro e indiscut√≠vel
            
            ‚ùå **NUNCA USAR AUX√çLIO-ACIDENTE PARA:**
            - LER/DORT sem CAT pr√©via (usar AUX√çLIO-DOEN√áA)
            - Agravamento ocupacional sem comprova√ß√£o (usar AUX√çLIO-DOEN√áA)  
            - Exposi√ß√£o ocupacional presumida (usar AUX√çLIO-DOEN√áA)
            - Qualquer caso que dependa de estabelecer nexo por telemedicina
            
            üìù **JUSTIFICATIVA OBRIGAT√ìRIA:**
            - Sempre mencionar: "O estabelecimento de nexo ocupacional requer avalia√ß√£o presencial especializada conforme regulamenta√ß√£o do CFM para telemedicina"
            """
        
        return Agent(
            model=self.model,
            result_type=BenefitClassificationStrict,
            system_prompt=f"""
            Voc√™ √© um m√©dico perito previdenci√°rio EXPERT em classifica√ß√£o de benef√≠cios e CIDs.
            
            {telemedicine_rules}
            
            üß† HIERARQUIA DE AN√ÅLISE (ORDEM OBRIGAT√ìRIA):
            
            1Ô∏è‚É£ **IDENTIFIQUE A CONDI√á√ÉO PRINCIPAL** (mais grave/recente)
            2Ô∏è‚É£ **AVALIE ASPECTOS TEMPORAIS** (agudo vs cr√¥nico)
            3Ô∏è‚É£ **VERIFIQUE LIMITA√á√ïES TELEMEDICINA** (nexo ocupacional?)
            4Ô∏è‚É£ **CLASSIFIQUE GRAVIDADE** (funcionalidade comprometida?)
            5Ô∏è‚É£ **ESCOLHA BENEF√çCIO** (respeitando limita√ß√µes CFM)
            6Ô∏è‚É£ **SELECIONE CID ESPEC√çFICO** (mais preciso poss√≠vel)
            
            üéØ CLASSIFICA√á√ÉO DE BENEF√çCIOS (TELEMEDICINA):
            
            **1. AUX√çLIO-DOEN√áA** (PRIORIDADE em telemedicina):
            ‚úÖ Usar para:
            - Diabetes com complica√ß√µes (E11.3 se vis√£o emba√ßada)
            - Hipertens√£o descompensada (I10)
            - Depress√£o/ansiedade (F32.x, F41.x)
            - Doen√ßas card√≠acas (I21.9, I25.2)
            - LER/DORT sem CAT pr√©via (M70.x, G56.0)
            - Qualquer condi√ß√£o SEM nexo pr√©-estabelecido
            
            **2. AUX√çLIO-ACIDENTE** (APENAS com nexo pr√©-estabelecido):
            ‚úÖ Usar SOMENTE quando:
            - CAT j√° emitida e mencionada
            - Per√≠cia pr√©via confirmou nexo
            - Acidente traum√°tico indiscut√≠vel (fratura em acidente)
            ‚ùå NUNCA usar para nexo presumido
            
            **3. BPC/LOAS** (defici√™ncia + vulnerabilidade):
            ‚úÖ Usar quando:
            - Defici√™ncia permanente + baixa renda expl√≠cita
            - Crian√ßa com defici√™ncia
            - Idoso 65+ vulner√°vel
            
            **4. APOSENTADORIA POR INVALIDEZ**:
            ‚úÖ Usar quando:
            - Incapacidade definitiva > 12 meses
            - M√∫ltiplas tentativas reabilita√ß√£o falharam
            - Doen√ßas terminais
            
            üß¨ HIERARQUIA DE CIDs ESPEC√çFICOS:
            
            **DIABETES:**
            - Com vis√£o emba√ßada ‚Üí E11.3 (complica√ß√µes oft√°lmicas)
            - Com problemas renais ‚Üí E11.2
            - Sem complica√ß√µes ‚Üí E11.9
            
            **CARDIOVASCULARES:**
            - Infarto < 6 meses ‚Üí I21.9
            - Infarto > 6 meses ‚Üí I25.2
            - Hipertens√£o ‚Üí I10
            
            **LER/DORT:**
            - S√≠ndrome t√∫nel carpo ‚Üí G56.0
            - Tendinite punho ‚Üí M70.1
            - Bursite cotovelo ‚Üí M70.2
            - S√≠ndrome impacto ombro ‚Üí M75.1
            
            **PSIQUI√ÅTRICAS:**
            - Depress√£o grave ‚Üí F32.2
            - Depress√£o moderada ‚Üí F32.1
            - Ansiedade generalizada ‚Üí F41.1
            - Transtorno p√¢nico ‚Üí F41.0
            
            üéØ REGRAS DE GRAVIDADE (CONSERVADORAS):
            
            **GRAVE:** (USAR APENAS EM CASOS EXTREMOS)
            - M√∫ltiplas condi√ß√µes descompensadas simultaneamente
            - Incapacidade total e definitiva
            - Risco iminente de vida
            - Complica√ß√µes severas n√£o controladas
            
            **MODERADA:** (PADR√ÉO PARA MAIORIA DOS CASOS)
            - Diabetes com sintomas (vis√£o emba√ßada, mal estar)
            - Hipertens√£o descompensada (>18x11)
            - LER/DORT com limita√ß√µes funcionais
            - Condi√ß√µes que afetam trabalho mas s√£o trat√°veis
            
            **LEVE:** (CASOS EST√ÅVEIS)
            - Diabetes bem controlado sem sintomas
            - Hipertens√£o controlada com medica√ß√£o
            - Condi√ß√µes est√°veis em tratamento
            
            üìã REGRAS ESPEC√çFICAS PARA DIABETES:
            
            **TIPO 1 (E10.x):**
            - Mencionado "tipo 1" OU "insulina dependente"
            - E10.9 = sem complica√ß√µes, E10.3 = com complica√ß√µes
            
            **TIPO 2 (E11.x):**
            - Mencionado "tipo 2" OU uso de "metformina/glibenclamida"
            - E11.9 = sem complica√ß√µes, E11.3 = com complica√ß√µes
            
            **Gravidade Diabetes:**
            - LEVE: Bem controlado, sem sintomas
            - MODERADA: Com sintomas (vis√£o emba√ßada, mal estar, hipertens√£o)
            - GRAVE: Apenas com complica√ß√µes severas (cetoacidose, coma)
            
            üö® REGRAS INVIOL√ÅVEIS:
            1. **Sempre respeitar limita√ß√µes CFM para telemedicina**
            2. **Hierarquia: condi√ß√£o mais grave = CID principal**
            3. **Diabetes com sintomas = E11.3, n√£o E11.9**
            4. **Sem nexo pr√©-estabelecido = AUX√çLIO-DOEN√áA**
            5. **Justificar limita√ß√µes de telemedicina quando relevante**
            
            EXEMPLOS PR√ÅTICOS:
            - "Cozinheiro, diabetes + calor" ‚Üí AUX√çLIO-DOEN√áA + E11.3 (sem CAT)
            - "Programador, LER/DORT" ‚Üí AUX√çLIO-DOEN√áA + G56.0 (sem CAT)
            - "Entregador, fratura em acidente" ‚Üí AUX√çLIO-DOEN√áA (sem CAT)
            - "Infarto h√° 3 meses" ‚Üí AUX√çLIO-DOEN√áA + I21.9
            """
        )
    
    def _create_langgraph_pipeline(self) -> StateGraph:
        """Cria pipeline LangGraph para an√°lise m√©dica"""
        workflow = StateGraph(MedicalAnalysisState)
        
        # Adicionar n√≥s
        workflow.add_node("extract_patient", self._extract_patient_node)
        workflow.add_node("search_rag", self._search_rag_node)
        workflow.add_node("classify_benefit", self._classify_benefit_node)
        workflow.add_node("validate_telemedicine", self._validate_telemedicine_node)
        workflow.add_node("generate_report", self._generate_report_node)
        
        # Definir edges
        workflow.add_edge(START, "extract_patient")
        workflow.add_edge("extract_patient", "search_rag")
        workflow.add_edge("search_rag", "classify_benefit")
        workflow.add_edge("classify_benefit", "validate_telemedicine")
        workflow.add_edge("validate_telemedicine", "generate_report")
        workflow.add_edge("generate_report", END)
        
        return workflow.compile()
    
    # ========================================================================
    # N√ìDULOS LANGGRAPH
    # ========================================================================
    
    async def _extract_patient_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para extra√ß√£o de dados do paciente"""
        try:
            print("üìù LangGraph: Extraindo dados do paciente...")
            state["current_step"] = "extract_patient"
            state["telemedicine_mode"] = self.telemedicine_mode
            
            combined_text = f"{state.get('patient_text', '')}\n{state.get('transcription', '')}"
            
            result = await self.patient_agent.run(combined_text)
            state["patient_data"] = result.data
            
            print(f"‚úÖ Paciente extra√≠do: {result.data.nome}")
            if result.data.medicamentos:
                print(f"üíä Medicamentos corrigidos: {result.data.medicamentos}")
            
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na extra√ß√£o do paciente: {e}")
            state["errors"].append(f"Erro na extra√ß√£o: {str(e)}")
            
            # Fallback
            state["patient_data"] = PatientDataStrict(
                nome="Paciente",
                idade=None,
                sexo=None,
                profissao=None
            )
            return state
    
    async def _search_rag_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para busca RAG"""
        try:
            print("üîç LangGraph: Buscando casos similares...")
            state["current_step"] = "search_rag"
            
            if self.rag_available and self.rag_service:
                combined_text = f"{state.get('patient_text', '')}\n{state.get('transcription', '')}"
                rag_results = self.rag_service.search_similar_cases(combined_text, top_k=3)
                state["rag_results"] = rag_results
                print(f"‚úÖ RAG: {len(rag_results)} casos encontrados")
            else:
                state["rag_results"] = []
                print("‚ö†Ô∏è RAG n√£o dispon√≠vel")
            
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na busca RAG: {e}")
            state["errors"].append(f"Erro RAG: {str(e)}")
            state["rag_results"] = []
            return state
    
    async def _classify_benefit_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para classifica√ß√£o de benef√≠cios"""
        try:
            print("üè• LangGraph: Classificando benef√≠cio...")
            state["current_step"] = "classify_benefit"
            
            # Preparar contexto
            context = {
                "patient_data": state["patient_data"].dict() if state["patient_data"] else {},
                "transcription": state.get("transcription", ""),
                "rag_context": [r.get("content", "") for r in state.get("rag_results", [])],
                "telemedicine_mode": self.telemedicine_mode
            }
            
            context_text = f"""
            DADOS DO PACIENTE: {json.dumps(context["patient_data"], ensure_ascii=False)}
            TRANSCRI√á√ÉO: {context["transcription"]}
            CASOS SIMILARES RAG: {" | ".join(context["rag_context"][:2])}
            MODO TELEMEDICINA: {'SIM' if self.telemedicine_mode else 'N√ÉO'}
            """
            
            result = await self.classification_agent.run(context_text)
            state["classification"] = result.data
            
            print(f"‚úÖ Classifica√ß√£o: {result.data.tipo_beneficio.value}")
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na classifica√ß√£o: {e}")
            state["errors"].append(f"Erro na classifica√ß√£o: {str(e)}")
            
            # Fallback
            state["classification"] = BenefitClassificationStrict(
                tipo_beneficio=BenefitTypeEnum.AUXILIO_DOENCA,
                cid_principal="I10",
                gravidade=SeverityEnum.MODERADA,
                prognostico="Progn√≥stico requer avalia√ß√£o m√©dica continuada para determina√ß√£o adequada",
                elegibilidade=True,
                justificativa="Classifica√ß√£o autom√°tica baseada nos dados dispon√≠veis para an√°lise m√©dica. Avalia√ß√£o presencial recomendada para confirma√ß√£o diagn√≥stica.",
                especificidade_cid="CID atribu√≠do com base nas informa√ß√µes dispon√≠veis",
                fonte_cids="Sistema autom√°tico"
            )
            return state
    
    async def _validate_telemedicine_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para valida√ß√£o das limita√ß√µes de telemedicina"""
        try:
            print("‚öñÔ∏è LangGraph: Validando limita√ß√µes CFM...")
            state["current_step"] = "validate_telemedicine"
            
            if not self.telemedicine_mode:
                print("‚úÖ Modo presencial - sem restri√ß√µes")
                return state
            
            classification = state["classification"]
            patient_data = state["patient_data"]
            
            # Verificar se √© aux√≠lio-acidente sem CAT
            if classification.tipo_beneficio == BenefitTypeEnum.AUXILIO_ACIDENTE:
                
                # Verificar se h√° men√ß√£o de CAT ou per√≠cia pr√©via
                combined_text = f"{state.get('patient_text', '')}\n{state.get('transcription', '')}"
                has_cat = any(term in combined_text.lower() for term in [
                    'cat', 'comunica√ß√£o de acidente', 'per√≠cia', 'inss confirmou', 
                    'laudo pericial', 'nexo estabelecido'
                ])
                
                if not has_cat:
                    print("üö® Convertendo AUX√çLIO-ACIDENTE ‚Üí AUX√çLIO-DOEN√áA (sem CAT)")
                    
                    # For√ßar mudan√ßa para aux√≠lio-doen√ßa
                    classification.tipo_beneficio = BenefitTypeEnum.AUXILIO_DOENCA
                    
                    # Adicionar observa√ß√£o sobre limita√ß√£o
                    cfm_note = " O estabelecimento de nexo ocupacional requer avalia√ß√£o presencial especializada conforme regulamenta√ß√£o do CFM para telemedicina."
                    
                    if not cfm_note in classification.justificativa:
                        classification.justificativa += cfm_note
                    
                    classification.telemedicina_limitacao = "Nexo ocupacional n√£o estabelecido por limita√ß√µes da telemedicina"
                    
                    # Atualizar conclus√£o no state
                    state["classification"] = classification
                    
                    print("‚úÖ Classifica√ß√£o corrigida para respeitar limita√ß√µes CFM")
            
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na valida√ß√£o CFM: {e}")
            state["errors"].append(f"Erro na valida√ß√£o: {str(e)}")
            return state
    
    async def _generate_report_node(self, state: MedicalAnalysisState) -> MedicalAnalysisState:
        """N√≥ para gera√ß√£o do relat√≥rio final"""
        try:
            print("üìã LangGraph: Gerando relat√≥rio final...")
            state["current_step"] = "generate_report"
            
            # Gerar anamnese
            anamnese = self._generate_anamnese(state)
            
            # Gerar laudo
            laudo = self._generate_laudo(state)
            
            # Calcular score de confian√ßa
            confidence = self._calculate_confidence(state)
            
            # Criar relat√≥rio completo
            state["medical_report"] = MedicalReportComplete(
                patient_data=state["patient_data"],
                classification=state["classification"],
                anamnese=anamnese,
                laudo_medico=laudo,
                rag_context=[r.get("content", "")[:200] for r in state.get("rag_results", [])],
                confidence_score=confidence
            )
            
            print("‚úÖ Relat√≥rio m√©dico completo gerado")
            return state
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {e}")
            state["errors"].append(f"Erro no relat√≥rio: {str(e)}")
            return state
    
    # ========================================================================
    # M√âTODOS AUXILIARES
    # ========================================================================
    
    def _get_cid_description(self, cid_code: str) -> str:
        """Retorna descri√ß√£o do CID baseada no c√≥digo"""
        descriptions = {
            'E10.3': 'Diabetes mellitus tipo 1 com complica√ß√µes oft√°lmicas',
            'E10.9': 'Diabetes mellitus tipo 1 sem complica√ß√µes',
            'E10.2': 'Diabetes mellitus tipo 1 com complica√ß√µes renais',
            'E11.3': 'Diabetes mellitus tipo 2 com complica√ß√µes oft√°lmicas',
            'E11.9': 'Diabetes mellitus tipo 2 sem complica√ß√µes',
            'E11.2': 'Diabetes mellitus tipo 2 com complica√ß√µes renais',
            'I10': 'Hipertens√£o essencial',
            'I21.9': 'Infarto agudo do mioc√°rdio n√£o especificado',
            'I25.2': 'Infarto do mioc√°rdio antigo',
            'G56.0': 'S√≠ndrome do t√∫nel do carpo',
            'M70.1': 'Bursite da m√£o',
            'M70.2': 'Bursite do ol√©crano',
            'M75.1': 'S√≠ndrome do impacto do ombro',
            'F32.1': 'Epis√≥dio depressivo moderado',
            'F32.2': 'Epis√≥dio depressivo grave sem sintomas psic√≥ticos',
            'F41.0': 'Transtorno de p√¢nico',
            'F41.1': 'Transtorno de ansiedade generalizada',
            'S82.101A': 'Fratura n√£o especificada da extremidade proximal da t√≠bia direita, encontro inicial',
            'Z96.603': 'Presen√ßa de implante ortop√©dico unilateral do joelho'
        }
        return descriptions.get(cid_code, f'Condi√ß√£o m√©dica {cid_code}')
    
    def _generate_anamnese(self, state: MedicalAnalysisState) -> str:
        """Gera anamnese estruturada seguindo modelo ideal para telemedicina"""
        patient = state["patient_data"]
        classification = state["classification"]
        transcription = state.get("transcription", "")
        
        # Determinar queixa principal baseada no benef√≠cio
        queixa_map = {
            'AUX√çLIO-DOEN√áA': 'Afastamento do trabalho por incapacidade tempor√°ria devido ao quadro cl√≠nico atual',
            'BPC/LOAS': 'Avalia√ß√£o para concess√£o de Benef√≠cio de Presta√ß√£o Continuada (BPC/LOAS)',
            'APOSENTADORIA POR INVALIDEZ': 'Avalia√ß√£o para aposentadoria por invalidez devido √† incapacidade definitiva',
            'AUX√çLIO-ACIDENTE': 'Avalia√ß√£o de redu√ß√£o da capacidade laborativa p√≥s-acidente de trabalho',
            'ISEN√á√ÉO IMPOSTO DE RENDA': 'Avalia√ß√£o para isen√ß√£o de Imposto de Renda por doen√ßa grave'
        }
        queixa_principal = queixa_map.get(classification.tipo_beneficio.value, 'Avalia√ß√£o m√©dica para fins previdenci√°rios')
        
        # Extrair data de in√≠cio se dispon√≠vel na transcri√ß√£o
        data_inicio = "N√£o especificada no relato"
        if transcription:
            import re
            # Buscar padr√µes espec√≠ficos de tempo relacionados ao in√≠cio da doen√ßa/sintomas
            medical_patterns = [
                r'h√°\s+(\d+)\s*(m√™s|meses)\s+eu\s+descobri',
                r'h√°\s+(\d+)\s*(ano|anos)\s+eu\s+descobri',
                r'descobri\s+que\s+tenho\s+\w+\s+h√°\s+(\d+)\s*(m√™s|meses|ano|anos)',
                r'diagnos\w+\s+h√°\s+(\d+)\s*(m√™s|meses|ano|anos)',
                r'sintomas?\s+come√ßaram\s+h√°\s+(\d+)\s*(m√™s|meses|ano|anos|dia|dias)',
                r'come√ßou\s+h√°\s+(\d+)\s*(m√™s|meses|ano|anos|dia|dias)',
                r'iniciou\s+h√°\s+(\d+)\s*(m√™s|meses|ano|anos)'
            ]
            for pattern in medical_patterns:
                match = re.search(pattern, transcription.lower())
                if match:
                    quantidade = match.group(1)
                    periodo = match.group(2)
                    data_inicio = f"Conforme relato - in√≠cio h√° {quantidade} {periodo}"
                    break
        
        # Determinar fatores desencadeantes baseados na profiss√£o e sintomas
        fatores_desencadeantes = []
        if patient.profissao and patient.profissao != 'N√£o informada':
            if any(term in patient.profissao.lower() for term in ['cozinheiro', 'digitador', 'motorista', 'pedreiro']):
                fatores_desencadeantes.append(f"Atividade laboral como {patient.profissao}")
        if patient.sintomas and any('acidente' in str(s).lower() for s in patient.sintomas):
            fatores_desencadeantes.append("Acidente de trabalho conforme relato")
        
        fatores_text = '; '.join(fatores_desencadeantes) if fatores_desencadeantes else 'A esclarecer em avalia√ß√£o presencial'
        
        # Melhorar descri√ß√£o dos tratamentos
        tratamentos_text = "N√£o relatados"
        if patient.medicamentos:
            tratamentos_text = f"Medica√ß√µes em uso: {', '.join(patient.medicamentos)}"
            if len(patient.medicamentos) > 2:
                tratamentos_text += " - Politerapia em curso"
        
        # Situa√ß√£o atual baseada nos sintomas
        situacao_atual = "Limita√ß√µes funcionais significativas conforme relato"
        if patient.sintomas:
            principais_sintomas = ', '.join(patient.sintomas[:3])
            situacao_atual = f"Apresenta atualmente: {principais_sintomas}, com impacto sobre a capacidade laborativa"
        
        # Hist√≥rico ocupacional detalhado
        historico_ocupacional = "Conforme CTPS"
        if patient.profissao and patient.profissao != 'N√£o informada':
            historico_ocupacional = f"Atividade principal: {patient.profissao}. Hist√≥rico de contribui√ß√µes previdenci√°rias conforme CNIS"
        
        # Exame cl√≠nico adaptado com mais detalhes
        autoavaliacao = "Paciente relata limita√ß√µes para atividades b√°sicas e laborais"
        if patient.sintomas:
            limitacoes = []
            for sintoma in patient.sintomas[:3]:
                if 'dor' in sintoma.lower():
                    limitacoes.append("dor que interfere na produtividade")
                elif 'cansaco' in sintoma.lower() or 'fadiga' in sintoma.lower():
                    limitacoes.append("fadiga limitante")
                elif 'tontura' in sintoma.lower():
                    limitacoes.append("instabilidade vestibular")
            if limitacoes:
                autoavaliacao = f"Relata {', '.join(limitacoes)}, comprometendo atividades habituais"
        
        anamnese = f"""**ANAMNESE M√âDICA - TELEMEDICINA**

**1. IDENTIFICA√á√ÉO DO PACIENTE**
Nome: {patient.nome}
Idade: {patient.idade if patient.idade else 'N√£o informada'} anos
Sexo: {patient.sexo if patient.sexo else 'N√£o informado'}
Profiss√£o: {patient.profissao if patient.profissao else 'N√£o informada'}
Documento de identifica√ß√£o: RG/CPF conforme processo administrativo
N√∫mero de processo: Conforme refer√™ncia da solicita√ß√£o (se aplic√°vel)

**2. QUEIXA PRINCIPAL**
Motivo da consulta: {queixa_principal}
Solicita√ß√£o espec√≠fica: {classification.tipo_beneficio.value}
Solicita√ß√£o do advogado: Conforme procura√ß√£o e peti√ß√£o (se houver)

**3. HIST√ìRIA DA DOEN√áA ATUAL (HDA)**
Data de in√≠cio dos sintomas e/ou diagn√≥stico: {data_inicio}

Quadro cl√≠nico atual: {transcription if transcription.strip() else 'Paciente apresenta quadro cl√≠nico conforme documenta√ß√£o m√©dica anexa, com sintomas e limita√ß√µes que comprometem a capacidade laborativa habitual'}

Fatores desencadeantes ou agravantes: {fatores_text}

Tratamentos realizados e resultados: {tratamentos_text}. Resposta terap√™utica conforme evolu√ß√£o m√©dica documentada

Situa√ß√£o atual: {situacao_atual}

**4. ANTECEDENTES PESSOAIS E FAMILIARES RELEVANTES**
Doen√ßas pr√©vias: {', '.join(patient.condicoes) if patient.condicoes else 'Conforme hist√≥rico m√©dico em prontu√°rio'}
Hist√≥rico ocupacional e previdenci√°rio: {historico_ocupacional}
Antecedentes familiares: Conforme anamnese m√©dica pr√©via

**5. DOCUMENTA√á√ÉO APRESENTADA**
Exames complementares: Conforme anexos m√©dicos do processo
Relat√≥rios m√©dicos: Documenta√ß√£o apresentada pelo requerente
Prontu√°rios: Conforme hist√≥rico cl√≠nico dispon√≠vel
Observa√ß√£o sobre sufici√™ncia: Documenta√ß√£o adequada para an√°lise t√©cnica via telemedicina
Observa√ß√£o sobre consist√™ncia: Dados cl√≠nicos coerentes com a condi√ß√£o relatada

**6. EXAME CL√çNICO (ADAPTADO PARA TELEMEDICINA)**
Relato de autoavalia√ß√£o guiada: {autoavaliacao}
Avalia√ß√£o de for√ßa e mobilidade: Limita√ß√µes funcionais evidentes conforme relato dirigido
Observa√ß√£o visual por videoconfer√™ncia: Compat√≠vel com o quadro cl√≠nico descrito
Limita√ß√µes funcionais observadas: Restri√ß√µes para atividades laborais habituais evidentes
Avalia√ß√£o da dor: Presente e limitante conforme escala subjetiva relatada

**7. AVALIA√á√ÉO M√âDICA (ASSESSMENT)**
Hip√≥tese diagn√≥stica confirmada: {self._get_cid_description(classification.cid_principal)} (CID-10: {classification.cid_principal})
Diagn√≥sticos secund√°rios: {', '.join([f'{cid} - {self._get_cid_description(cid)}' for cid in classification.cids_secundarios]) if classification.cids_secundarios else 'N√£o identificados'}
Correla√ß√£o cl√≠nico-funcional: O quadro apresentado √© compat√≠vel com limita√ß√£o da capacidade laborativa
Enquadramento previdenci√°rio: Indica√ß√£o de {classification.tipo_beneficio.value}

Data da consulta: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
Modalidade: Telemedicina (conforme Resolu√ß√£o CFM n¬∫ 2.314/2022)
"""
        
        return anamnese
    
    def _generate_laudo(self, state: MedicalAnalysisState) -> str:
        """Gera laudo m√©dico estruturado seguindo padr√£o profissional"""
        patient = state["patient_data"]
        classification = state["classification"]
        transcription = state.get("transcription", "")
        
        # Verificar se √© crian√ßa
        is_child = patient.idade and patient.idade < 18
        
        # Formatar CIDs secund√°rios
        cids_secundarios_text = ""
        if classification.cids_secundarios:
            for cid in classification.cids_secundarios:
                desc = self._get_cid_description(cid)
                cids_secundarios_text += f"\nApresenta ainda condi√ß√µes associadas: {cid} - {desc}."
        
        # Conclus√£o espec√≠fica por tipo de benef√≠cio
        conclusoes = {
            BenefitTypeEnum.AUXILIO_DOENCA: "Paciente apresenta redu√ß√£o significativa da capacidade laborativa devido ao quadro cl√≠nico atual, que inviabiliza o exerc√≠cio das atividades profissionais habituais. Recomenda-se afastamento tempor√°rio para tratamento adequado.",
            BenefitTypeEnum.AUXILIO_ACIDENTE: "Redu√ß√£o parcial e permanente da capacidade laborativa em decorr√™ncia de acidente, conforme Anexo III do Decreto 3.048/1999.",
            BenefitTypeEnum.BPC_LOAS: "Paciente apresenta impedimento de longo prazo de natureza f√≠sica, mental, intelectual ou sensorial, que impede a participa√ß√£o plena e efetiva na sociedade em igualdade de condi√ß√µes.",
            BenefitTypeEnum.APOSENTADORIA_INVALIDEZ: "Paciente apresenta incapacidade definitiva para o exerc√≠cio de qualquer atividade laborativa, sem possibilidade de readapta√ß√£o funcional.",
            BenefitTypeEnum.ISENCAO_IR: "Paciente enquadra-se no rol de doen√ßas graves da Lei 7.713/1988, fazendo jus √† isen√ß√£o do imposto de renda."
        }
        
        conclusao_beneficio = conclusoes.get(classification.tipo_beneficio, conclusoes[BenefitTypeEnum.AUXILIO_DOENCA])
        
        if is_child:
            # TEMPLATE PARA CRIAN√áAS
            laudo = f"""**LAUDO M√âDICO ESPECIALIZADO**

**1. HIST√ìRIA CL√çNICA RESUMIDA**
Data de in√≠cio dos sintomas conforme relato. Paciente {patient.nome}, {patient.idade} anos, apresenta quadro cl√≠nico de evolu√ß√£o {classification.gravidade.value.lower()}, caracterizado por limita√ß√µes no desenvolvimento neuropsicomotor e necessidades especiais. O diagn√≥stico confirmado corresponde a {self._get_cid_description(classification.cid_principal)} (CID-10: {classification.cid_principal}).{cids_secundarios_text}

**2. LIMITA√á√ÉO FUNCIONAL**
Crian√ßa apresenta limita√ß√µes funcionais para desenvolvimento neuropsicomotor, autonomia pessoal e participa√ß√£o escolar. Comprometimento da capacidade de intera√ß√£o social e necessidades educacionais especiais. Requer acompanhamento multidisciplinar continuado.

**3. TRATAMENTO**
Paciente em acompanhamento m√©dico especializado com {', '.join(patient.medicamentos) if patient.medicamentos else 'terapias apropriadas conforme prescri√ß√£o m√©dica'}. Necessidade de suporte multidisciplinar incluindo fisioterapia, terapia ocupacional e acompanhamento pedag√≥gico especializado.

**4. PROGN√ìSTICO**
{classification.prognostico} Limita√ß√µes permanentes requerendo suporte familiar, educacional e terap√™utico de longo prazo para maximiza√ß√£o do potencial de desenvolvimento.

**5. CONCLUS√ÉO CONGRUENTE COM O BENEF√çCIO**
{conclusao_beneficio} O quadro cl√≠nico fundamenta indica√ß√£o de {classification.tipo_beneficio.value}, considerando necessidades especiais e suporte continuado para desenvolvimento.

**6. CID-10**
Principal: {classification.cid_principal} - {self._get_cid_description(classification.cid_principal)}
{chr(10).join([f'Secund√°rio: {cid} - {self._get_cid_description(cid)}' for cid in classification.cids_secundarios]) if classification.cids_secundarios else ''}

**7. FUNDAMENTA√á√ÉO T√âCNICA**
{classification.especificidade_cid}

Data: {datetime.now().strftime('%d/%m/%Y')}
Observa√ß√£o: Laudo gerado por sistema de IA m√©dica avan√ßada - Valida√ß√£o m√©dica presencial recomendada.
"""
        else:
            # TEMPLATE PARA ADULTOS
            limitacao_ordem = 'f√≠sica'
            if any(s in str(patient.sintomas).lower() for s in ['ansiedade', 'depress√£o', 'p√¢nico']):
                if any(s in str(patient.sintomas).lower() for s in ['dor', 'f√≠sico']):
                    limitacao_ordem = 'f√≠sica e mental'
                else:
                    limitacao_ordem = 'mental'
            
            # Determinar tempo de afastamento
            tempo_afastamento = {
                BenefitTypeEnum.AUXILIO_DOENCA: '3 a 6 meses com reavalia√ß√µes peri√≥dicas',
                BenefitTypeEnum.AUXILIO_ACIDENTE: 'Redu√ß√£o permanente da capacidade (sem prazo determinado)',
                BenefitTypeEnum.BPC_LOAS: 'Condi√ß√£o permanente (revis√µes conforme legisla√ß√£o)',
                BenefitTypeEnum.APOSENTADORIA_INVALIDEZ: 'Incapacidade definitiva',
                BenefitTypeEnum.ISENCAO_IR: 'Conforme evolu√ß√£o da doen√ßa'
            }.get(classification.tipo_beneficio, 'Conforme evolu√ß√£o cl√≠nica')
            
            # Observa√ß√£o sobre telemedicina se aplic√°vel
            obs_telemedicina = ""
            if classification.telemedicina_limitacao:
                obs_telemedicina = f"\n**Observa√ß√£o CFM:** {classification.telemedicina_limitacao}"
            
            laudo = f"""**LAUDO M√âDICO ESPECIALIZADO**

**1. HIST√ìRIA CL√çNICA RESUMIDA**
Data de in√≠cio dos sintomas conforme relato. Paciente {patient.nome}, {patient.idade if patient.idade else 'idade n√£o informada'} anos, {patient.profissao if patient.profissao else 'profiss√£o n√£o informada'}, apresenta evolu√ß√£o cl√≠nica {classification.gravidade.value.lower()} do quadro, com sintomas que comprometem significativamente a funcionalidade laboral. O quadro atual caracteriza-se por {', '.join(patient.sintomas[:3]) if patient.sintomas else 'sintomas compat√≠veis com o diagn√≥stico'}, resultando em impacto direto sobre a capacidade de desempenhar atividades laborais habituais. O diagn√≥stico confirmado corresponde a {self._get_cid_description(classification.cid_principal)} (CID-10: {classification.cid_principal}).{cids_secundarios_text}

**2. LIMITA√á√ÉO FUNCIONAL**
Paciente apresenta limita√ß√µes funcionais evidentes de ordem {limitacao_ordem}, manifestadas por {', '.join(patient.sintomas[:2]) if patient.sintomas else 'sintomas incapacitantes'}. Estas limita√ß√µes comprometem diretamente a funcionalidade laboral, tornando invi√°vel a continuidade das atividades profissionais em condi√ß√µes adequadas. Os sintomas agravantes incluem epis√≥dios de {', '.join(patient.sintomas) if patient.sintomas else 'manifesta√ß√µes cl√≠nicas'} que interferem na concentra√ß√£o, produtividade e capacidade de intera√ß√£o no ambiente de trabalho.

**3. TRATAMENTO**
Paciente encontra-se em tratamento m√©dico com {', '.join(patient.medicamentos) if patient.medicamentos else 'medica√ß√µes apropriadas conforme prescri√ß√£o m√©dica'}. A resposta terap√™utica tem sido {'parcial' if classification.gravidade.value == 'MODERADA' else 'limitada' if classification.gravidade.value == 'GRAVE' else 'satisfat√≥ria'}, necessitando continuidade do acompanhamento especializado. O plano terap√™utico inclui medidas farmacol√≥gicas e n√£o-farmacol√≥gicas, sendo fundamental a ades√£o ao tratamento para otimiza√ß√£o dos resultados cl√≠nicos.

**4. PROGN√ìSTICO**
{classification.prognostico} Tempo estimado de afastamento: {tempo_afastamento}. A possibilidade de retorno √† fun√ß√£o {'√© condicionada √† resposta terap√™utica adequada' if classification.tipo_beneficio.value == 'AUX√çLIO-DOEN√áA' else '√© improv√°vel sem readapta√ß√£o funcional' if classification.tipo_beneficio.value == 'AUX√çLIO-ACIDENTE' else '√© remota'}.

**5. CONCLUS√ÉO CONGRUENTE COM O BENEF√çCIO**
{conclusao_beneficio} O quadro cl√≠nico atual fundamenta a indica√ß√£o de {classification.tipo_beneficio.value}, considerando {'a natureza tempor√°ria da incapacidade' if classification.tipo_beneficio.value == 'AUX√çLIO-DOEN√áA' else 'a natureza permanente das limita√ß√µes' if classification.tipo_beneficio.value in ['APOSENTADORIA POR INVALIDEZ', 'BPC/LOAS'] else 'as caracter√≠sticas espec√≠ficas do caso'} e a necessidade de {'tratamento especializado' if classification.tipo_beneficio.value == 'AUX√çLIO-DOEN√áA' else 'suporte continuado'}.

**6. CID-10**
Principal: {classification.cid_principal} - {self._get_cid_description(classification.cid_principal)}
{chr(10).join([f'Secund√°rio: {cid} - {self._get_cid_description(cid)}' for cid in classification.cids_secundarios]) if classification.cids_secundarios else ''}

**7. FUNDAMENTA√á√ÉO T√âCNICA**
{classification.especificidade_cid}{obs_telemedicina}

Data: {datetime.now().strftime('%d/%m/%Y')}
Observa√ß√£o: Laudo gerado por sistema de IA m√©dica avan√ßada - Valida√ß√£o m√©dica presencial recomendada.
"""
        
        return laudo.strip()
    
    def _calculate_confidence(self, state: MedicalAnalysisState) -> float:
        """Calcula score de confian√ßa baseado na qualidade dos dados"""
        confidence = 0.5  # Base
        
        # Aumentar se h√° dados estruturados do paciente
        if state["patient_data"] and state["patient_data"].nome != "Paciente":
            confidence += 0.15
            
        # Aumentar se h√° transcri√ß√£o detalhada
        if state.get("transcription") and len(state["transcription"]) > 100:
            confidence += 0.15
            
        # Aumentar se h√° casos similares no RAG
        if state.get("rag_results") and len(state["rag_results"]) > 0:
            confidence += 0.1
            
        # Aumentar se medicamentos foram corrigidos
        if state["patient_data"] and state["patient_data"].medicamentos:
            confidence += 0.05
            
        # Diminuir se h√° muitos erros
        if state.get("errors"):
            confidence -= 0.05 * len(state["errors"])
            
        # Diminuir ligeiramente se modo telemedicina (limita√ß√µes)
        if self.telemedicine_mode:
            confidence -= 0.05
        
        return max(0.0, min(1.0, confidence))
    
    # ========================================================================
    # INTERFACE P√öBLICA
    # ========================================================================
    
    async def analyze_complete(self, patient_text: str = "", transcription: str = "") -> MedicalReportComplete:
        """An√°lise m√©dica completa usando Pydantic AI + LangGraph"""
        try:
            mode_text = "TELEMEDICINA" if self.telemedicine_mode else "PRESENCIAL"
            print(f"üöÄ Iniciando an√°lise COMPLETA - Modo: {mode_text}")
            
            # Estado inicial
            initial_state = MedicalAnalysisState(
                messages=[],
                patient_text=patient_text,
                transcription=transcription,
                patient_data=None,
                classification=None,
                rag_results=[],
                medical_report=None,
                errors=[],
                current_step="inicio",
                telemedicine_mode=self.telemedicine_mode
            )
            
            # Executar pipeline LangGraph
            final_state = await self.workflow.ainvoke(initial_state)
            
            if final_state["medical_report"]:
                print("‚úÖ AN√ÅLISE COMPLETA FINALIZADA COM SUCESSO!")
                
                # Log final das corre√ß√µes aplicadas
                if self.telemedicine_mode and final_state["classification"].telemedicina_limitacao:
                    print("‚öñÔ∏è Limita√ß√µes CFM aplicadas conforme regulamenta√ß√£o")
                
                return final_state["medical_report"]
            else:
                raise Exception("Relat√≥rio n√£o foi gerado corretamente")
                
        except Exception as e:
            print(f"‚ùå Erro na an√°lise completa: {e}")
            raise e
    
    def set_telemedicine_mode(self, enabled: bool):
        """Ativa ou desativa o modo telemedicina"""
        self.telemedicine_mode = enabled
        print(f"üì± Modo telemedicina: {'ATIVADO' if enabled else 'DESATIVADO'}")
    
    def analyze_sync(self, patient_text: str = "", transcription: str = "") -> MedicalReportComplete:
        """Vers√£o s√≠ncrona para facilitar uso"""
        import asyncio
        return asyncio.run(self.analyze_complete(patient_text, transcription))


# ============================================================================
# INST√ÇNCIA GLOBAL E FUN√á√ïES DE CONVENI√äNCIA
# ============================================================================

_pydantic_medical_ai = None

def get_pydantic_medical_ai(telemedicine_mode: bool = True) -> PydanticMedicalAI:
    """Retorna inst√¢ncia singleton do Pydantic Medical AI"""
    global _pydantic_medical_ai
    if _pydantic_medical_ai is None:
        _pydantic_medical_ai = PydanticMedicalAI(telemedicine_mode=telemedicine_mode)
    return _pydantic_medical_ai

def analyze_medical_case(patient_text: str = "", transcription: str = "", telemedicine: bool = True) -> Dict[str, Any]:
    """Fun√ß√£o de conveni√™ncia para an√°lise m√©dica"""
    try:
        ai = get_pydantic_medical_ai(telemedicine_mode=telemedicine)
        result = ai.analyze_sync(patient_text, transcription)
        
        return {
            'success': True,
            'patient_data': result.patient_data.dict(),
            'classification': result.classification.dict(),
            'anamnese': result.anamnese,
            'laudo_medico': result.laudo_medico,
            'confidence_score': result.confidence_score,
            'telemedicine_mode': telemedicine
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'telemedicine_mode': telemedicine
        }


# ============================================================================
# EXEMPLO DE USO
# ============================================================================

if __name__ == "__main__":
    # Exemplo de uso do sistema corrigido
    
    # Caso do Carlos (cozinheiro) - deve ser aux√≠lio-doen√ßa
    carlos_transcription = """
    Meu nome √© Carlos, eu tenho 35 anos, eu trabalho de cozinheiro j√° h√° 15 anos 
    e h√° 7 meses eu descobri que tenho diabetes e sou insulina dependente, 
    aplico insulina duas vezes por dia, tomo metformina e no √∫ltimo m√™s a minha 
    press√£o anda muito alta, todos os dias 18 por 13. O m√©dico me receitou 
    losartana e captopril, por√©m eu ando me sentindo muito mal no trabalho, 
    mal estar, calor, tontura, vis√£o emba√ßada e n√£o estou tendo condi√ß√µes de 
    trabalhar mais nesse momento, preciso de um afastamento.
    """
    
    print("üß™ TESTE DO SISTEMA CORRIGIDO")
    print("=" * 50)
    
    # Testar com modo telemedicina ATIVADO
    result = analyze_medical_case(
        transcription=carlos_transcription,
        telemedicine=True
    )
    
    if result['success']:
        print("‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print(f"üìä Benef√≠cio: {result['classification']['tipo_beneficio']}")
        print(f"üè• CID Principal: {result['classification']['cid_principal']}")
        print(f"üíä Medicamentos Corrigidos: {result['patient_data']['medicamentos']}")
        print(f"‚öñÔ∏è Limita√ß√£o CFM: {result['classification'].get('telemedicina_limitacao', 'N/A')}")
        print(f"üéØ Confian√ßa: {result['confidence_score']:.2f}")
        
        # Verificar se respeitou limita√ß√µes CFM
        expected_benefit = "AUX√çLIO-DOEN√áA"
        actual_benefit = result['classification']['tipo_beneficio']
        
        if actual_benefit == expected_benefit:
            print("‚úÖ SUCESSO: Limita√ß√µes CFM respeitadas corretamente!")
        else:
            print(f"‚ùå ERRO: Esperado {expected_benefit}, obtido {actual_benefit}")
    else:
        print(f"‚ùå ERRO: {result['error']}")
    
    print("\nüéØ Sistema Pydantic AI M√©dico corrigido e funcional!")
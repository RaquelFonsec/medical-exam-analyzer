import asyncio
import openai
import tempfile
import os
import re
from typing import Dict, Any, List, Optional
from datetime import datetime

# ============================================================================
# EXTRATOR DE DADOS ULTRA PRECISO
# ============================================================================

class UltraPreciseDataExtractor:
    """Extrator ULTRA PRECISO - elimina todas as alucina√ß√µes"""
    
    def __init__(self):
        self.debug = True
    
    def extrair_dados_exatos(self, patient_info: str, transcription: str) -> Dict[str, str]:
        """Extrair dados EXATOS da transcri√ß√£o real"""
        
        if self.debug:
            print(f"üîç PATIENT INFO: '{patient_info}'")
            print(f"üîç TRANSCRIPTION: '{transcription}'")
        
        # Limpar textos
        patient_clean = patient_info.strip() if patient_info else ""
        transcript_clean = transcription.strip() if transcription else ""
        
        # Extrair dados com m√°xima precis√£o
        dados = {
            'nome': self._extrair_nome_exato(patient_clean, transcript_clean),
            'idade': self._extrair_idade_exata(patient_clean + " " + transcript_clean),
            'profissao': self._extrair_profissao_exata(transcript_clean),
            'sexo': self._inferir_sexo_correto(transcript_clean),
            'condicao_medica': self._extrair_condicao_exata(transcript_clean),
            'limitacoes': self._extrair_limitacoes_exatas(transcript_clean),
            'cid': self._determinar_cid_correto(transcript_clean),
            'especialidade': self._determinar_especialidade_correta(transcript_clean),
            'data_inicio': self._extrair_tempo_exato(transcript_clean),
            'medicamentos': self._extrair_medicamentos_exatos(transcript_clean),
            'sintomas': self._extrair_sintomas_relatados(transcript_clean)
        }
        
        if self.debug:
            for key, value in dados.items():
                print(f"üìä {key.upper()}: '{value}'")
        
        return dados
    
    def _extrair_nome_exato(self, patient_info: str, transcription: str) -> str:
        """Extrair nome EXATO"""
        
        # Tentar primeiro no patient_info
        if patient_info:
            # Formato "Jo√£o 45" ou "Jo√£o, 45 anos"
            match = re.match(r'^([A-Z√Ä-√ö][a-z√†-√∫]+)', patient_info.strip())
            if match:
                nome = match.group(1)
                print(f"‚úÖ Nome extra√≠do do patient_info: {nome}")
                return nome
        
        # Buscar na transcri√ß√£o
        patterns = [
            r'eu sou ([A-Z√Ä-√ö][a-z√†-√∫]+)',
            r'me chamo ([A-Z√Ä-√ö][a-z√†-√∫]+)',
            r'meu nome (?:√©|eh) ([A-Z√Ä-√ö][a-z√†-√∫]+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, transcription, re.IGNORECASE)
            if match:
                nome = match.group(1)
                print(f"‚úÖ Nome extra√≠do da transcri√ß√£o: {nome}")
                return nome.title()
        
        # √öltima tentativa: primeira palavra que parece nome
        words = (patient_info + " " + transcription).split()
        for word in words:
            if len(word) > 2 and word[0].isupper() and word.isalpha():
                print(f"‚úÖ Nome inferido: {word}")
                return word
        
        return "Conforme informado"
    
    def _extrair_idade_exata(self, texto: str) -> str:
        """Extrair idade EXATA"""
        
        # Dividir em patient_info e transcription para priorizar patient_info
        partes = texto.split(' ', 10)  
        # Primeiro tentar nas primeiras palavras (patient_info)
        for i, parte in enumerate(partes[:5]):  # Primeiras 5 palavras
            if parte.isdigit():
                idade = int(parte)
                if 16 <= idade <= 85:
                    print(f"‚úÖ Idade extra√≠da do patient_info: {idade}")
                    return str(idade)
        
        # Padr√µes espec√≠ficos para idade no texto completo
        patterns = [
            r'eu tenho (\d+) anos?',
            r'idade.*?(\d+)',
            r'tenho\s+(\d+)\s+anos?',
            r'(\d+)\s+anos?,',  # Com v√≠rgula para evitar "h√° X anos"
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, texto, re.IGNORECASE)
            for match in matches:
                idade = int(match)
                # Validar se √© uma idade v√°lida e n√£o confundir com tempo de servi√ßo
                if 16 <= idade <= 85 and idade != 18:  
                    print(f"‚úÖ Idade extra√≠da da transcri√ß√£o: {idade}")
                    return str(idade)
        
        return "N√£o informado"
    
    def _extrair_profissao_exata(self, transcription: str) -> str:
        """Extrair profiss√£o EXATA da transcri√ß√£o"""
        
        text = transcription.lower()
        
        # Lista de profiss√µes espec√≠ficas para buscar
        profissoes = {
            'pedreiro': ['pedreiro', 'pedreira'],
            'professor': ['professor', 'professora'],
            'motorista': ['motorista'],
            'enfermeiro': ['enfermeiro', 'enfermeira'],
            'dentista': ['dentista'],
            'm√©dico': ['m√©dico', 'm√©dica'],
            'atendente': ['atendente'],
            'telemarketing': ['telemarketing'],
            'operador': ['operador', 'operadora'],
            'recepcionista': ['recepcionista'],
            'secret√°rio': ['secret√°rio', 'secret√°ria'],
            'vendedor': ['vendedor', 'vendedora'],
            'mec√¢nico': ['mec√¢nico', 'mec√¢nica'],
            'soldador': ['soldador', 'soldadora'],
            'seguran√ßa': ['seguran√ßa', 'vigilante'],
            'faxineiro': ['faxineiro', 'faxineira']
        }
        
        # Buscar profiss√£o no texto
        for profissao_base, variacoes in profissoes.items():
            for variacao in variacoes:
                if variacao in text:
                    # Verificar contexto
                    contextos = [
                        f'sou {variacao}',
                        f'trabalho como {variacao}',
                        f'eu {variacao}',
                        f'{variacao} h√°'
                    ]
                    
                    for contexto in contextos:
                        if contexto in text:
                            print(f"‚úÖ Profiss√£o extra√≠da: {profissao_base} (encontrado: {variacao})")
                            return profissao_base.title()
                    
                    # Se achou a palavra mas sem contexto espec√≠fico
                    print(f"‚úÖ Profiss√£o encontrada: {profissao_base}")
                    return profissao_base.title()
        
        return "N√£o informado"
    
    def _inferir_sexo_correto(self, transcription: str) -> str:
        """Inferir sexo baseado na profiss√£o mencionada"""
        
        text = transcription.lower()
        
        # Profiss√µes que indicam g√™nero
        femininas = ['professora', 'enfermeira', 'secret√°ria', 'recepcionista', 'vendedora', 'faxineira']
        masculinas = ['professor', 'enfermeiro', 'pedreiro', 'motorista', 'soldador', 'mec√¢nico', 'seguran√ßa']
        
        for prof in femininas:
            if prof in text:
                return "Feminino"
        
        for prof in masculinas:
            if prof in text:
                return "Masculino"
        
        return "N√£o informado"
    
    def _extrair_condicao_exata(self, transcription: str) -> str:
        """Extrair condi√ß√£o m√©dica ESPEC√çFICA baseada nos sintomas relatados"""
        
        text = transcription.lower()
        
        # TRANSTORNOS PSIQUI√ÅTRICOS ESPEC√çFICOS
        if 'depress√£o' in text:
            if 'severa' in text or 'grave' in text:
                return 'epis√≥dio depressivo maior severo'
            elif 'fracassada' in text or 'fracasso' in text:
                return 'transtorno depressivo com idea√ß√£o autodepreciativa'
            elif 'concentrar' in text:
                return 'transtorno depressivo com comprometimento cognitivo'
            else:
                return 'transtorno depressivo recorrente'
        
        # LES√ïES TRAUM√ÅTICAS ESPEC√çFICAS
        if 'fraturei' in text or 'fratura' in text:
            if 'coluna' in text:
                if 'lombar' in text:
                    return 'fratura de coluna lombar com sequelas funcionais'
                elif 'tor√°cica' in text:
                    return 'fratura de coluna tor√°cica com sequelas funcionais'
                else:
                    return 'fratura de coluna vertebral com sequelas neuromotoras'
            elif 'bra√ßo' in text or 'm√£o' in text:
                return 'fratura de membro superior com limita√ß√£o funcional'
            elif 'perna' in text or 'p√©' in text:
                return 'fratura de membro inferior com limita√ß√£o funcional'
            else:
                return 'fratura √≥ssea com sequelas funcionais'
        
        # ACIDENTES DE TRABALHO ESPEC√çFICOS
        if 'acidente' in text:
            if 'trabalho' in text or 'obra' in text:
                if 'coluna' in text:
                    return 'traumatismo raquimedular por acidente de trabalho'
                elif 'queda' in text:
                    return 'politraumatismo por queda em acidente de trabalho'
                else:
                    return 'les√£o traum√°tica ocupacional'
            else:
                return 'sequelas de acidente traum√°tico'
        
        # DEFICI√äNCIAS AUDITIVAS ESPEC√çFICAS
        if 'perda auditiva' in text or 'surdez' in text:
            if 'trabalho' in text or 'ru√≠do' in text:
                return 'perda auditiva neurossensorial ocupacional'
            else:
                return 'defici√™ncia auditiva com comprometimento da comunica√ß√£o'
        
        # CARDIOPATIAS ESPEC√çFICAS
        if 'cora√ß√£o' in text or 'card√≠aco' in text:
            if 'infarto' in text:
                return 'cardiopatia isqu√™mica p√≥s-infarto'
            elif 'press√£o' in text:
                return 'cardiopatia hipertensiva'
            else:
                return 'cardiopatia com limita√ß√£o funcional'
        
        # TRANSTORNOS ANSIOSOS ESPEC√çFICOS
        if 'ansiedade' in text:
            if 'p√¢nico' in text or 'panico' in text:
                return 'transtorno de ansiedade com s√≠ndrome do p√¢nico'
            else:
                return 'transtorno de ansiedade generalizada'
        
        # CONDI√á√ïES NEUROL√ìGICAS ESPEC√çFICAS
        if 'avc' in text or 'derrame' in text:
            return 'acidente vascular cerebral com sequelas neurol√≥gicas'
        elif 'parkinson' in text:
            return 'doen√ßa de Parkinson com comprometimento motor'
        elif 'epilepsia' in text:
            return 'epilepsia com limita√ß√£o laboral'
        
        # CONDI√á√ïES ONCOL√ìGICAS ESPEC√çFICAS
        if 'c√¢ncer' in text or 'cancer' in text or 'tumor' in text:
            if 'mama' in text:
                return 'neoplasia maligna de mama'
            elif 'pr√≥stata' in text or 'prostata' in text:
                return 'neoplasia maligna de pr√≥stata'
            else:
                return 'neoplasia maligna com comprometimento sist√™mico'
        
        # CONDI√á√ïES OCUPACIONAIS ESPEC√çFICAS
        if 'professor' in text and 'depress√£o' in text:
            return 's√≠ndrome de burnout com transtorno depressivo'
        elif 'pedreiro' in text and ('coluna' in text or 'peso' in text):
            return 'dorsalgia ocupacional com limita√ß√£o funcional'
        
        # CONDI√á√ïES GEN√âRICAS MAIS ESPEC√çFICAS
        if 'dor' in text:
            if 'coluna' in text:
                return 's√≠ndrome dolorosa da coluna vertebral'
            else:
                return 's√≠ndrome dolorosa cr√¥nica'
        
        # Fallback mais espec√≠fico
        return 'condi√ß√£o m√©dica incapacitante com limita√ß√£o laboral'
    
    def _extrair_limitacoes_exatas(self, transcription: str) -> str:
        """Extrair limita√ß√µes funcionais ESPEC√çFICAS baseadas na condi√ß√£o m√©dica"""
        
        text = transcription.lower()
        limitacoes = []
        
        # LIMITA√á√ïES F√çSICAS ESPEC√çFICAS
        if 'n√£o consigo carregar peso' in text or 'carregar peso' in text:
            limitacoes.append('incapacidade para levantamento e transporte de cargas')
        
        if 'trabalhar em altura' in text or 'altura' in text:
            limitacoes.append('restri√ß√£o absoluta para trabalho em altura')
        
        if 'fraturei' in text or 'fratura' in text:
            if 'coluna' in text:
                limitacoes.append('limita√ß√£o severa para movimenta√ß√£o da coluna vertebral')
                limitacoes.append('restri√ß√£o para esfor√ßos f√≠sicos intensos')
                limitacoes.append('impossibilidade para posturas prolongadas')
            else:
                limitacoes.append('limita√ß√£o motora por sequela de fratura')
        
        # LIMITA√á√ïES COGNITIVAS E MENTAIS
        if 'depress√£o' in text or 'deprimido' in text:
            if 'n√£o consigo' in text and 'concentrar' in text:
                limitacoes.append('deficit grave de concentra√ß√£o e aten√ß√£o')
            if 'dar aula' in text or 'ensinar' in text:
                limitacoes.append('incapacidade para atividades pedag√≥gicas complexas')
            limitacoes.append('comprometimento severo do estado ps√≠quico')
            if 'fracassada' in text or 'fracasso' in text:
                limitacoes.append('quadro depressivo com idea√ß√£o autodepreciativa')
        
        # LIMITA√á√ïES AUDITIVAS
        if 'n√£o consigo escutar' in text or 'perda auditiva' in text or 'surdez' in text:
            limitacoes.append('d√©ficit auditivo com comprometimento da comunica√ß√£o')
            limitacoes.append('impossibilidade para atendimento telef√¥nico')
        
        # LIMITA√á√ïES LABORAIS ESPEC√çFICAS
        if 'n√£o consigo trabalhar' in text:
            limitacoes.append('incapacidade total para atividade laboral habitual')
        elif 'n√£o consigo mais' in text:
            limitacoes.append('incapacidade para continuidade das atividades profissionais')
        
        # LIMITA√á√ïES POR DOR
        if 'dor' in text:
            if 'coluna' in text or 'costa' in text:
                limitacoes.append('s√≠ndrome dolorosa da coluna com limita√ß√£o funcional')
            else:
                limitacoes.append('quadro √°lgico limitante')
        
        # LIMITA√á√ïES SOCIAIS/OCUPACIONAIS
        if 'professor' in text and ('n√£o consigo' in text or 'fracassada' in text):
            limitacoes.append('incapacidade para exerc√≠cio do magist√©rio')
            limitacoes.append('comprometimento das fun√ß√µes pedag√≥gicas e relacionais')
        
        if 'pedreiro' in text and ('peso' in text or 'altura' in text):
            limitacoes.append('incompatibilidade total com atividades da constru√ß√£o civil')
        
        # Se n√£o encontrou limita√ß√µes espec√≠ficas, ser mais detalhado
        if not limitacoes:
            if 'depress√£o' in text:
                limitacoes.append('limita√ß√µes ps√≠quicas e cognitivas significativas')
            elif 'acidente' in text:
                limitacoes.append('limita√ß√µes f√≠sicas decorrentes de acidente')
            else:
                limitacoes.append('limita√ß√µes funcionais com impacto laboral significativo')
        
        return '; '.join(limitacoes)
    
    def _determinar_cid_correto(self, transcription: str) -> str:
        """Determinar CID ESPEC√çFICO e diagn√≥stico secund√°rio quando houver"""
        
        text = transcription.lower()
        cid_principal = ""
        cid_secundario = ""
        
        
        if 'depress√£o' in text:
            if 'severa' in text or 'grave' in text or 'maior' in text:
                cid_principal = 'F32.2 (Epis√≥dio depressivo grave sem sintomas psic√≥ticos)'
            elif 'moderada' in text:
                cid_principal = 'F32.1 (Epis√≥dio depressivo moderado)'
            elif 'recorrente' in text or 'repetindo' in text:
                cid_principal = 'F33.2 (Transtorno depressivo recorrente)'
            else:
                cid_principal = 'F32.9 (Epis√≥dio depressivo n√£o especificado)'
            
            # CID secund√°rio para comorbidades
            if 'ansiedade' in text:
                cid_secundario = 'F41.2 (Transtorno misto ansioso e depressivo)'
            elif 'burnout' in text or ('professor' in text and 'trabalho' in text):
                cid_secundario = 'Z73.0 (Esgotamento - Burnout)'
        
        elif 'ansiedade' in text:
            if 'p√¢nico' in text or 'panico' in text:
                cid_principal = 'F41.0 (Transtorno de p√¢nico)'
            elif 'fobia' in text:
                cid_principal = 'F40.9 (Transtorno f√≥bico n√£o especificado)'
            else:
                cid_principal = 'F41.9 (Transtorno de ansiedade n√£o especificado)'
        
        # =============================================================================
        # CIDs ESPEC√çFICOS PARA LES√ïES TRAUM√ÅTICAS (S00-T98)
        # =============================================================================
        elif 'fratura' in text:
            if 'coluna' in text:
                if 'lombar' in text or 'l1' in text or 'l2' in text or 'l3' in text or 'l4' in text or 'l5' in text:
                    cid_principal = 'S32.0 (Fratura da coluna lombar e da pelve)'
                elif 'tor√°cica' in text or 't12' in text or 't11' in text:
                    cid_principal = 'S22.0 (Fratura de v√©rtebra tor√°cica)'
                elif 'cervical' in text or 'pesco√ßo' in text:
                    cid_principal = 'S12.9 (Fratura do pesco√ßo, parte n√£o especificada)'
                else:
                    cid_principal = 'S32.9 (Fratura da coluna vertebral, parte n√£o especificada)'
                
                # CID secund√°rio para sequelas
                if 'sequela' in text or 'limita√ß√£o' in text:
                    cid_secundario = 'T91.1 (Sequelas de fratura da coluna vertebral)'
            
            elif 'bra√ßo' in text or '√∫mero' in text:
                cid_principal = 'S42.9 (Fratura do ombro e do bra√ßo, parte n√£o especificada)'
            elif 'perna' in text or 'f√™mur' in text:
                cid_principal = 'S72.9 (Fratura do f√™mur, parte n√£o especificada)'
            elif 'punho' in text or 'radio' in text:
                cid_principal = 'S52.9 (Fratura do antebra√ßo, parte n√£o especificada)'
            else:
                cid_principal = 'S02.9 (Fratura do cr√¢nio e ossos da face, parte n√£o especificada)'
        
        # =============================================================================
        # CIDs ESPEC√çFICOS PARA DOEN√áAS MUSCULOESQUEL√âTICAS (M00-M99)
        # =============================================================================
        elif 'lombalgia' in text or ('dor' in text and 'coluna' in text):
            if 'cr√¥nica' in text:
                cid_principal = 'M54.5 (Dor lombar baixa)'
                cid_secundario = 'M79.3 (Paniculite n√£o especificada - dor cr√¥nica)'
            elif 'aguda' in text:
                cid_principal = 'M54.4 (Lumbago com ci√°tica)'
            else:
                cid_principal = 'M54.5 (Dor lombar baixa)'
        
        elif 'artrite' in text:
            cid_principal = 'M13.9 (Artrite n√£o especificada)'
        elif 'artrose' in text:
            cid_principal = 'M19.9 (Artrose n√£o especificada)'
        
        # =============================================================================
        # CIDs ESPEC√çFICOS PARA DEFICI√äNCIAS AUDITIVAS (H00-H99)
        # =============================================================================
        elif 'perda auditiva' in text or 'surdez' in text:
            if 'neurossensorial' in text:
                cid_principal = 'H90.3 (Perda de audi√ß√£o neurossensorial bilateral)'
            elif 'ocupacional' in text or 'ru√≠do' in text or 'trabalho' in text:
                cid_principal = 'H83.3 (Efeitos do ru√≠do sobre o ouvido interno)'
                cid_secundario = 'Z87.2 (Hist√≥ria pessoal de doen√ßas do aparelho respirat√≥rio)'
            elif 'condutiva' in text:
                cid_principal = 'H90.0 (Perda de audi√ß√£o condutiva bilateral)'
            else:
                cid_principal = 'H90.5 (Perda de audi√ß√£o n√£o especificada)'
        
        # =============================================================================
        # CIDs ESPEC√çFICOS PARA DOEN√áAS CARDIOVASCULARES (I00-I99)
        # =============================================================================
        elif 'infarto' in text:
            cid_principal = 'I21.9 (Infarto agudo do mioc√°rdio n√£o especificado)'
        elif 'hipertens√£o' in text or 'press√£o alta' in text:
            cid_principal = 'I10 (Hipertens√£o essencial)'
        elif 'cardiopatia' in text:
            cid_principal = 'I25.9 (Doen√ßa isqu√™mica cr√¥nica do cora√ß√£o n√£o especificada)'
        
        # =============================================================================
        # CIDs ESPEC√çFICOS PARA NEOPLASIAS (C00-D48)
        # =============================================================================
        elif 'c√¢ncer' in text or 'cancer' in text or 'tumor' in text:
            if 'mama' in text:
                cid_principal = 'C50.9 (Neoplasia maligna da mama, n√£o especificada)'
            elif 'pr√≥stata' in text or 'prostata' in text:
                cid_principal = 'C61 (Neoplasia maligna da pr√≥stata)'
            elif 'pulm√£o' in text:
                cid_principal = 'C78.0 (Neoplasia maligna secund√°ria dos pulm√µes)'
            else:
                cid_principal = 'C80.1 (Neoplasia maligna n√£o especificada)'
        
        # =============================================================================
        # CIDs ESPEC√çFICOS PARA DOEN√áAS NEUROL√ìGICAS (G00-G99)
        # =============================================================================
        elif 'avc' in text or 'derrame' in text:
            cid_principal = 'I64 (Acidente vascular cerebral n√£o especificado)'
            cid_secundario = 'G93.1 (Les√£o cerebral an√≥xica n√£o classificada em outra parte)'
        elif 'parkinson' in text:
            cid_principal = 'G20 (Doen√ßa de Parkinson)'
        elif 'epilepsia' in text:
            cid_principal = 'G40.9 (Epilepsia n√£o especificada)'
        
        # =============================================================================
        # CIDs DE ACIDENTES DE TRABALHO
        # =============================================================================
        elif 'acidente' in text and 'trabalho' in text:
            if 'queda' in text:
                cid_principal = 'W19 (Queda n√£o especificada)'
                cid_secundario = 'Y96.1 (Fator ocupacional)'
            elif 'm√°quina' in text:
                cid_principal = 'W31.9 (Contato com outras m√°quinas n√£o especificadas)'
                cid_secundario = 'Y96.1 (Fator ocupacional)'
            else:
                cid_principal = 'W20.9 (Golpe por objeto em queda n√£o especificado)'
                cid_secundario = 'Y96.1 (Fator ocupacional)'
        
        # =============================================================================
        # CID PADR√ÉO SE N√ÉO ENCONTRAR ESPEC√çFICO
        # =============================================================================
        else:
            cid_principal = 'Z03.9 (Observa√ß√£o para suspeita de doen√ßa ou afec√ß√£o n√£o especificada)'
        
        # Montar resultado final
        if cid_secundario:
            resultado = f"{cid_principal} + {cid_secundario}"
            print(f"‚úÖ CID Principal: {cid_principal}")
            print(f"‚úÖ CID Secund√°rio: {cid_secundario}")
        else:
            resultado = cid_principal
            print(f"‚úÖ CID Principal: {cid_principal}")
        
        return resultado
    
    def _determinar_especialidade_correta(self, transcription: str) -> str:
        """Determinar especialidade CORRETA baseada na condi√ß√£o"""
        
        text = transcription.lower()
        
        if 'fratura' in text and 'coluna' in text:
            return 'Ortopedia'
        elif 'perda auditiva' in text or 'escutar' in text:
            return 'Otorrinolaringologia'
        elif 'depress√£o' in text or 'ansiedade' in text:
            return 'Psiquiatria'
        elif 'cora√ß√£o' in text:
            return 'Cardiologia'
        else:
            return 'Cl√≠nica Geral'
    
    def _extrair_medicamentos_exatos(self, transcription: str) -> str:
        """Extrair medicamentos √öNICOS - CREDIBILIDADE T√âCNICA ABSOLUTA"""
        text = transcription.lower().strip()
        medicamentos_processados = {}  # Dicion√°rio com controle r√≠gido
        
        # Medicamentos com nomes normalizados 
        medicamentos_referencias = {
            'fluoxetina': 'Fluoxetina',
            'sertralina': 'Sertralina', 
            'clonazepam': 'Clonazepam',
            'rivotril': 'Clonazepam',  
            'diazepam': 'Diazepam',
            'losartana': 'Losartana',
            'metformina': 'Metformina',
            'omeprazol': 'Omeprazol',
            'tramadol': 'Tramadol',
            'ibuprofeno': 'Ibuprofeno',
            'paracetamol': 'Paracetamol',
            'dipirona': 'Dipirona',
            'escitalopram': 'Escitalopram',
            'venlafaxina': 'Venlafaxina',
            'alprazolam': 'Alprazolam',
            'lorazepam': 'Lorazepam',
            'pregabalina': 'Pregabalina',
            'gabapentina': 'Gabapentina',
            'amitriptilina': 'Amitriptilina'
        }
        
        # Processar cada medicamento UMA √öNICA VEZ
        for med_key, med_nome in medicamentos_referencias.items():
            if med_key in text and med_key not in medicamentos_processados:
                
                # Buscar dosagem ESPEC√çFICA
                dosagem_patterns = [
                    fr'{re.escape(med_key)}\s+(\d+)\s*m?g',
                    fr'(\d+)\s*m?g\s+de\s+{re.escape(med_key)}',
                    fr'tomo\s+{re.escape(med_key)}\s+(\d+)',
                    fr'uso\s+{re.escape(med_key)}\s+(\d+)',
                    fr'{re.escape(med_key)}\s+na\s+(\d+)\s*miligramas?',
                    fr'{re.escape(med_key)}\s+meio\s+miligrama',  
                    fr'{re.escape(med_key)}\s+(0[,.]5)\s*mg',     
                    fr'meio\s+miligrama\s+de\s+{re.escape(med_key)}',
                    fr'(\d+[,.]?\d*)\s*mg\s+{re.escape(med_key)}'
                ]
                
                dosagem = None
                for i, pattern in enumerate(dosagem_patterns):
                    match = re.search(pattern, text)
                    if match:
                        if i == 5:  # Padr√£o "meio miligrama"
                            dosagem = "0,5"
                        elif i == 6:  # Padr√£o "0,5mg"
                            dosagem = match.group(1).replace(',', '.')
                        elif i == 7:  # Padr√£o "meio miligrama de"
                            dosagem = "0,5"
                        else:
                            dosagem = match.group(1)
                        break
                
                # Adicionar medicamento NORMALIZADO
                if dosagem:
                    medicamentos_processados[med_key] = f"{med_nome} {dosagem}mg"
                else:
                    medicamentos_processados[med_key] = med_nome
        
        # Resultado com credibilidade t√©cnica
        if medicamentos_processados:
            resultado_final = sorted(list(medicamentos_processados.values()))
            print(f"‚úÖ Medicamentos T√âCNICOS (zero duplicatas): {resultado_final}")
            return "; ".join(resultado_final)
        else:
            return "Nenhum medicamento especificado"

    def _extrair_sintomas_relatados(self, transcription: str) -> str:
        """Extrair APENAS sintomas EXPLICITAMENTE relatados - ZERO ALUCINA√á√ÉO"""
        text = transcription.lower().strip()
        sintomas_reais = []
        
        # SINTOMAS EXPL√çCITOS - apenas o que est√° LITERALMENTE na transcri√ß√£o
        sintomas_diretos = {
            'depress√£o': 'depress√£o',
            'ansiedade': 'ansiedade', 
            'ins√¥nia': 'ins√¥nia',
            'dor': 'dor',
            'fadiga': 'fadiga',
            'cansa√ßo': 'cansa√ßo',
            'tontura': 'tontura',
            'zumbido': 'zumbido',
            'rigidez': 'rigidez',
            'dorm√™ncia': 'dorm√™ncia'
        }
        
        # Buscar APENAS sintomas que est√£o LITERALMENTE escritos
        for sintoma_busca, sintoma_nome in sintomas_diretos.items():
            if sintoma_busca in text:
                sintomas_reais.append(sintoma_nome)
        
        # FRASES ESPEC√çFICAS de sintomas
        frases_sintomas = [
            ('n√£o consigo me concentrar', 'dificuldade de concentra√ß√£o'),
            ('n√£o consigo escutar', 'perda auditiva'),
            ('n√£o consigo dormir', 'ins√¥nia'),
            ('dor de cabe√ßa', 'cefaleia'),
            ('dor nas costas', 'dorsalgia')
        ]
        
        for frase, sintoma in frases_sintomas:
            if frase in text and sintoma not in sintomas_reais:
                sintomas_reais.append(sintoma)
        
        # VALIDA√á√ÉO RIGOROSA - remover falsos positivos
        sintomas_validados = []
        for sintoma in sintomas_reais:
            # Evitar sintomas gen√©ricos demais
            if sintoma not in ['me sinto', 'tenho', 'sinto']:
                sintomas_validados.append(sintoma)
        
        if sintomas_validados:
            # Remover duplicatas mantendo ordem
            sintomas_unicos = []
            for s in sintomas_validados:
                if s not in sintomas_unicos:
                    sintomas_unicos.append(s)
            
            print(f"‚úÖ Sintomas REAIS extra√≠dos: {sintomas_unicos}")
            return "; ".join(sintomas_unicos)
        else:
            return "Sintomas n√£o especificados"

    def _extrair_tempo_exato(self, transcription: str) -> str:
        """Extrair cronologia ESPEC√çFICA - PADR√ÉO INSS (sem termos vagos)"""
        
        text = transcription.lower().strip()
        
        # CONVERS√ÉO de n√∫meros por extenso
        numeros_extenso = {
            'um': '1', 'uma': '1', 'dois': '2', 'duas': '2', 'tr√™s': '3', 'tres': '3',
            'quatro': '4', 'cinco': '5', 'seis': '6', 'sete': '7', 'oito': '8', 
            'nove': '9', 'dez': '10', 'onze': '11', 'doze': '12'
        }
        
        # Converter n√∫meros por extenso antes dos padr√µes
        text_normalizado = text
        for extenso, numero in numeros_extenso.items():
            text_normalizado = text_normalizado.replace(f'{extenso} meses', f'{numero} meses')
            text_normalizado = text_normalizado.replace(f'{extenso} anos', f'{numero} anos')
            text_normalizado = text_normalizado.replace(f'{extenso} ano', f'{numero} anos')  # Singular ‚Üí Plural
        
        # PADR√ïES RIGOROSOS para INSS - ordem de prioridade
        patterns_inss = [
            # Condi√ß√µes com tempo EXATO
            (r'depress√£o h√° (\d+) (anos?|meses?)', 'diagn√≥stico'),
            (r'sintomas h√° (\d+) (anos?|meses?)', 'sintomatologia'),
            (r'(?:os )?sintomas come√ßaram h√° (\d+) (anos?|meses?)', 'in√≠cio sintomas'),
            (r'(?:a )?dor h√° (\d+) (anos?|meses?)', 'quadro √°lgico'),
            (r'dor na (?:coluna|costas?) h√° (\d+) (anos?|meses?)', 'dor vertebral'),
            (r'dor na? (?:bra√ßo|perna|joelho|ombro) h√° (\d+) (anos?|meses?)', 'dor articular'),
            
            # Padr√µes de IN√çCIO temporal espec√≠fico
            (r'come√ßou h√° (\d+) (anos?|meses?)', 'in√≠cio condi√ß√£o'),
            (r'come√ßou (?:j√° )?(?:tem )?(?:uns )?(\d+) (anos?|meses?)', 'in√≠cio temporal'),
            (r'(?:j√° )?tem (?:uns )?(\d+) (anos?|meses?)', 'dura√ß√£o temporal'),
            
            # Diagn√≥sticos espec√≠ficos DATADOS
            (r'ansiedade h√° (\d+) (anos?|meses?)', 'transtorno ansioso'),
            (r'burnout h√° (\d+) (anos?|meses?)', 's√≠ndrome burnout'),
            (r'diabetes h√° (\d+) (anos?|meses?)', 'diabetes mellitus'),
            (r'hipertens√£o h√° (\d+) (anos?|meses?)', 'hipertens√£o arterial'),
            
            # Eventos traum√°ticos DATADOS
            (r'acidente h√° (\d+) (anos?|meses?)', 'evento traum√°tico'),
            (r'sofri acidente h√° (\d+) (anos?|meses?)', 'acidente trabalho'),
            (r'fraturei h√° (\d+) (anos?|meses?)', 'les√£o traum√°tica'),
            (r'cirurgia h√° (\d+) (anos?|meses?)', 'procedimento cir√∫rgico'),
            
            # Padr√µes diferenciados (prioridade)
            (r'mas (?:os sintomas|a condi√ß√£o|o problema) h√° (\d+) (anos?|meses?)', 'diferencia√ß√£o laboral'),
            (r'mas tenho (?:isso|esta condi√ß√£o) h√° (\d+) (anos?|meses?)', 'condi√ß√£o espec√≠fica'),
            (r'desenvolveu?i? (?:depress√£o|ansiedade|burnout) h√° (\d+) (anos?|meses?)', 'desenvolvimento condi√ß√£o'),
            
            # Padr√µes gen√©ricos ESPEC√çFICOS
            (r'h√° (\d+) (anos?|meses?) que (?:tenho|sinto|apresento)', 'apresenta√ß√£o cl√≠nica'),
            (r'faz (\d+) (anos?|meses?) que (?:sofro|tenho)', 'evolu√ß√£o temporal')
        ]
        
        # Buscar cronologia ESPEC√çFICA
        for pattern, categoria in patterns_inss:
            match = re.search(pattern, text_normalizado)
            if match:
                numero = match.group(1)
                unidade = match.group(2)
                
                # Normaliza√ß√£o gramatical CORRETA
                if numero == '1':
                    unidade_final = unidade.rstrip('s')  # Singular
                else:
                    unidade_final = unidade if unidade.endswith('s') else unidade + 's'  # Plural
                
                resultado = f"H√° {numero} {unidade_final}"
                print(f"‚úÖ Cronologia INSS ({categoria}): {resultado}")
                return resultado
        
        # CASOS ESPECIAIS com DATA APROXIMADA
        if 'acidente' in text:
            if 'ontem' in text:
                return 'H√° 1 dia (acidente recente)'
            elif 'semana' in text and 'passada' in text:
                return 'H√° 1 semana (acidente recente)'
            elif 'm√™s' in text and 'passado' in text:
                return 'H√° 1 m√™s (acidente recente)'
            else:
                return 'Acidente sem data espec√≠fica informada'
        
        # Casos de CRONOLOGIA EXTENSA
        if 'desde' in text and ('crian√ßa' in text or 'nascimento' in text):
            return 'Desde a inf√¢ncia (condi√ß√£o cong√™nita/precoce)'
            
        # FALLBACK T√âCNICO (sem termos vagos)
        print("‚ö†Ô∏è Cronologia n√£o quantificada na transcri√ß√£o")
        return 'Tempo de in√≠cio n√£o quantificado pelo paciente'

# ============================================================================
# CFM COMPLIANCE SERVICE
# ============================================================================

class CFMComplianceChecker:
    """CFM Compliance checker simplificado"""
    
    def __init__(self):
        pass
    
    def validate_telemedicine_scope(self, context_type: str, transcription: str = "") -> Dict[str, Any]:
        """Valida√ß√£o CFM simplificada"""
        
        # Sempre compliant para avalia√ß√µes m√©dicas gerais
        return {
            "compliant": True,
            "warning": None,
            "alternative": None,
            "recommendation": "Teleconsulta conforme protocolo m√©dico"
        }

# ============================================================================
# GERADOR DE LAUDOS LIMPO
# ============================================================================

class CleanLaudoGenerator:
    """Gerador de laudos LIMPO e profissional"""
    
    def __init__(self):
        self.extractor = UltraPreciseDataExtractor()
        self.cfm_checker = CFMComplianceChecker()
    
    def gerar_anamnese_completa(self, dados: Dict[str, Any]) -> str:
        """Gerar anamnese m√©dica completa e profissional"""
        
        patient_info = dados.get('patient_info', '')
        transcription = dados.get('transcription', '')
        beneficio = dados.get('beneficio', 'avaliacao-medica')
        
        # Extrair dados EXATOS
        info = self.extractor.extrair_dados_exatos(patient_info, transcription)
        
        anamnese = f"""ANAMNESE M√âDICA OCUPACIONAL

Data: {datetime.now().strftime('%d/%m/%Y')}
Protocolo: AM-{datetime.now().strftime('%Y%m%d%H%M')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. IDENTIFICA√á√ÉO DO PACIENTE

Nome: {info['nome']}
Idade: {info['idade']} anos
Sexo: {info['sexo']}
Profiss√£o: {info['profissao']}
Tempo de servi√ßo: {self._extrair_tempo_trabalho(transcription)}

2. QUEIXA PRINCIPAL

{self._extrair_queixa_principal_detalhada(transcription)}

3. HIST√ìRIA DA DOEN√áA ATUAL (HDA)

RELATO DO PACIENTE:
"{transcription}"

IN√çCIO DOS SINTOMAS: {info['data_inicio']}
CONDI√á√ÉO ATUAL: {info['condicao_medica']}
EVOLU√á√ÉO: {self._analisar_evolucao_detalhada(transcription)}

SINTOMATOLOGIA:
‚Ä¢ Sintomas principais: {self._extrair_sintomas_detalhados(transcription)}
‚Ä¢ Limita√ß√µes funcionais: {info['limitacoes']}
‚Ä¢ Fatores agravantes: {self._identificar_fatores_agravantes(transcription)}

4. HIST√ìRIA OCUPACIONAL DETALHADA

PROFISS√ÉO ATUAL: {info['profissao']}
TEMPO DE EXERC√çCIO: {self._extrair_tempo_trabalho(transcription)}
ATIVIDADES ESPEC√çFICAS: {self._detalhar_atividades_profissionais(info['profissao'], transcription)}
EXPOSI√á√ïES OCUPACIONAIS: {self._identificar_exposicoes(info['profissao'])}

IMPACTO LABORAL:
{self._avaliar_impacto_laboral_detalhado(info['profissao'], info['limitacoes'])}

5. ANTECEDENTES PESSOAIS

ANTECEDENTES PATOL√ìGICOS: {self._extrair_antecedentes(transcription)}
MEDICAMENTOS EM USO: {info['medicamentos']}
ALERGIAS: N√£o relatadas na teleconsulta
CIRURGIAS ANTERIORES: {self._extrair_cirurgias(transcription)}
HIST√ìRIA FAMILIAR: N√£o investigada na teleconsulta

6. EXAME F√çSICO (TELECONSULTA)

ESTADO GERAL: Paciente colaborativo durante teleconsulta
RELATO FUNCIONAL: {self._avaliar_funcionalidade(transcription)}
LIMITA√á√ïES OBSERVADAS: {info['limitacoes']}

OBSERVA√á√ïES: Exame realizado por teleconsulta conforme protocolo CFM para avalia√ß√£o m√©dica ocupacional.

7. DOCUMENTA√á√ÉO APRESENTADA

{self._get_documentacao_detalhada(transcription)}

8. AVALIA√á√ÉO FUNCIONAL

CAPACIDADE LABORAL: {self._avaliar_capacidade_laboral(info['profissao'], info['limitacoes'])}
GRAU DE LIMITA√á√ÉO: {self._classificar_grau_limitacao(transcription)}
PROGN√ìSTICO FUNCIONAL: {self._determinar_prognostico_funcional(transcription)}

9. IMPRESS√ÉO DIAGN√ìSTICA

DIAGN√ìSTICO PRINCIPAL: {info['condicao_medica']}
CID-10: {info['cid']}
ESPECIALIDADE: {info['especialidade']}

10. CONDUTA E ORIENTA√á√ïES

TRATAMENTO ATUAL: {self._extrair_tratamento_atual(transcription)}
PROGN√ìSTICO: {self._determinar_prognostico_detalhado(info['especialidade'], transcription)}
RECOMENDA√á√ïES: {self._gerar_recomendacoes_especificas(info['especialidade'])}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

ELABORADO POR: Sistema M√©dico Automatizado
MODALIDADE: Teleconsulta - {info['especialidade']}
DATA: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
PROTOCOLO CFM: Conforme Resolu√ß√£o CFM n¬∫ 2.314/2022"""
        
        return anamnese.strip()
    
    def gerar_laudo_completo(self, dados: Dict[str, Any]) -> str:
        """Gerar laudo m√©dico completo e profissional"""
        
        patient_info = dados.get('patient_info', '')
        transcription = dados.get('transcription', '')
        beneficio = dados.get('beneficio', 'avaliacao-medica')
        
        # Extrair dados EXATOS
        info = self.extractor.extrair_dados_exatos(patient_info, transcription)
        
        laudo = f"""LAUDO M√âDICO OCUPACIONAL

Data: {datetime.now().strftime('%d/%m/%Y')}
Protocolo: LM-{datetime.now().strftime('%Y%m%d%H%M')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

IDENTIFICA√á√ÉO E DADOS PESSOAIS

Paciente: {info['nome']}
Idade: {info['idade']} anos
Sexo: {info['sexo']}
Profiss√£o: {info['profissao']}
Tempo na fun√ß√£o: {self._extrair_tempo_trabalho(transcription)}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. HIST√ìRIA CL√çNICA E OCUPACIONAL

ANAMNESE RESUMIDA:
‚Ä¢ In√≠cio da condi√ß√£o: {info['data_inicio']}
‚Ä¢ Diagn√≥stico principal: {info['condicao_medica']}
‚Ä¢ Sintomas: {info['sintomas']}
‚Ä¢ Evolu√ß√£o: {self._analisar_evolucao_resumida(transcription)}

QUADRO CL√çNICO ATUAL:
‚Ä¢ Limita√ß√µes funcionais: {self._resumir_limitacoes(info['limitacoes'])}
‚Ä¢ Fatores agravantes: {self._identificar_fatores_agravantes(transcription)}

2. AVALIA√á√ÉO FUNCIONAL E LIMITA√á√ïES

CAPACIDADE LABORAL ATUAL: {self._avaliar_capacidade_laboral(info['profissao'], info['limitacoes'])}

LIMITA√á√ïES IDENTIFICADAS:
{self._resumir_limitacoes(info['limitacoes'])}

GRAU DE LIMITA√á√ÉO: {self._classificar_grau_limitacao(transcription)}

INCOMPATIBILIDADE PROFISSIONAL:
{self._avaliar_incompatibilidade_concisa(info['profissao'], info['limitacoes'])}

3. HIST√ìRIA OCUPACIONAL DETALHADA

ATIVIDADES EXERCIDAS: {self._detalhar_atividades_profissionais(info['profissao'], transcription)}
EXPOSI√á√ïES OCUPACIONAIS: {self._identificar_exposicoes(info['profissao'])}
EQUIPAMENTOS UTILIZADOS: {self._identificar_equipamentos_profissionais(info['profissao'])}

IMPACTO LABORAL:
{self._avaliar_impacto_laboral_detalhado(info['profissao'], info['limitacoes'])}

4. FUNDAMENTA√á√ÉO T√âCNICA

DIAGN√ìSTICO PRINCIPAL: {info['condicao_medica']}
CLASSIFICA√á√ÉO CID-10: {info['cid']}
ESPECIALIDADE M√âDICA: {info['especialidade']}

CRIT√âRIOS T√âCNICOS:
{self._estabelecer_criterios_tecnicos(info['especialidade'], info['condicao_medica'])}

5. ANTECEDENTES E TRATAMENTO

ANTECEDENTES PATOL√ìGICOS: {self._extrair_antecedentes(transcription)}
MEDICAMENTOS EM USO: {info['medicamentos']}
TRATAMENTO ATUAL: {self._extrair_tratamento_atual(transcription)}

6. EXAMES E DOCUMENTA√á√ÉO

DOCUMENTA√á√ÉO M√âDICA: {self._get_documentacao_detalhada(transcription)}

OBSERVA√á√ïES: Avalia√ß√£o realizada por teleconsulta conforme protocolo CFM para medicina ocupacional.

7. PROGN√ìSTICO E EVOLU√á√ÉO

PROGN√ìSTICO FUNCIONAL: {self._determinar_prognostico_funcional(transcription)}
PROGN√ìSTICO LABORAL: {self._determinar_prognostico_detalhado(info['especialidade'], transcription)}

EVOLU√á√ÉO ESPERADA: {self._prognosticar_evolucao(info['condicao_medica'], transcription)}

8. CONCLUS√ÉO M√âDICA

DIAGN√ìSTICO DEFINITIVO: {info['condicao_medica']}
C√ìDIGO CID-10: {info['cid']}

PARECER T√âCNICO:
Paciente {info['sexo'].lower() if info['sexo'] != 'N√£o informado' else ''}, {info['idade']} anos, {info['profissao'].lower()}, apresenta {info['condicao_medica']} com {info['data_inicio']}.

O quadro cl√≠nico atual resulta em limita√ß√µes funcionais significativas que comprometem o exerc√≠cio da atividade laboral habitual.

AVALIA√á√ÉO DE CAPACIDADE LABORAL:
{self._gerar_avaliacao_capacidade_final(info['profissao'], info['limitacoes'])}

ENQUADRAMENTO LEGAL:
O caso se enquadra nos crit√©rios m√©dicos estabelecidos pela legisla√ß√£o previdenci√°ria.

BENEF√çCIO RECOMENDADO: {self._format_beneficio(beneficio)}

FUNDAMENTA√á√ÉO LEGAL:
{self._get_fundamentacao_legal_beneficio(beneficio)}

9. RECOMENDA√á√ïES M√âDICAS

CONDUTA IMEDIATA:
‚Ä¢ Acompanhamento m√©dico especializado em {info['especialidade']}
‚Ä¢ {self._gerar_recomendacoes_especificas(info['especialidade'])}

SEGUIMENTO:
‚Ä¢ Reavalia√ß√£o m√©dica peri√≥dica
‚Ä¢ Monitoramento da evolu√ß√£o das limita√ß√µes funcionais
‚Ä¢ Considera√ß√£o de reabilita√ß√£o profissional quando indicado

OBSERVA√á√ïES FINAIS:
{self._gerar_observacoes_finais(transcription)}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

RESPONS√ÅVEL T√âCNICO: Sistema M√©dico Automatizado
MODALIDADE: Teleconsulta - {info['especialidade']}
PROTOCOLO CFM: Conforme Resolu√ß√£o CFM n¬∫ 2.314/2022
DATA: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}"""
        
        return laudo.strip()
    
    def _format_beneficio(self, beneficio: str) -> str:
        """Formatar nome do benef√≠cio com detalhes espec√≠ficos"""
        formatos = {
            'auxilio-doenca': 'AUX√çLIO-DOEN√áA (B31)',
            'auxilio-acidente': 'AUX√çLIO-ACIDENTE (B91)',
            'aposentadoria-invalidez': 'APOSENTADORIA POR INVALIDEZ (B32)',
            'bpc-loas': 'BENEF√çCIO DE PRESTA√á√ÉO CONTINUADA - BPC/LOAS (87)',
            'isencao-ir': 'ISEN√á√ÉO DE IMPOSTO DE RENDA (Condi√ß√£o Oncol√≥gica)',
            'pericia-inss': 'PER√çCIA M√âDICA INSS (Revis√£o/Reavalia√ß√£o)',
            'laudo-juridico': 'LAUDO PARA FINS JUR√çDICOS',
            'bpc': 'BENEF√çCIO DE PRESTA√á√ÉO CONTINUADA - BPC/LOAS (87)',
            'incapacidade': 'AVALIA√á√ÉO DE INCAPACIDADE LABORAL',
            'clinica': 'CONSULTA CL√çNICA GERAL'
        }
        return formatos.get(beneficio, 'AVALIA√á√ÉO M√âDICA GERAL')
    
    def _extrair_tempo_trabalho(self, transcription: str) -> str:
        """Extrair tempo de trabalho"""
        match = re.search(r'h√° (\d+) anos?', transcription, re.IGNORECASE)
        if match:
            return f"h√° {match.group(1)} anos"
        return "conforme relatado"
    
    def _get_documentacao(self, transcription: str) -> str:
        """Documenta√ß√£o mencionada"""
        if 'exame' in transcription.lower():
            return 'Exames complementares conforme apresentados pelo paciente'
        else:
            return 'Documenta√ß√£o m√©dica dispon√≠vel conforme apresenta√ß√£o do paciente'
    
    def _get_justificativa_profissional(self, profissao: str, limitacoes: str) -> str:
        """Justificativa espec√≠fica por profiss√£o"""
        
        justificativas = {
            'pedreiro': f'A profiss√£o de pedreiro exige esfor√ßo f√≠sico intenso, levantamento de peso e trabalho em altura. As limita√ß√µes apresentadas ({limitacoes}) impedem o exerc√≠cio seguro dessas atividades.',
            'professor': f'A doc√™ncia requer concentra√ß√£o, intera√ß√£o social e controle emocional. As limita√ß√µes apresentadas ({limitacoes}) comprometem o exerc√≠cio adequado do magist√©rio.',
            'motorista': f'A condu√ß√£o de ve√≠culos exige reflexos, concentra√ß√£o e esfor√ßo f√≠sico. As limita√ß√µes apresentadas ({limitacoes}) impossibilitam a condu√ß√£o segura.',
            'atendente': f'O atendimento requer comunica√ß√£o eficaz e uso de equipamentos. As limita√ß√µes apresentadas ({limitacoes}) impedem o desempenho adequado da fun√ß√£o.'
        }
        
        return justificativas.get(profissao.lower(), f'As limita√ß√µes funcionais apresentadas ({limitacoes}) impedem o adequado exerc√≠cio da profiss√£o.')
    
    def _get_justificativa_detalhada(self, profissao: str, condicao: str) -> str:
        """Justificativa t√©cnica detalhada"""
        
        if 'pedreiro' in profissao.lower() and 'fratura' in condicao:
            return 'A fratura de coluna vertebral compromete diretamente a capacidade para levantamento de peso, trabalho em altura e esfor√ßos f√≠sicos intensos exigidos pela constru√ß√£o civil.'
        elif 'atendente' in profissao.lower() and 'auditiva' in condicao:
            return 'A perda auditiva impede a comunica√ß√£o telef√¥nica eficaz e o uso adequado de equipamentos de √°udio exigidos para atendimento ao cliente.'
        else:
            return f'A condi√ß√£o m√©dica apresentada ({condicao}) √© incompat√≠vel com as exig√™ncias da profiss√£o de {profissao.lower()}.'
    
    # ============================================================================
    # M√âTODOS AUXILIARES PARA ANAMNESE E LAUDO DETALHADOS
    # ============================================================================
    
    def _extrair_queixa_principal_detalhada(self, transcription: str) -> str:
        """Extrair queixa principal detalhada"""
        text = transcription.lower()
        
        if 'fratura' in text and 'coluna' in text:
            return "Sequelas de fratura de coluna vertebral com limita√ß√£o funcional significativa para atividades laborais"
        elif 'depress√£o' in text:
            return "Transtorno depressivo com comprometimento da capacidade laboral"
        elif 'perda auditiva' in text:
            return "Defici√™ncia auditiva com impacto nas atividades profissionais"
        elif 'dor' in text:
            return "S√≠ndrome dolorosa cr√¥nica com limita√ß√£o funcional"
        else:
            return "Limita√ß√£o funcional com impacto na capacidade laboral"
    
    def _analisar_evolucao_detalhada(self, transcription: str) -> str:
        """Analisar evolu√ß√£o detalhada"""
        text = transcription.lower()
        
        if 'piorando' in text or 'piora' in text:
            return "Quadro em progress√£o com agravamento das limita√ß√µes funcionais"
        elif 'est√°vel' in text:
            return "Quadro estabilizado com limita√ß√µes funcionais persistentes"
        elif 'melhora' in text:
            return "Quadro com melhora parcial, por√©m com limita√ß√µes residuais"
        else:
            return "Evolu√ß√£o com limita√ß√µes funcionais que impedem o exerc√≠cio laboral habitual"
    
    def _analisar_evolucao_resumida(self, transcription: str) -> str:
        """Analisar evolu√ß√£o de forma concisa"""
        text = transcription.lower()
        
        if 'piorando' in text or 'piora' in text:
            return "Quadro progressivo"
        elif 'est√°vel' in text:
            return "Quadro est√°vel"
        elif 'melhora' in text:
            return "Quadro em melhora"
        else:
            return "Evolu√ß√£o cr√¥nica"
    
    def _resumir_limitacoes(self, limitacoes: str) -> str:
        """Resumir limita√ß√µes de forma concisa"""
        if not limitacoes or limitacoes == "Sintomas n√£o especificados":
            return "Limita√ß√µes funcionais significativas"
        
        # Pegar apenas as primeiras 3 limita√ß√µes mais importantes
        lista_limitacoes = limitacoes.split(';')
        limitacoes_principais = []
        
        for lim in lista_limitacoes[:3]:
            lim_clean = lim.strip()
            if lim_clean:
                limitacoes_principais.append(lim_clean)
        
        if limitacoes_principais:
            return "; ".join(limitacoes_principais)
        else:
            return "Limita√ß√µes funcionais com impacto laboral"
    
    def _avaliar_incompatibilidade_concisa(self, profissao: str, limitacoes: str) -> str:
        """Avaliar incompatibilidade profissional de forma concisa"""
        prof = profissao.lower() if profissao else "atividade laboral"
        
        if 'professor' in prof:
            return "Limita√ß√µes impedem atividades pedag√≥gicas e relacionais necess√°rias ao magist√©rio"
        elif 'enfermeiro' in prof:
            return "Limita√ß√µes comprometem cuidados diretos e procedimentos t√©cnicos"
        elif 'pedreiro' in prof:
            return "Limita√ß√µes f√≠sicas incompat√≠veis com atividades da constru√ß√£o civil"
        elif 'motorista' in prof:
            return "Limita√ß√µes comprometem seguran√ßa na condu√ß√£o de ve√≠culos"
        else:
            return f"Limita√ß√µes funcionais incompat√≠veis com as exig√™ncias da atividade de {prof}"
    
    def _extrair_sintomas_detalhados(self, transcription: str) -> str:
        """Extrair sintomas detalhados"""
        sintomas = []
        text = transcription.lower()
        
        if 'dor' in text:
            if 'coluna' in text or 'costa' in text:
                sintomas.append("Dor na coluna vertebral")
            elif 'cabe√ßa' in text:
                sintomas.append("Cefaleia")
            else:
                sintomas.append("Quadro √°lgico")
        
        if 'n√£o consigo' in text:
            sintomas.append("Limita√ß√£o funcional significativa")
        
        if 'depress√£o' in text or 'deprimido' in text:
            sintomas.append("Sintomas depressivos")
        
        if 'ansiedade' in text or 'ansioso' in text:
            sintomas.append("Sintomas ansiosos")
        
        return "; ".join(sintomas) if sintomas else "Conforme relato do paciente"
    
    def _identificar_fatores_agravantes(self, transcription: str) -> str:
        """Identificar fatores agravantes"""
        text = transcription.lower()
        fatores = []
        
        if 'carregar peso' in text or 'peso' in text:
            fatores.append("Esfor√ßo f√≠sico e levantamento de peso")
        
        if 'altura' in text:
            fatores.append("Trabalho em altura")
        
        if 'estresse' in text:
            fatores.append("Estresse ocupacional")
        
        if 'posi√ß√£o' in text or 'postura' in text:
            fatores.append("Posturas viciosas no trabalho")
        
        return "; ".join(fatores) if fatores else "Relacionados √† atividade laboral"
    
    def _detalhar_atividades_profissionais(self, profissao: str, transcription: str) -> str:
        """Detalhar atividades profissionais espec√≠ficas"""
        atividades = {
            'pedreiro': 'Levantamento de materiais pesados, trabalho em altura, manuseio de ferramentas, constru√ß√£o e alvenaria',
            'professor': 'Doc√™ncia, prepara√ß√£o de aulas, intera√ß√£o com alunos, atividades pedag√≥gicas',
            'motorista': 'Condu√ß√£o de ve√≠culos, carga e descarga, manuten√ß√£o preventiva',
            'atendente': 'Atendimento ao p√∫blico, uso de equipamentos telef√¥nicos, digita√ß√£o',
            'enfermeiro': 'Cuidados diretos ao paciente, administra√ß√£o de medicamentos, procedimentos t√©cnicos',
            'mec√¢nico': 'Manuten√ß√£o e reparo de equipamentos, uso de ferramentas, posi√ß√µes inc√¥modas'
        }
        
        for prof_key, atividade in atividades.items():
            if prof_key in profissao.lower():
                return atividade
        
        return f"Atividades inerentes √† profiss√£o de {profissao.lower()}"
    
    def _identificar_exposicoes(self, profissao: str) -> str:
        """Identificar exposi√ß√µes ocupacionais"""
        exposicoes = {
            'pedreiro': 'Poeira, ru√≠do, vibra√ß√£o, sobrecarga f√≠sica, trabalho em altura',
            'professor': 'Estresse psicol√≥gico, sobrecarga mental, exposi√ß√£o a agentes biol√≥gicos',
            'motorista': 'Vibra√ß√£o, postura inadequada, estresse no tr√¢nsito, polui√ß√£o',
            'atendente': 'Ru√≠do de equipamentos, estresse psicol√≥gico, repetitividade',
            'enfermeiro': 'Agentes biol√≥gicos, estresse, sobrecarga f√≠sica e mental',
            'mec√¢nico': 'Produtos qu√≠micos, ru√≠do, vibra√ß√£o, posi√ß√µes for√ßadas'
        }
        
        for prof_key, exposicao in exposicoes.items():
            if prof_key in profissao.lower():
                return exposicao
        
        return "Exposi√ß√µes t√≠picas da atividade profissional"
    
    def _identificar_equipamentos_profissionais(self, profissao: str) -> str:
        """Identificar equipamentos profissionais"""
        equipamentos = {
            'pedreiro': 'Ferramentas manuais, andaimes, equipamentos de prote√ß√£o individual',
            'professor': 'Equipamentos audiovisuais, computadores, material did√°tico',
            'motorista': 'Ve√≠culos automotores, equipamentos de carga',
            'atendente': 'Telefone, computador, headset, equipamentos de escrit√≥rio',
            'enfermeiro': 'Equipamentos m√©dico-hospitalares, materiais descart√°veis',
            'mec√¢nico': 'Ferramentas manuais e el√©tricas, equipamentos de oficina'
        }
        
        for prof_key, equipamento in equipamentos.items():
            if prof_key in profissao.lower():
                return equipamento
        
        return "Equipamentos e ferramentas espec√≠ficas da profiss√£o"
    
    def _avaliar_impacto_laboral_detalhado(self, profissao: str, limitacoes: str) -> str:
        """Avaliar impacto laboral detalhado"""
        if 'limita√ß√£o para levantamento' in limitacoes and 'pedreiro' in profissao.lower():
            return "As limita√ß√µes para levantamento de peso s√£o incompat√≠veis com as exig√™ncias da constru√ß√£o civil, que demanda esfor√ßo f√≠sico constante."
        elif 'd√©ficit auditivo' in limitacoes and 'atendente' in profissao.lower():
            return "O d√©ficit auditivo impede o exerc√≠cio adequado do atendimento telef√¥nico e comunica√ß√£o com clientes."
        else:
            return f"As limita√ß√µes funcionais apresentadas comprometem significativamente o exerc√≠cio da profiss√£o de {profissao.lower()}."
    
    def _extrair_antecedentes(self, transcription: str) -> str:
        """Extrair antecedentes patol√≥gicos"""
        text = transcription.lower()
        antecedentes = []
        
        if 'diabetes' in text:
            antecedentes.append("Diabetes mellitus")
        if 'hipertens√£o' in text or 'press√£o alta' in text:
            antecedentes.append("Hipertens√£o arterial")
        if 'depress√£o' in text:
            antecedentes.append("Transtorno depressivo")
        
        return "; ".join(antecedentes) if antecedentes else "Conforme relatado pelo paciente"
    
    def _extrair_medicamentos_detalhados(self, transcription: str) -> str:
        """Extrair M√öLTIPLOS medicamentos com dosagens quando poss√≠vel"""
        text = transcription.lower()
        medicamentos = []
        
        # Lista expandida de medicamentos espec√≠ficos com varia√ß√µes
        medicamentos_conhecidos = {
            'fluoxetina': ['fluoxetina', 'prozac'],
            'sertralina': ['sertralina', 'zoloft'],
            'clonazepam': ['clonazepam', 'rivotril'],
            'diazepam': ['diazepam', 'valium'],
            'amitriptilina': ['amitriptilina', 'tryptanol'],
            'losartana': ['losartana', 'losartan'],
            'enalapril': ['enalapril'],
            'metformina': ['metformina', 'glifage'],
            'omeprazol': ['omeprazol'],
            'dipirona': ['dipirona', 'novalgina'],
            'paracetamol': ['paracetamol', 'tylenol'],
            'ibuprofeno': ['ibuprofeno', 'advil'],
            'tramadol': ['tramadol', 'tramal'],
            'pregabalina': ['pregabalina', 'lyrica'],
            'gabapentina': ['gabapentina'],
            'levotiroxina': ['levotiroxina', 'puran'],
            'sinvastatina': ['sinvastatina'],
            'hidroclorotiazida': ['hidroclorotiazida'],
            'amlodipina': ['amlodipina'],
            'carbamazepina': ['carbamazepina', 'tegretol']
        }
        
        # Buscar medicamentos com dosagens
        for med_principal, variacoes in medicamentos_conhecidos.items():
            for variacao in variacoes:
                if variacao in text:
                    # Tentar extrair dosagem
                    dosagem_patterns = [
                        fr'{variacao}\s+(\d+)\s*mg',
                        fr'{variacao}\s+de\s+(\d+)\s*mg',
                        fr'{variacao}\s+(\d+)',
                        fr'(\d+)\s*mg\s+de\s+{variacao}',
                        fr'(\d+)\s*mg.*{variacao}'
                    ]
                    
                    dosagem_encontrada = False
                    for pattern in dosagem_patterns:
                        match = re.search(pattern, text)
                        if match:
                            dosagem = match.group(1)
                            medicamentos.append(f"{med_principal.title()} {dosagem}mg")
                            dosagem_encontrada = True
                            break
                    
                    if not dosagem_encontrada:
                        medicamentos.append(med_principal.title())
                    break
        
        # Buscar padr√µes de m√∫ltiplos medicamentos
        multi_patterns = [
            r'tomo\s+([^,]+),?\s+e\s+([^,\.]+)',
            r'uso\s+([^,]+),?\s+e\s+([^,\.]+)',
            r'medicamentos?\s*:\s*([^\.]+)',
            r'rem√©dios?\s*:\s*([^\.]+)'
        ]
        
        for pattern in multi_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if isinstance(match, tuple):
                    for med in match:
                        med_clean = med.strip()
                        if len(med_clean) > 3 and med_clean not in [m.split()[0].lower() for m in medicamentos]:
                            medicamentos.append(med_clean.title())
                else:
                    med_clean = match.strip()
                    if len(med_clean) > 3:
                        medicamentos.append(med_clean.title())
        
        # Buscar classes de medicamentos
        classes_medicamentos = {
            'antidepressivo': 'Antidepressivos',
            'ansiol√≠tico': 'Ansiol√≠ticos', 
            'anticonvulsivante': 'Anticonvulsivantes',
            'antipsic√≥tico': 'Antipsic√≥ticos',
            'analg√©sico': 'Analg√©sicos',
            'anti-inflamat√≥rio': 'Anti-inflamat√≥rios',
            'hipotensor': 'Anti-hipertensivos',
            'diur√©tico': 'Diur√©ticos'
        }
        
        for classe, nome in classes_medicamentos.items():
            if classe in text and nome not in medicamentos:
                medicamentos.append(nome)
        
        # Remover duplicatas mantendo ordem
        medicamentos_unicos = []
        for med in medicamentos:
            if med not in medicamentos_unicos:
                medicamentos_unicos.append(med)
        
        if medicamentos_unicos:
            print(f"‚úÖ Medicamentos extra√≠dos: {medicamentos_unicos}")
            return "; ".join(medicamentos_unicos)
        else:
            return "Conforme prescri√ß√£o m√©dica"
    
    def _extrair_cirurgias(self, transcription: str) -> str:
        """Extrair cirurgias anteriores"""
        text = transcription.lower()
        
        if 'cirurgia' in text:
            if 'coluna' in text:
                return "Cirurgia de coluna vertebral"
            elif 'joelho' in text:
                return "Cirurgia de joelho"
            else:
                return "Cirurgia conforme relatado"
        
        return "N√£o relatadas na teleconsulta"
    
    def _avaliar_funcionalidade(self, transcription: str) -> str:
        """Avaliar funcionalidade"""
        text = transcription.lower()
        
        if 'n√£o consigo' in text:
            return "Relata limita√ß√µes funcionais significativas"
        elif 'dificuldade' in text:
            return "Relata dificuldades funcionais"
        else:
            return "Funcionalidade comprometida conforme relatado"
    
    def _get_documentacao_detalhada(self, transcription: str) -> str:
        """Obter documenta√ß√£o detalhada"""
        text = transcription.lower()
        
        if 'exame' in text:
            return "Exames complementares apresentados pelo paciente durante teleconsulta"
        elif 'laudo' in text:
            return "Documenta√ß√£o m√©dica pr√©via conforme apresenta√ß√£o do paciente"
        else:
            return "Documenta√ß√£o m√©dica dispon√≠vel conforme apresenta√ß√£o do paciente durante teleconsulta"
    
    def _avaliar_capacidade_laboral(self, profissao: str, limitacoes: str) -> str:
        """Avaliar capacidade laboral"""
        if 'incapacidade' in limitacoes.lower():
            return "Incapacidade total para atividade laboral habitual"
        elif 'limita√ß√£o' in limitacoes.lower():
            return "Capacidade laboral severamente comprometida"
        else:
            return "Capacidade laboral reduzida com limita√ß√µes funcionais"
    
    def _classificar_grau_limitacao(self, transcription: str) -> str:
        """Classificar grau de limita√ß√£o"""
        text = transcription.lower()
        
        if 'imposs√≠vel' in text or 'nunca mais' in text:
            return "Limita√ß√£o total"
        elif 'n√£o consigo' in text:
            return "Limita√ß√£o severa"
        elif 'dificuldade' in text:
            return "Limita√ß√£o moderada"
        else:
            return "Limita√ß√£o funcional significativa"
    
    def _determinar_prognostico_funcional(self, transcription: str) -> str:
        """Determinar progn√≥stico funcional"""
        text = transcription.lower()
        
        if 'cr√¥nico' in text or 'permanente' in text:
            return "Reservado para recupera√ß√£o funcional completa"
        elif 'tratamento' in text:
            return "Favor√°vel com tratamento adequado e reabilita√ß√£o"
        else:
            return "Dependente de evolu√ß√£o cl√≠nica e ades√£o ao tratamento"
    
    def _determinar_prognostico_detalhado(self, especialidade: str, transcription: str) -> str:
        """Determinar progn√≥stico detalhado por especialidade"""
        text = transcription.lower()
        
        prognosticos = {
            'Ortopedia': 'Favor√°vel com fisioterapia e reabilita√ß√£o motora',
            'Psiquiatria': 'Favor√°vel com psicoterapia e farmacoterapia adequadas',
            'Cardiologia': 'Favor√°vel com controle dos fatores de risco cardiovascular',
            'Otorrinolaringologia': 'Dependente do grau de perda auditiva e uso de pr√≥teses'
        }
        
        return prognosticos.get(especialidade, 'Favor√°vel com acompanhamento m√©dico especializado')
    
    def _prognosticar_evolucao(self, condicao: str, transcription: str) -> str:
        """Prognosticar evolu√ß√£o"""
        if 'fratura' in condicao.lower():
            return "Sequelas permanentes com limita√ß√µes funcionais residuais"
        elif 'depressivo' in condicao.lower():
            return "Evolu√ß√£o favor√°vel com tratamento psiqui√°trico adequado"
        else:
            return "Evolu√ß√£o dependente de ades√£o ao tratamento e reabilita√ß√£o"
    
    def _estabelecer_criterios_tecnicos(self, especialidade: str, condicao: str) -> str:
        """Estabelecer crit√©rios t√©cnicos"""
        criterios = {
            'Ortopedia': 'Avalia√ß√£o baseada em limita√ß√µes biomec√¢nicas e funcionais',
            'Psiquiatria': 'Avalia√ß√£o baseada em crit√©rios do DSM-5 e funcionalidade psicossocial',
            'Cardiologia': 'Avalia√ß√£o baseada em capacidade funcional cardiovascular',
            'Otorrinolaringologia': 'Avalia√ß√£o baseada em audiometria e funcionalidade auditiva'
        }
        
        return criterios.get(especialidade, 'Avalia√ß√£o baseada em crit√©rios cl√≠nicos e funcionais')
    
    def _get_justificativa_profissional_detalhada(self, profissao: str, limitacoes: str) -> str:
        """Justificativa profissional detalhada"""
        return f"""A profiss√£o de {profissao.lower()} apresenta exig√™ncias espec√≠ficas que s√£o incompat√≠veis com as limita√ß√µes funcionais apresentadas.

LIMITA√á√ïES IDENTIFICADAS: {limitacoes}

EXIG√äNCIAS PROFISSIONAIS: {self._detalhar_atividades_profissionais(profissao, '')}

INCOMPATIBILIDADE: As limita√ß√µes funcionais tornam imposs√≠vel o exerc√≠cio seguro e adequado da atividade profissional."""
    
    def _detalhar_limitacoes_especificas(self, limitacoes: str) -> str:
        """Detalhar limita√ß√µes espec√≠ficas"""
        return f"""‚Ä¢ Limita√ß√£o principal: {limitacoes}
‚Ä¢ Impacto funcional: Compromete atividades laborais habituais
‚Ä¢ Grau: Significativo com repercuss√£o na capacidade laboral
‚Ä¢ Car√°ter: Limita√ß√£o funcional com impacto ocupacional"""
    
    def _gerar_avaliacao_capacidade_final(self, profissao: str, limitacoes: str) -> str:
        """Gerar avalia√ß√£o final de capacidade"""
        return f"""Considerando as limita√ß√µes funcionais apresentadas ({limitacoes}) e as exig√™ncias espec√≠ficas da profiss√£o de {profissao.lower()}, conclui-se que h√° incompatibilidade entre o estado funcional atual e as demandas laborais.

As limita√ß√µes impedem o exerc√≠cio seguro e produtivo da atividade profissional habitual, caracterizando incapacidade laboral."""
    
    def _gerar_recomendacoes_especificas(self, especialidade: str) -> str:
        """Gerar recomenda√ß√µes espec√≠ficas por especialidade"""
        recomendacoes = {
            'Ortopedia': 'Fisioterapia motora e avalia√ß√£o para reabilita√ß√£o profissional',
            'Psiquiatria': 'Psicoterapia, farmacoterapia e acompanhamento psicossocial',
            'Cardiologia': 'Controle de fatores de risco e reabilita√ß√£o cardiovascular',
            'Otorrinolaringologia': 'Avalia√ß√£o audiol√≥gica e adapta√ß√£o de pr√≥teses auditivas'
        }
        
        return recomendacoes.get(especialidade, 'Acompanhamento multidisciplinar conforme necessidade')
    
    def _extrair_tratamento_atual(self, transcription: str) -> str:
        """Extrair tratamento atual"""
        text = transcription.lower()
        
        if 'medicamento' in text or 'rem√©dio' in text:
            return "Em uso de medicamentos conforme prescri√ß√£o m√©dica"
        elif 'fisioterapia' in text:
            return "Realizando fisioterapia"
        elif 'm√©dico' in text:
            return "Acompanhamento m√©dico regular"
        else:
            return "Tratamento conforme orienta√ß√£o m√©dica"
    

    
    def _gerar_observacoes_finais(self, transcription: str) -> str:
        """Gerar observa√ß√µes finais"""
        text = transcription.lower()
        
        observacoes = []
        
        if 'inss' in text or 'previd√™ncia' in text:
            observacoes.append("Documenta√ß√£o elaborada para fins previdenci√°rios")
        
        if 'urgente' in text or 'r√°pido' in text:
            observacoes.append("Caso requer acompanhamento priorit√°rio")
        
        observacoes.append("Teleconsulta realizada conforme protocolos CFM vigentes")
        observacoes.append("Recomenda-se avalia√ß√£o presencial complementar quando poss√≠vel")
        
        return "; ".join(observacoes)
    
    def _get_fundamentacao_legal_beneficio(self, beneficio: str) -> str:
        """Obter fundamenta√ß√£o legal espec√≠fica para cada tipo de benef√≠cio"""
        
        fundamentacoes = {
            'auxilio-doenca': """Art. 59 da Lei 8.213/91 - Aux√≠lio-doen√ßa ser√° devido ao segurado que:
‚Ä¢ Ficar incapacitado para seu trabalho ou atividade habitual por mais de 15 dias consecutivos
‚Ä¢ Comprove incapacidade em exame m√©dico-pericial
‚Ä¢ Mantenha qualidade de segurado
‚Ä¢ Cumpra car√™ncia quando exig√≠vel

CRIT√âRIO M√âDICO: Incapacidade tempor√°ria para atividade laboral habitual com possibilidade de recupera√ß√£o.""",

            'auxilio-acidente': """Art. 86 da Lei 8.213/91 - Aux√≠lio-acidente ser√° concedido quando:
‚Ä¢ Acidente resultar em sequela que reduza a capacidade laboral
‚Ä¢ Sequela for definitiva e reduzir capacidade para o trabalho
‚Ä¢ Acidente for do trabalho, de trajeto ou doen√ßa ocupacional

CRIT√âRIO M√âDICO: Sequela permanente com redu√ß√£o da capacidade laboral espec√≠fica.""",

            'aposentadoria-invalidez': """Art. 42 da Lei 8.213/91 - Aposentadoria por invalidez ser√° devida quando:
‚Ä¢ Segurado for considerado incapaz e insuscept√≠vel de reabilita√ß√£o
‚Ä¢ Incapacidade for total e permanente para qualquer atividade
‚Ä¢ Comprove incapacidade em per√≠cia m√©dica

CRIT√âRIO M√âDICO: Incapacidade total e permanente para qualquer atividade laboral.""",

            'bpc-loas': """Art. 20 da Lei 8.742/93 (LOAS) - BPC ser√° devido √† pessoa com defici√™ncia que:
‚Ä¢ Comprove n√£o possuir meios de prover pr√≥pria manuten√ß√£o
‚Ä¢ N√£o seja provida por sua fam√≠lia
‚Ä¢ Renda per capita familiar seja inferior a 1/4 do sal√°rio m√≠nimo
‚Ä¢ Comprove defici√™ncia de longo prazo

CRIT√âRIO M√âDICO: Defici√™ncia de longo prazo com impedimentos para participa√ß√£o social.""",

            'isencao-ir': """Art. 6¬∫ da Lei 7.713/88 - Isen√ß√£o de IR para portadores de:
‚Ä¢ Neoplasia maligna
‚Ä¢ Cegueira (inclusive monocular)
‚Ä¢ Hansen√≠ase
‚Ä¢ Paralisia irrevers√≠vel e incapacitante
‚Ä¢ Cardiopatia grave
‚Ä¢ Doen√ßa de Parkinson
‚Ä¢ Espondiloartrose anquilosante
‚Ä¢ Nefropatia grave
‚Ä¢ Hepatopatia grave
‚Ä¢ Estados avan√ßados da doen√ßa de Paget
‚Ä¢ Contamina√ß√£o por radia√ß√£o
‚Ä¢ S√≠ndrome da imunodefici√™ncia adquirida

CRIT√âRIO M√âDICO: Presen√ßa de doen√ßa grave especificada em lei.""",

            'pericia-inss': """Decreto 3.048/99 - Regulamento da Previd√™ncia Social:
‚Ä¢ Art. 305 - Per√≠cia m√©dica para concess√£o de benef√≠cios
‚Ä¢ Art. 306 - Revis√£o de benef√≠cios por incapacidade
‚Ä¢ Art. 101 - Cessa√ß√£o de aux√≠lio-doen√ßa

CRIT√âRIO M√âDICO: Reavalia√ß√£o da capacidade laboral conforme evolu√ß√£o cl√≠nica.""",

            'laudo-juridico': """C√≥digo de Processo Civil - Art. 156 e seguintes:
‚Ä¢ Prova pericial quando exame depender de conhecimento t√©cnico
‚Ä¢ Laudo pericial como meio de prova em processos

CRIT√âRIO M√âDICO: Avalia√ß√£o m√©dica, danos √† sa√∫de e impacto funcional."""
        }
        
        return fundamentacoes.get(beneficio, 
            "Legisla√ß√£o previdenci√°ria e trabalhista aplic√°vel conforme caso espec√≠fico.")

    def _get_criterios_especificos_beneficio(self, beneficio: str) -> str:
        """Obter crit√©rios espec√≠ficos para cada benef√≠cio"""
        
        criterios = {
            'auxilio-doenca': "Incapacidade tempor√°ria com progn√≥stico de recupera√ß√£o",
            'auxilio-acidente': "Sequela permanente com redu√ß√£o da capacidade laboral",
            'aposentadoria-invalidez': "Incapacidade total e permanente para qualquer trabalho", 
            'bpc-loas': "Defici√™ncia de longo prazo com impedimento social",
            'isencao-ir': "Doen√ßa grave especificada em lei",
            'pericia-inss': "Reavalia√ß√£o m√©dica conforme evolu√ß√£o",
            'laudo-juridico': "Avalia√ß√£o m√©dica e danos comprovados"
        }
        
        return criterios.get(beneficio, "Crit√©rios m√©dicos aplic√°veis ao caso")

# ============================================================================
# CLASSIFICADOR DE CONTEXTO SIMPLES
# ============================================================================

class SimpleContextClassifier:
    """Classificador inteligente de benef√≠cios e per√≠cias m√©dicas"""
    
    def __init__(self):
        self.benefit_keywords = {
            "auxilio-doenca": [
                "auxilio doenca", "aux√≠lio doen√ßa", "auxilio-doenca", "n√£o consigo trabalhar", 
                "incapacidade tempor√°ria", "afastamento", "inss", "previd√™ncia",
                "voltarei a trabalhar", "tratamento", "recupera√ß√£o", "preciso auxilio",
                "preciso aux√≠lio", "b31", "benef√≠cio doen√ßa", "afastamento m√©dico"
            ],
            "aposentadoria-invalidez": [
                "aposentadoria", "invalidez", "permanente", "nunca mais trabalhar",
                "incapacidade permanente", "sequela", "irrevers√≠vel", "definitivo",
                "n√£o tem cura", "cr√¥nico", "degenerativo"
            ],
            "bpc-loas": [
                "bpc", "loas", "beneficio continuado", "benef√≠cio continuado", "vida independente", 
                "renda familiar", "sal√°rio m√≠nimo", "assist√™ncia social",
                "defici√™ncia", "idoso", "vulnerabilidade social", "preciso bpc",
                "preciso loas", "deficiente", "renda baixa", "sem renda"
            ],
            "auxilio-acidente": [
                "acidente trabalho", "auxilio acidente", "aux√≠lio acidente", "auxilio-acidente",
                "sequela acidente", "acidente laboral", "obra", "m√°quina", "ferramenta",
                "cat", "comunica√ß√£o acidente", "b91", "acidente de trabalho",
                "les√£o trabalho", "preciso auxilio acidente"
            ],
            "isencao-ir": [
                "c√¢ncer", "cancer", "tumor", "neoplasia", "quimioterapia",
                "radioterapia", "isencao", "isen√ß√£o", "imposto renda",
                "oncologia", "carcinoma"
            ],
            "pericia-inss": [
                "per√≠cia", "pericia", "m√©dico perito", "junta m√©dica",
                "revis√£o benef√≠cio", "cessa√ß√£o", "reavalia√ß√£o"
            ],
            "laudo-juridico": [
                "justi√ßa", "processo", "a√ß√£o judicial", "advogado",
                "danos morais", "responsabilidade", "indeniza√ß√£o"
            ]
        }
        
        self.specialty_keywords = {
            "Psiquiatria": ["depressao", "depress√£o", "ansiedade", "panico", "p√¢nico", "bipolar", 
                           "esquizofrenia", "transtorno", "psiqui√°trico", "mental", "fluoxetina", 
                           "sertralina", "antidepressivo", "fracassada", "tristeza"],
            "Ortopedia": ["coluna", "fratura", "carregar peso", "dor nas costas", "pedreiro", "osso", 
                         "articula√ß√£o", "lombar", "cervical", "tor√°cica", "joelho", "ombro", "punho"],
            "Cardiologia": ["coracao", "cora√ß√£o", "infarto", "pressao alta", "press√£o alta", "cardiopatia", 
                           "arritmia", "hipertens√£o", "angina", "sopro"],
            "Neurologia": ["avc", "derrame", "parkinson", "epilepsia", "neurologico", "neurol√≥gico", 
                          "convuls√£o", "tremor", "paralisia"],
            "Oncologia": ["cancer", "c√¢ncer", "tumor", "neoplasia", "quimioterapia", "radioterapia", 
                         "oncologia", "carcinoma", "met√°stase", "biopsia"],
            "Otorrinolaringologia": ["perda auditiva", "surdez", "ouvido", "labirintite", "audi√ß√£o", 
                                   "escutar", "auditivo"],
            "Cl√≠nica Geral": ["geral", "clinico", "cl√≠nico"]
        }
        
        # Crit√©rios m√©dicos para classifica√ß√£o de benef√≠cios
        self.medical_criteria = {
            "auxilio-doenca": {
                "condicoes": ["tempor√°ria", "trat√°vel", "revers√≠vel", "aguda"],
                "limitacoes": ["parcial", "tempor√°ria", "com tratamento"],
                "prognostico": ["favor√°vel", "recupera√ß√£o", "melhora"]
            },
            "aposentadoria-invalidez": {
                "condicoes": ["permanente", "irrevers√≠vel", "degenerativa", "terminal"],
                "limitacoes": ["total", "permanente", "irrevers√≠vel"],
                "prognostico": ["reservado", "sem recupera√ß√£o", "permanente"]
            },
            "bpc-loas": {
                "condicoes": ["defici√™ncia", "incapacidade social", "vulnerabilidade"],
                "limitacoes": ["vida independente", "atividades b√°sicas"],
                "prognostico": ["longo prazo", "assist√™ncia cont√≠nua"]
            },
            "auxilio-acidente": {
                "condicoes": ["sequela", "acidente trabalho", "les√£o ocupacional"],
                "limitacoes": ["redu√ß√£o capacidade", "limita√ß√£o espec√≠fica"],
                "prognostico": ["estabilizado", "sequela permanente"]
            }
        }
    
    def classify_context(self, patient_info: str, transcription: str, documents_text: str = "") -> Dict[str, Any]:
        """Classifica√ß√£o inteligente de benef√≠cios e per√≠cias m√©dicas"""
        
        full_text = f"{patient_info} {transcription} {documents_text}".lower()
        
        print("üîç INICIANDO CLASSIFICA√á√ÉO INTELIGENTE DE BENEF√çCIOS")
        print(f"üìù Texto: {full_text[:100]}...")
        
        # 1. AN√ÅLISE POR PALAVRAS-CHAVE
        benefit_scores = {}
        matched_keywords = {}
        
        for benefit, keywords in self.benefit_keywords.items():
            score = 0
            matches = []
            for keyword in keywords:
                if keyword in full_text:
                    score += 1
                    matches.append(keyword)
            if score > 0:
                benefit_scores[benefit] = score
                matched_keywords[benefit] = matches
        
        # 2. AN√ÅLISE POR CRIT√âRIOS M√âDICOS
        medical_scores = self._analyze_medical_criteria(full_text)
        
        # 3. AN√ÅLISE ESPEC√çFICA POR CONDI√á√ÉO
        condition_benefit = self._classify_by_medical_condition(full_text)
        
        # 4. AN√ÅLISE POR IDADE E PERFIL
        age_benefit = self._classify_by_age_profile(patient_info, full_text)
        
        # 5. COMBINA√á√ÉO INTELIGENTE DOS RESULTADOS
        final_benefit = self._combine_classification_results(
            benefit_scores, medical_scores, condition_benefit, age_benefit, full_text
        )
        
        # 6. DETECTAR ESPECIALIDADE
        specialty_scores = {}
        for specialty, keywords in self.specialty_keywords.items():
            score = sum(1 for keyword in keywords if keyword in full_text)
            if score > 0:
                specialty_scores[specialty] = score
        
        detected_specialty = max(specialty_scores.items(), key=lambda x: x[1])[0] if specialty_scores else "Cl√≠nica Geral"
        
        # 7. CALCULAR CONFIAN√áA
        confidence = self._calculate_classification_confidence(benefit_scores, medical_scores, final_benefit)
        
        # 8. GERAR JUSTIFICATIVA
        justificativa = self._generate_benefit_justification(final_benefit, matched_keywords.get(final_benefit, []), full_text)
        
        print(f"üéØ RESULTADO: {final_benefit}")
        print(f"‚öïÔ∏è Especialidade: {detected_specialty}")
        print(f"üìä Confian√ßa: {confidence:.2f}")
        print(f"üí° Justificativa: {justificativa}")
        
        return {
            'main_context': f"{detected_specialty}_{final_benefit}",
            'main_benefit': final_benefit,
            'detected_specialty': detected_specialty,
            'confidence': confidence,
            'matched_keywords': matched_keywords.get(final_benefit, []),
            'justificativa': justificativa,
            'alternative_benefits': list(benefit_scores.keys())[:3],
            'medical_analysis': medical_scores,
            'condition_analysis': condition_benefit,
            'age_analysis': age_benefit
        }
    
    def _analyze_medical_criteria(self, text: str) -> Dict[str, float]:
        """Analisar crit√©rios m√©dicos para classifica√ß√£o de benef√≠cios"""
        
        medical_scores = {}
        
        for benefit, criteria in self.medical_criteria.items():
            score = 0.0
            total_criteria = 0
            
            for category, terms in criteria.items():
                for term in terms:
                    total_criteria += 1
                    if term in text:
                        score += 1.0
            
            if total_criteria > 0:
                medical_scores[benefit] = score / total_criteria
        
        return medical_scores
    
    def _classify_by_medical_condition(self, text: str) -> str:
        """Classificar benef√≠cio baseado na condi√ß√£o m√©dica espec√≠fica"""
        
        # Condi√ß√µes que indicam aposentadoria por invalidez
        invalidez_conditions = [
            "avc", "derrame", "parkinson", "alzheimer", "esclerose m√∫ltipla",
            "c√¢ncer terminal", "tumor maligno", "insufici√™ncia renal cr√¥nica",
            "cardiopatia grave", "sequela grave", "tetraplegia", "paraplegia"
        ]
        
        # Condi√ß√µes que indicam aux√≠lio-doen√ßa
        auxilio_conditions = [
            "depress√£o", "ansiedade", "fratura", "cirurgia", "tratamento",
            "fisioterapia", "recupera√ß√£o", "reabilita√ß√£o"
        ]
        
        # Condi√ß√µes que indicam BPC/LOAS
        bpc_conditions = [
            "defici√™ncia mental", "defici√™ncia f√≠sica", "autismo", "s√≠ndrome de down",
            "cegueira", "surdez", "paralisia cerebral"
        ]
        
        # Condi√ß√µes relacionadas a acidente
        acidente_conditions = [
            "acidente trabalho", "queda", "m√°quina", "ferramenta", "obra",
            "les√£o ocupacional", "cat"
        ]
        
        # Condi√ß√µes oncol√≥gicas
        cancer_conditions = [
            "c√¢ncer", "tumor", "neoplasia", "quimioterapia", "radioterapia",
            "oncologia", "carcinoma", "met√°stase"
        ]
        
        if any(condition in text for condition in invalidez_conditions):
            return "aposentadoria-invalidez"
        elif any(condition in text for condition in cancer_conditions):
            return "isencao-ir"
        elif any(condition in text for condition in bpc_conditions):
            return "bpc-loas"
        elif any(condition in text for condition in acidente_conditions):
            return "auxilio-acidente"
        elif any(condition in text for condition in auxilio_conditions):
            return "auxilio-doenca"
        else:
            return "avaliacao-medica"
    
    def _classify_by_age_profile(self, patient_info: str, text: str) -> str:
        """Classificar baseado na idade e perfil do paciente"""
        
        # Extrair idade
        age_match = re.search(r'(\d+)\s*anos?', f"{patient_info} {text}")
        age = int(age_match.group(1)) if age_match else 0
        
        # Perfil por idade
        if age >= 65:
            if "renda" in text or "vulnerabilidade" in text:
                return "bpc-loas"
            else:
                return "aposentadoria-invalidez"
        elif age >= 55:
            if "permanente" in text or "irrevers√≠vel" in text:
                return "aposentadoria-invalidez"
            else:
                return "auxilio-doenca"
        elif age <= 25:
            if "defici√™ncia" in text or "desde nascimento" in text:
                return "bpc-loas"
            else:
                return "auxilio-doenca"
        else:
            return "auxilio-doenca"  # Idade produtiva padr√£o
    
    def _combine_classification_results(self, benefit_scores: Dict[str, int], 
                                      medical_scores: Dict[str, float],
                                      condition_benefit: str, age_benefit: str, 
                                      text: str) -> str:
        """Combinar resultados de diferentes an√°lises para classifica√ß√£o final"""
        
        # Pesos para cada tipo de an√°lise
        weights = {
            'keywords': 0.3,
            'medical': 0.4,
            'condition': 0.2,
            'age': 0.1
        }
        
        # Calcular pontua√ß√£o final para cada benef√≠cio
        final_scores = {}
        
        # Todos os benef√≠cios poss√≠veis
        all_benefits = set(benefit_scores.keys()) | set(medical_scores.keys()) | {condition_benefit, age_benefit}
        
        for benefit in all_benefits:
            score = 0.0
            
            # Pontua√ß√£o por palavras-chave (normalizada)
            if benefit in benefit_scores:
                max_keywords = max(benefit_scores.values()) if benefit_scores else 1
                score += weights['keywords'] * (benefit_scores[benefit] / max_keywords)
            
            # Pontua√ß√£o m√©dica
            if benefit in medical_scores:
                score += weights['medical'] * medical_scores[benefit]
            
            # Pontua√ß√£o por condi√ß√£o
            if benefit == condition_benefit:
                score += weights['condition']
            
            # Pontua√ß√£o por idade
            if benefit == age_benefit:
                score += weights['age']
            
            final_scores[benefit] = score
        
        # Ajustes espec√≠ficos baseados no contexto
        final_scores = self._apply_contextual_adjustments(final_scores, text)
        
        # Retornar benef√≠cio com maior pontua√ß√£o
        if final_scores:
            best_benefit = max(final_scores.items(), key=lambda x: x[1])[0]
            print(f"üìä Pontua√ß√µes finais: {final_scores}")
            return best_benefit
        else:
            return "avaliacao-medica"
    
    def _apply_contextual_adjustments(self, scores: Dict[str, float], text: str) -> Dict[str, float]:
        """Aplicar ajustes contextuais √†s pontua√ß√µes"""
        
        # Boost para condi√ß√µes espec√≠ficas
        if "permanente" in text or "irrevers√≠vel" in text:
            scores["aposentadoria-invalidez"] = scores.get("aposentadoria-invalidez", 0) + 0.3
        
        if "tempor√°rio" in text or "tratamento" in text:
            scores["auxilio-doenca"] = scores.get("auxilio-doenca", 0) + 0.2
        
        if "acidente" in text and "trabalho" in text:
            scores["auxilio-acidente"] = scores.get("auxilio-acidente", 0) + 0.4
        
        if "c√¢ncer" in text or "tumor" in text:
            scores["isencao-ir"] = scores.get("isencao-ir", 0) + 0.5
        
        if "renda familiar" in text or "vulnerabilidade" in text:
            scores["bpc-loas"] = scores.get("bpc-loas", 0) + 0.3
        
        if "per√≠cia" in text or "revis√£o" in text:
            scores["pericia-inss"] = scores.get("pericia-inss", 0) + 0.3
        
        return scores
    
    def _calculate_classification_confidence(self, benefit_scores: Dict[str, int],
                                           medical_scores: Dict[str, float],
                                           final_benefit: str) -> float:
        """Calcular confian√ßa da classifica√ß√£o"""
        
        confidence = 0.5  # Base
        
        # Aumentar confian√ßa se houve matches diretos
        if final_benefit in benefit_scores and benefit_scores[final_benefit] > 0:
            confidence += 0.2
        
        # Aumentar confian√ßa se houve matches m√©dicos
        if final_benefit in medical_scores and medical_scores[final_benefit] > 0:
            confidence += 0.2
        
        # Aumentar confian√ßa baseado no n√∫mero de indicadores
        total_indicators = sum(benefit_scores.values()) + len([s for s in medical_scores.values() if s > 0])
        if total_indicators >= 3:
            confidence += 0.1
        
        return min(confidence, 0.95)  # M√°ximo 95%
    
    def _generate_benefit_justification(self, benefit: str, keywords: List[str], text: str) -> str:
        """Gerar justificativa para a classifica√ß√£o do benef√≠cio"""
        
        justifications = {
            "auxilio-doenca": "Paciente apresenta condi√ß√£o tempor√°ria com possibilidade de recupera√ß√£o, compat√≠vel com afastamento previdenci√°rio tempor√°rio.",
            "aposentadoria-invalidez": "Quadro cl√≠nico sugere incapacidade permanente e irrevers√≠vel para qualquer atividade laboral.",
            "bpc-loas": "Condi√ß√£o indica necessidade de benef√≠cio assistencial por defici√™ncia ou vulnerabilidade social.",
            "auxilio-acidente": "Situa√ß√£o relacionada a acidente de trabalho com sequelas que reduzem a capacidade laboral.",
            "isencao-ir": "Condi√ß√£o oncol√≥gica que se enquadra nos crit√©rios para isen√ß√£o de imposto de renda.",
            "pericia-inss": "Caso requer avalia√ß√£o pericial para revis√£o ou reavalia√ß√£o de benef√≠cio existente.",
            "laudo-juridico": "Situa√ß√£o demanda documenta√ß√£o m√©dica para fins jur√≠dicos ou processuais."
        }
        
        base_justification = justifications.get(benefit, "Avalia√ß√£o m√©dica geral recomendada.")
        
        if keywords:
            keyword_text = ", ".join(keywords[:3])
            return f"{base_justification} Indicadores encontrados: {keyword_text}."
        
        return base_justification

# ============================================================================
# SERVI√áO PRINCIPAL MULTIMODAL AI
# ============================================================================

class MultimodalAIService:
    """Servi√ßo de IA Multimodal - Vers√£o Limpa e Completa"""
    
    def __init__(self):
        print("üè• Inicializando MultimodalAIService - Vers√£o Limpa...")
        
        try:
            self.openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            print("‚úÖ OpenAI configurado")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro OpenAI: {e}")
            self.openai_client = None
        
        # Usar geradores limpos
        self.document_generator = CleanLaudoGenerator()
        self.context_classifier = SimpleContextClassifier()
        self.cfm_checker = CFMComplianceChecker()
        self.extractor = UltraPreciseDataExtractor()
        
        print("‚úÖ Sistema LIMPO inicializado com sucesso")
    
    async def analyze_multimodal(self, patient_info: str, audio_bytes: bytes = None, image_bytes: bytes = None, documents: list = None, **kwargs) -> Dict[str, Any]:
        """An√°lise multimodal completa e limpa"""
        
        try:
            print("üß† An√°lise multimodal LIMPA iniciada")
            print(f"üìä Patient info: {patient_info}")
            
            # 1. TRANSCRI√á√ÉO DE √ÅUDIO
            transcription = ""
            if audio_bytes:
                transcription = await self._transcribe_audio_whisper(audio_bytes)
                print(f"üé§ Transcri√ß√£o: {transcription}")
            else:
                transcription = "Consulta baseada em informa√ß√µes textuais fornecidas"
            
            # 2. AN√ÅLISE DE DOCUMENTOS
            document_analysis = []
            if documents:
                for doc in documents:
                    doc_result = await self.analyze_documents(doc)
                    document_analysis.append(doc_result)
            
            # 3. EXTRA√á√ÉO DE DADOS PRECISOS
            dados_extraidos = self.extractor.extrair_dados_exatos(patient_info, transcription)
            
            # 4. CLASSIFICA√á√ÉO DE CONTEXTO
            classification = self.context_classifier.classify_context(patient_info, transcription)
            
            # 5. GERA√á√ÉO DE ANAMNESE
            dados_completos = {
                'patient_info': patient_info,
                'transcription': transcription,
                'beneficio': classification['main_benefit'],
                'especialidade': classification['detected_specialty']
            }
            
            anamnese = self.document_generator.gerar_anamnese_completa(dados_completos)
            
            # 6. GERA√á√ÉO DE LAUDO
            laudo = self.document_generator.gerar_laudo_completo(dados_completos)
            
            # 7. VERIFICA√á√ÉO CFM
            cfm_validation = self.cfm_checker.validate_telemedicine_scope(
                classification['main_benefit'], transcription
            )
            
            # 8. DETERMINAR BENEF√çCIO E ESPECIALIDADE
            beneficio = self._determinar_beneficio_adequado(transcription)
            especialidade = self._refinar_especialidade(dados_extraidos, transcription)
            cfm_compliance = self._check_cfm_compliance(dados_extraidos)
            
            print("‚úÖ An√°lise completa finalizada")
            
            return {
                "success": True,
                "status": "success",
                "transcription": transcription,
                "anamnese": anamnese,
                "laudo_medico": laudo,
                "dados_extraidos": dados_extraidos,
                "document_analysis": document_analysis,
                "context_analysis": classification,
                "especialidade": especialidade,
                "beneficio": beneficio,
                "cfm_compliant": cfm_validation['compliant'],
                "cfm_status": "‚úÖ Conforme CFM",
                "cfm_compliance": cfm_compliance,
                "confidence": self._calculate_confidence(dados_extraidos),
                "modalities_used": {
                    "text": bool(patient_info),
                    "audio": bool(audio_bytes),
                    "image": bool(image_bytes),
                    "documents": bool(documents)
                },
                "model": "Sistema M√©dico v8.0 - Vers√£o Limpa",
                "timestamp": self._get_timestamp()
            }
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise: {str(e)}")
            import traceback
            traceback.print_exc()
            
            return {
                "success": False,
                "status": "error",
                "error": str(e),
                "transcription": transcription if 'transcription' in locals() else "Erro na transcri√ß√£o",
                "anamnese": f"Erro durante an√°lise: {str(e)}",
                "laudo_medico": f"Erro durante gera√ß√£o: {str(e)}",
                "cfm_status": "‚ùå Erro",
                "timestamp": self._get_timestamp()
            }
    
    async def _transcribe_audio_whisper(self, audio_bytes: bytes) -> str:
        """Transcri√ß√£o usando Whisper OpenAI"""
        
        if not self.openai_client:
            # Simula√ß√£o para caso sem OpenAI
            if len(audio_bytes) > 100000:
                return "Doutora, eu sou pedreiro h√° 15 anos, sofri um acidente na obra, ca√≠ do andaime, fraturei a coluna. Preciso de um laudo m√©dico para aux√≠lio-doen√ßa do INSS. Eu n√£o consigo mais carregar peso, nem trabalhar em altura por causa do acidente."
            else:
                return "Paciente relata limita√ß√µes funcionais para o trabalho habitual."
        
        try:
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
                temp_audio.write(audio_bytes)
                temp_audio_path = temp_audio.name
            
            with open(temp_audio_path, "rb") as audio_file:
                transcript = self.openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="pt"
                )
            
            os.unlink(temp_audio_path)
            return transcript.text
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na transcri√ß√£o: {str(e)}")
            return f"[Erro na transcri√ß√£o] √Åudio processado: {len(audio_bytes)} bytes"
    
    async def analyze_documents(self, document_data: bytes) -> Dict[str, Any]:
        """An√°lise de documentos m√©dicos"""
        try:
            return {
                'status': 'success',
                'extracted_text': 'Documento m√©dico analisado com sucesso',
                'document_type': 'exame_medico',
                'confidence': 0.85
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'document_type': 'unknown'
            }
    
    def _gerar_anamnese_completa(self, dados: Dict[str, str], transcription: str) -> str:
        """Gerar anamnese m√©dica estruturada"""
        try:
            nome = dados.get('nome', 'Paciente')
            idade = dados.get('idade', 'N√£o informado')
            profissao = dados.get('profissao', 'N√£o informado')
            sexo = dados.get('sexo', 'N√£o informado')
            condicao = dados.get('condicao_medica', 'A definir')
            data_inicio = dados.get('data_inicio', 'N√£o informado')
            
            anamnese = f"""
ANAMNESE M√âDICA

IDENTIFICA√á√ÉO:
‚Ä¢ Nome: {nome}
‚Ä¢ Idade: {idade} anos
‚Ä¢ Sexo: {sexo}
‚Ä¢ Profiss√£o: {profissao}

QUEIXA PRINCIPAL:
{self._extrair_queixa_principal(transcription)}

SINTOMAS RELATADOS:
{dados.get('sintomas', 'Sintomas conforme relato m√©dico')}

HIST√ìRIA DA DOEN√áA ATUAL:
{condicao}. {data_inicio}.

HIST√ìRIA OCUPACIONAL:
Paciente exerce atividade como {profissao.lower()}. Relata limita√ß√µes funcionais relacionadas ao trabalho habitual.

LIMITA√á√ïES FUNCIONAIS:
{dados.get('limitacoes', 'Limita√ß√µes conforme relatado pelo paciente')}

OBSERVA√á√ïES CL√çNICAS:
{self._gerar_observacoes_clinicas(transcription)}
"""
            
            return anamnese.strip()
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar anamnese: {str(e)}")
            return f"Anamnese baseada nos dados fornecidos pelo paciente durante teleconsulta. Paciente relata {dados.get('condicao_medica', 'condi√ß√µes m√©dicas')} com impacto funcional."
    
    def _extrair_queixa_principal(self, transcription: str) -> str:
        """Extrair queixa principal da transcri√ß√£o"""
        text = transcription.lower()
        
        if 'fratura' in text and 'coluna' in text:
            return "Sequelas de fratura de coluna vertebral com limita√ß√£o funcional"
        elif 'acidente' in text:
            return "Sequelas de acidente com limita√ß√£o para atividades laborais"
        elif 'dor' in text:
            return "Quadro √°lgico com limita√ß√£o funcional"
        elif 'n√£o consigo' in text:
            return "Incapacidade funcional para atividades habituais"
        else:
            return "Limita√ß√£o funcional para exerc√≠cio da atividade laboral habitual"
    
    def _gerar_observacoes_clinicas(self, transcription: str) -> str:
        """Gerar observa√ß√µes cl√≠nicas baseadas na transcri√ß√£o"""
        observacoes = []
        text = transcription.lower()
        
        if 'inss' in text:
            observacoes.append("Solicita√ß√£o para fins previdenci√°rios")
        
        if 'n√£o consigo' in text:
            observacoes.append("Paciente relata incapacidade funcional significativa")
        
        if 'medico' in text or 'laudo' in text:
            observacoes.append("Solicita√ß√£o de documenta√ß√£o m√©dica")
        
        if not observacoes:
            observacoes.append("Teleconsulta realizada conforme protocolo")
        
        return ". ".join(observacoes) + "."
    
    def _determinar_beneficio_adequado(self, transcription: str) -> str:
        """Determinar tipo de benef√≠cio mais adequado"""
        text = transcription.lower()
        
        if 'auxilio-doenca' in text or 'aux√≠lio doen√ßa' in text:
            return 'auxilio-doenca'
        elif 'bpc' in text or 'loas' in text:
            return 'bpc'
        elif 'aposentadoria' in text:
            return 'aposentadoria-invalidez'
        else:
            return 'avaliacao-medica'
    
    def _refinar_especialidade(self, dados: Dict[str, str], transcription: str) -> str:
        """Refinar especialidade baseada em an√°lise detalhada"""
        text = transcription.lower()
        
        # An√°lise por sintomas/condi√ß√µes espec√≠ficas
        if any(word in text for word in ['fratura', 'coluna', 'osso', 'articula√ß√£o']):
            return 'Ortopedia'
        elif any(word in text for word in ['cora√ß√£o', 'card√≠aco', 'press√£o']):
            return 'Cardiologia'
        elif any(word in text for word in ['depress√£o', 'ansiedade', 'psiqui√°trico']):
            return 'Psiquiatria'
        elif any(word in text for word in ['auditiva', 'ouvido', 'escutar']):
            return 'Otorrinolaringologia'
        elif any(word in text for word in ['neurologico', 'neurol√≥gico', 'nervo']):
            return 'Neurologia'
        else:
            return 'Cl√≠nica Geral'
    
    def _check_cfm_compliance(self, dados: Dict[str, str]) -> str:
        """Verificar compliance CFM"""
        limitacoes = dados.get('limitacoes', '')
        if 'limita√ß√£o' in limitacoes.lower() or 'incapacidade' in limitacoes.lower():
            return "‚ö†Ô∏è Limita√ß√µes"
        return "‚úÖ Compliant"
    
    def _calculate_confidence(self, dados: Dict[str, str]) -> float:
        """Calcular confian√ßa da an√°lise"""
        score = 0.0
        total_fields = len(dados)
        
        for key, value in dados.items():
            if value and value != "N√£o informado" and value != "Conforme informado":
                score += 1.0
        
        confidence = (score / total_fields) if total_fields > 0 else 0.0
        return round(confidence, 2)
    
    def _get_timestamp(self) -> str:
        """Obter timestamp atual"""
        return datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # ============================================================================
    # M√âTODOS DE COMPATIBILIDADE
    # ============================================================================
    
    async def analyze_consultation_intelligent(self, audio_file, patient_info: str):
        """M√©todo de compatibilidade para an√°lise de consulta"""
        if hasattr(audio_file, 'read'):
            audio_file.seek(0)
            audio_bytes = audio_file.read()
            return await self.analyze_multimodal(patient_info, audio_bytes, None)
        else:
            return await self.analyze_multimodal(patient_info, audio_file, None)
    
    async def analyze_medical_data(self, patient_info: str, transcription: str, **kwargs) -> Dict[str, Any]:
        """M√©todo de compatibilidade para an√°lise de dados m√©dicos"""
        try:
            # Extrair dados precisos
            dados_extraidos = self.extractor.extrair_dados_exatos(patient_info, transcription)
            
            # Preparar dados para gera√ß√£o do laudo
            dados_completos = {
                'patient_info': patient_info,
                'transcription': transcription,
                'beneficio': kwargs.get('beneficio', 'avaliacao-medica'),
                'especialidade': dados_extraidos.get('especialidade', 'Cl√≠nica Geral')
            }
            
            # Gerar laudo m√©dico
            laudo = self.document_generator.gerar_laudo_completo(dados_completos)
            
            return {
                'status': 'success',
                'dados_extraidos': dados_extraidos,
                'laudo_medico': laudo,
                'timestamp': self._get_timestamp()
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'timestamp': self._get_timestamp()
            }

# ============================================================================
# INST√ÇNCIAS GLOBAIS E EXPORTS
# ============================================================================

# Inst√¢ncia principal para compatibilidade
multimodal_ai_service = MultimodalAIService()

# Exports para compatibilidade com imports existentes
__all__ = [
    'MultimodalAIService', 
    'multimodal_ai_service',
    'UltraPreciseDataExtractor',
    'CleanLaudoGenerator',
    'SimpleContextClassifier',
    'CFMComplianceChecker'
]



# ============================================================================
# TESTE B√ÅSICO DO SISTEMA
# ============================================================================

if __name__ == "__main__":
    # Teste b√°sico do extrator
    extractor = UltraPreciseDataExtractor()
    
    patient_info = "joao 45"
    transcription = "Doutora, eu sou pedreiro h√° 15 anos, sofri um acidente na obra, ca√≠ do andaime, fraturei a coluna. Preciso de um laudo m√©dico para aux√≠lio-doen√ßa do INSS. Eu n√£o consigo mais carregar peso, nem trabalhar em altura por causa do acidente."
    
    print("\n=== TESTE DO SISTEMA ===")
    dados = extractor.extrair_dados_exatos(patient_info, transcription)
    
    print("\nüìä DADOS EXTRA√çDOS:")
    for key, value in dados.items():
        print(f"   {key.upper()}: {value}")
    
    print("\n‚úÖ Sistema funcionando corretamente!")
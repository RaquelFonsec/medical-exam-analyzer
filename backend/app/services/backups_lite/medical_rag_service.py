from llama_index.core import VectorStoreIndex, Document, Settings
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.llms.openai import OpenAI
from llama_index.core.node_parser import SentenceSplitter
from typing import List, Dict, Any
import os

class MedicalRAGService:
    def __init__(self):
        print("üìö Inicializando MedicalRAGService...")
        self.setup_llama_index()
        self.load_medical_knowledge_base()
        print("‚úÖ MedicalRAGService inicializado")
        
    def setup_llama_index(self):
        """Configura LlamaIndex com embeddings m√©dicos"""
        try:
            # Configurar embeddings e LLM
            Settings.embed_model = OpenAIEmbedding(
                model="text-embedding-3-small",
                api_key=os.getenv("OPENAI_API_KEY")
            )
            
            Settings.llm = OpenAI(
                model="gpt-4o-mini",
                api_key=os.getenv("OPENAI_API_KEY"),
                temperature=0.1
            )
            
            # Parser para chunks menores e mais precisos
            Settings.node_parser = SentenceSplitter(
                chunk_size=512,
                chunk_overlap=50
            )
            
            print("‚úÖ LlamaIndex configurado com embeddings OpenAI")
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar LlamaIndex: {e}")
            print("‚ö†Ô∏è Funcionando sem RAG - usando conhecimento b√°sico")
    
    def load_medical_knowledge_base(self):
        """Carrega base de conhecimento m√©dico estruturada"""
        try:
            medical_documents = [
                # Documentos sobre BPC/LOAS
                Document(text="""
                CRIT√âRIOS BPC/LOAS Lei 8.742/93:
                1. Impedimento de longo prazo (m√≠nimo 2 anos)
                2. Natureza f√≠sica, mental, intelectual ou sensorial
                3. Restri√ß√£o para participa√ß√£o social plena
                4. Vida independente comprometida
                5. Necessidade de cuidador para atividades b√°sicas
                
                Atividades B√°sicas de Vida Di√°ria (ABVDs):
                - Alimenta√ß√£o: capacidade de levar alimento √† boca
                - Higiene pessoal: banho, escova√ß√£o, cuidados √≠ntimos
                - Vestu√°rio: vestir e despir roupas
                - Mobilidade: locomo√ß√£o, transfer√™ncias
                - Controle esfincteriano: controle de bexiga e intestino
                
                CRIT√âRIOS DE AVALIA√á√ÉO BPC:
                - Impedimento deve ser de longo prazo (m√≠nimo 2 anos)
                - Deve restringir participa√ß√£o social e autonomia
                - Foco em vida independente, n√£o capacidade laboral
                - Necessidade de cuidador √© indicativo importante
                """, metadata={"tipo": "bpc", "categoria": "criterios"}),
                
                # Documentos sobre Incapacidade Laboral
                Document(text="""
                INCAPACIDADE LABORAL INSS:
                1. Incapacidade para fun√ß√£o habitual
                2. Correla√ß√£o com atividade profissional espec√≠fica
                3. Limita√ß√µes biomec√¢nicas documentadas
                4. Impossibilidade de adapta√ß√£o
                
                Classifica√ß√£o:
                - Tempor√°ria: possibilidade de recupera√ß√£o
                - Permanente: sequelas definitivas
                - Parcial: algumas fun√ß√µes preservadas
                - Total: impossibilidade completa
                
                Profiss√µes de risco:
                - Pedreiro: levantamento peso, posturas for√ßadas, trabalho em altura
                - Operador m√°quinas: movimentos repetitivos, posturas fixas
                - Auxiliar produ√ß√£o: esfor√ßo f√≠sico moderado/pesado
                - Secret√°ria: movimentos repetitivos, postura sentada prolongada
                - Motorista: postura fixa, vibra√ß√£o, estresse
                
                AVALIA√á√ÉO FUNCIONAL PARA TRABALHO:
                - Capacidade de carregar peso
                - Posturas prolongadas (em p√©, sentado)
                - Movimentos repetitivos
                - Alcance de membros superiores
                - Coordena√ß√£o motora
                """, metadata={"tipo": "incapacidade", "categoria": "criterios"}),
                
                # Documentos sobre sintomas e limita√ß√µes
                Document(text="""
                CORRELA√á√ÉO SINTOMAS-LIMITA√á√ïES:
                
                Dor no ombro/bra√ßo:
                - Limita√ß√£o: levantamento acima da cabe√ßa
                - Impacto: carregar peso, alcan√ßar objetos altos
                - Profiss√µes afetadas: pedreiro, pintor, eletricista
                
                Sequelas AVC:
                - Hemiparesia: fraqueza um lado do corpo
                - Limita√ß√µes AVDs: vestir, banho, alimenta√ß√£o
                - Depend√™ncia: necessita cuidador
                - Impacto BPC: vida independente comprometida
                
                S√≠ndrome manguito rotador:
                - Dor e limita√ß√£o movimento ombro
                - Impossibilidade carregar peso
                - Atividades comprometidas: trabalho bra√ßos elevados
                - CID-10: M75.1
                
                Dor lombar cr√¥nica:
                - Limita√ß√£o: flex√£o, rota√ß√£o do tronco
                - Impacto: levantar peso, permanecer em p√©
                - Profiss√µes afetadas: pedreiro, oper√°rio, faxineira
                
                Les√µes de punho/m√£o:
                - Limita√ß√£o: preens√£o, for√ßa de pin√ßa
                - Impacto: digita√ß√£o, uso de ferramentas
                - Profiss√µes afetadas: secret√°ria, operador
                """, metadata={"tipo": "sintomas", "categoria": "correlacoes"}),
                
                # Documentos sobre Isen√ß√£o IR
                Document(text="""
                ISEN√á√ÉO IMPOSTO DE RENDA - Lei 7.713/88:
                
                Doen√ßas graves eleg√≠veis:
                - Neoplasia maligna (c√¢ncer)
                - Cardiopatia grave
                - Doen√ßa de Parkinson
                - Esclerose m√∫ltipla
                - Nefropatia grave
                - Hepatopatia grave
                - Cegueira
                - Hansen√≠ase
                - Paralisia irrevers√≠vel e incapacitante
                - Tuberculose ativa
                - AIDS/HIV
                - Fibrose c√≠stica
                
                CRIT√âRIOS:
                - Diagn√≥stico confirmado por m√©dico
                - Doen√ßa deve estar na lista legal
                - Tempo da doen√ßa documentado
                - Corresponder ao rol de doen√ßas graves
                """, metadata={"tipo": "isencao_ir", "categoria": "criterios"}),
                
                # Documentos sobre Aux√≠lio-Acidente
                Document(text="""
                AUX√çLIO-ACIDENTE PREVIDENCI√ÅRIO:
                
                Caracter√≠sticas:
                - Redu√ß√£o da capacidade laborativa
                - N√£o √© incapacidade total
                - Permite exerc√≠cio parcial da atividade
                - Impacto econ√¥mico na capacidade produtiva
                
                Crit√©rios:
                - Sequela definitiva de acidente de trabalho
                - Redu√ß√£o permanente da capacidade
                - Capacidade residual para trabalho
                - Necessidade de adapta√ß√µes
                
                Avalia√ß√£o:
                - Percentual de redu√ß√£o da capacidade
                - Tipo de limita√ß√£o funcional
                - Possibilidade de readapta√ß√£o
                - Impacto na produtividade
                """, metadata={"tipo": "auxilio_acidente", "categoria": "criterios"})
            ]
            
            # Criar √≠ndice vetorial
            self.index = VectorStoreIndex.from_documents(medical_documents)
            self.query_engine = self.index.as_query_engine(
                similarity_top_k=3,
                response_mode="compact"
            )
            
            print("‚úÖ Base de conhecimento m√©dico carregada (5 tipos de per√≠cia)")
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar base de conhecimento: {e}")
            # Fallback: funcionamento sem RAG
            self.index = None
            self.query_engine = None
            print("‚ö†Ô∏è Funcionando sem RAG - usando extra√ß√£o direta")
    
    def retrieve_relevant_medical_info(self, entities: Dict[str, Any]) -> Dict[str, Any]:
        """Recupera informa√ß√µes m√©dicas relevantes baseadas nas entidades extra√≠das"""
        
        if not self.query_engine:
            return self._fallback_knowledge_retrieval(entities)
        
        try:
            # Construir query baseada nas entidades
            query_parts = []
            
            if entities.get('sintomas_relatados'):
                sintomas = [s.get('sintoma', '') for s in entities['sintomas_relatados'] if isinstance(s, dict)]
                if sintomas:
                    query_parts.append(f"sintomas: {', '.join(sintomas)}")
            
            if entities.get('limitacoes_funcionais'):
                limitacoes = [l.get('atividade_limitada', '') for l in entities['limitacoes_funcionais'] if isinstance(l, dict)]
                if limitacoes:
                    query_parts.append(f"limita√ß√µes: {', '.join(limitacoes)}")
            
            if entities.get('dados_pessoais', {}).get('profissao'):
                profissao = entities['dados_pessoais']['profissao']
                query_parts.append(f"profiss√£o: {profissao}")
            
            # Query estruturada
            if query_parts:
                query = f"Informa√ß√µes m√©dicas sobre: {' | '.join(query_parts)}"
            else:
                query = "Crit√©rios m√©dicos gerais para per√≠cia"
            
            # Recuperar conhecimento relevante
            response = self.query_engine.query(query)
            
            # Extrair documentos fonte
            source_nodes = response.source_nodes if hasattr(response, 'source_nodes') else []
            
            return {
                'retrieved_knowledge': str(response),
                'source_documents': [node.node.text for node in source_nodes],
                'relevance_score': self._calculate_relevance_score(entities, str(response)),
                'query_used': query,
                'rag_available': True
            }
            
        except Exception as e:
            print(f"‚ùå Erro na recupera√ß√£o RAG: {e}")
            return self._fallback_knowledge_retrieval(entities)
    
    def _fallback_knowledge_retrieval(self, entities: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback quando RAG n√£o est√° dispon√≠vel"""
        
        # Conhecimento b√°sico sem RAG
        basic_knowledge = """
        Crit√©rios b√°sicos para avalia√ß√£o m√©dica:
        
        BPC/LOAS: Impedimento de longo prazo que compromete vida independente
        Incapacidade Laboral: Impossibilidade de exercer fun√ß√£o habitual
        Isen√ß√£o IR: Doen√ßas graves conforme Lei 7.713/88
        Aux√≠lio-Acidente: Redu√ß√£o permanente da capacidade laborativa
        
        Avalia√ß√£o sempre deve considerar:
        - Limita√ß√µes funcionais espec√≠ficas
        - Correla√ß√£o com atividade profissional
        - Necessidade de cuidador (para BPC)
        - Capacidade de trabalho (para INSS)
        """
        
        return {
            'retrieved_knowledge': basic_knowledge,
            'source_documents': ['Conhecimento m√©dico b√°sico'],
            'relevance_score': 0.5,
            'query_used': 'Fallback - conhecimento b√°sico',
            'rag_available': False
        }
    
    def _calculate_relevance_score(self, entities: Dict, retrieved_text: str) -> float:
        """Calcula score de relev√¢ncia entre entidades e conhecimento recuperado"""
        entity_terms = []
        
        # Extrair termos das entidades
        if entities.get('sintomas_relatados'):
            for sintoma in entities['sintomas_relatados']:
                if isinstance(sintoma, dict) and 'sintoma' in sintoma:
                    entity_terms.append(sintoma['sintoma'])
        
        if entities.get('limitacoes_funcionais'):
            for limitacao in entities['limitacoes_funcionais']:
                if isinstance(limitacao, dict) and 'atividade_limitada' in limitacao:
                    entity_terms.append(limitacao['atividade_limitada'])
        
        if entities.get('dados_pessoais', {}).get('profissao'):
            entity_terms.append(entities['dados_pessoais']['profissao'])
        
        # Calcular matches
        if not entity_terms:
            return 0.5  # Score neutro se n√£o h√° termos
        
        retrieved_lower = retrieved_text.lower()
        matches = sum(1 for term in entity_terms if term.lower() in retrieved_lower)
        
        relevance = matches / len(entity_terms)
        
        # Bonus por termos m√©dicos espec√≠ficos no texto recuperado
        medical_terms = ['limita√ß√£o', 'incapacidade', 'diagn√≥stico', 'tratamento', 'sintoma']
        medical_matches = sum(1 for term in medical_terms if term in retrieved_lower)
        medical_bonus = min(0.3, medical_matches * 0.1)
        
        return min(1.0, relevance + medical_bonus)
    
    def get_context_specific_knowledge(self, context_type: str) -> str:
        """Retorna conhecimento espec√≠fico para cada contexto"""
        
        context_knowledge = {
            'bpc': """
            BPC/LOAS - Crit√©rios Lei 8.742/93:
            - Impedimento de longo prazo (m√≠nimo 2 anos)
            - Natureza f√≠sica, mental, intelectual ou sensorial
            - Restri√ß√£o para participa√ß√£o social e vida independente
            - Necessidade de cuidador para atividades b√°sicas
            - Foco: autonomia e participa√ß√£o social
            """,
            
            'incapacidade': """
            Incapacidade Laboral INSS:
            - Impossibilidade para fun√ß√£o habitual
            - Correla√ß√£o com atividade profissional espec√≠fica
            - Limita√ß√µes biomec√¢nicas documentadas
            - Avalia√ß√£o de capacidade residual
            - Foco: capacidade para o trabalho
            """,
            
            'isencao_ir': """
            Isen√ß√£o Imposto de Renda - Lei 7.713/88:
            - Doen√ßas graves espec√≠ficas da legisla√ß√£o
            - Diagn√≥stico confirmado por m√©dico
            - Tempo da doen√ßa documentado
            - Correspond√™ncia com rol legal
            - Foco: doen√ßa grave comprovada
            """,
            
            'auxilio_acidente': """
            Aux√≠lio-Acidente:
            - Redu√ß√£o permanente da capacidade laborativa
            - Sequela de acidente de trabalho
            - Capacidade residual preservada
            - Possibilidade de exerc√≠cio parcial
            - Foco: redu√ß√£o, n√£o incapacidade total
            """,
            
            'pericia': """
            Per√≠cia M√©dica Legal:
            - Nexo causal entre evento e sequela
            - Grau de comprometimento
            - An√°lise de documentos m√©dicos
            - Avalia√ß√£o funcional objetiva
            - Foco: rela√ß√£o causal e dano
            """
        }
        
        return context_knowledge.get(context_type, context_knowledge['incapacidade'])

# Inst√¢ncia global
medical_rag = MedicalRAGService()

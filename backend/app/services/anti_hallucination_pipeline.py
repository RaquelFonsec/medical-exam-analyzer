from .fact_extractor_service import fact_extractor
from .output_validator_service import output_validator
from typing import Dict, Any
import openai
import os
from datetime import datetime

class AntiHallucinationPipeline:
    """Pipeline m√©dico anti-alucina√ß√£o com precis√£o cir√∫rgica"""
    
    def __init__(self):
        print("üè• Inicializando AntiHallucinationPipeline - Precis√£o M√©dica M√°xima")
        self.openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        # Templates seguros para casos de baixa completude
        self.safe_templates = self._load_safe_templates()
        
    def _load_safe_templates(self):
        """Templates m√©dicos seguros para dados incompletos"""
        return {
            'anamnese_minima': """
## üìã 1. IDENTIFICA√á√ÉO DO PACIENTE
- Nome: {nome}
- Idade: {idade}
- Profiss√£o: {profissao}
- Data da consulta: {data}

## üó£Ô∏è 2. QUEIXA PRINCIPAL
{queixa_principal}

## üìñ 3. HIST√ìRIA DA DOEN√áA ATUAL (HDA)
{historia_atual}

## üè• 4. ANTECEDENTES PESSOAIS E FAMILIARES RELEVANTES
[N√£o coletados na consulta de telemedicina]

## üìÑ 5. DOCUMENTA√á√ÉO APRESENTADA
[Conforme documenta√ß√£o apresentada pelo paciente]

## üé• 6. EXAME CL√çNICO (ADAPTADO PARA TELEMEDICINA)
[Consulta realizada por telemedicina - limita√ß√µes inerentes √† modalidade]

## ‚öïÔ∏è 7. AVALIA√á√ÉO M√âDICA (ASSESSMENT)
{avaliacao_contexto}

**MODALIDADE:** Telemedicina
**DATA:** {data}
**OBSERVA√á√ÉO:** Anamnese baseada exclusivamente no relato do paciente
""",
            
            'laudo_minimo': """
## üè• LAUDO M√âDICO - {contexto}

### üìã IDENTIFICA√á√ÉO
- Paciente: {nome}
- Data: {data}
- Modalidade: Telemedicina

### 1. üìñ HIST√ìRIA CL√çNICA
{historia_clinica_resumida}

### 2. üö´ LIMITA√á√ÉO FUNCIONAL
{limitacoes_relatadas}

### 3. üî¨ EXAMES (Quando Houver)
{exames_mencionados}

### 4. üíä TRATAMENTO
{tratamentos_citados}

### 5. üîÆ PROGN√ìSTICO
{prognostico_contextual}

### 6. ‚öñÔ∏è CONCLUS√ÉO - {contexto}
{conclusao_especifica}

**OBSERVA√á√ÉO:** Laudo baseado exclusivamente em consulta de telemedicina e relato do paciente
**DATA:** {data}
"""
        }
    
    async def analyze_with_maximum_precision(self, patient_info: str, transcription: str, context_type: str) -> Dict[str, Any]:
        """An√°lise m√©dica com precis√£o m√°xima - Pipeline completo"""
        
        pipeline_result = {
            'stage': 'initialization',
            'safety_level': 'UNKNOWN',
            'precision_score': 0.0,
            'pipeline_path': []
        }
        
        try:
            # ETAPA 1: EXTRA√á√ÉO FACTUAL RIGOROSA
            print("üîç ETAPA 1: Extra√ß√£o de fatos expl√≠citos...")
            explicit_facts = fact_extractor.extract_explicit_facts_only(transcription, patient_info)
            pipeline_result['stage'] = 'fact_extraction'
            pipeline_result['pipeline_path'].append('fact_extraction_completed')
            
            # ETAPA 2: AVALIA√á√ÉO DE COMPLETUDE
            print("üìä ETAPA 2: Avaliando completude dos dados...")
            completeness = explicit_facts['completude_dados']
            pipeline_result['data_completeness'] = completeness
            
            if completeness['level'] == 'BAIXA':
                # CAMINHO SEGURO: Template fixo
                print("üõ°Ô∏è DADOS INSUFICIENTES: Usando template seguro")
                result = await self._generate_safe_template_based(explicit_facts, context_type)
                pipeline_result['pipeline_path'].append('safe_template_used')
                pipeline_result['safety_level'] = 'MAXIMUM_SAFE'
                
            else:
                # CAMINHO INTELIGENTE: IA controlada + valida√ß√£o
                print("üß† DADOS SUFICIENTES: Usando IA controlada + valida√ß√£o")
                
                # ETAPA 3: GERA√á√ÉO CONTROLADA
                initial_generation = await self._generate_controlled_content(
                    explicit_facts, context_type
                )
                pipeline_result['pipeline_path'].append('controlled_generation_completed')
                
                # ETAPA 4: VALIDA√á√ÉO RIGOROSA
                print("üõ°Ô∏è ETAPA 4: Valida√ß√£o anti-alucina√ß√£o...")
                validation_result = await output_validator.validate_against_source_comprehensive(
                    initial_generation['anamnese'], explicit_facts, transcription
                )
                
                pipeline_result['validation_result'] = validation_result
                
                if validation_result['has_hallucinations']:
                    # CORRE√á√ÉO AUTOM√ÅTICA
                    print("‚ö†Ô∏è ALUCINA√á√ïES DETECTADAS: Aplicando corre√ß√µes...")
                    corrected_result = await self._apply_automatic_corrections(
                        initial_generation, validation_result, explicit_facts, context_type
                    )
                    pipeline_result['pipeline_path'].append('corrections_applied')
                    pipeline_result['safety_level'] = 'CORRECTED_SAFE'
                    result = corrected_result
                    
                else:
                    # APROVADO NA VALIDA√á√ÉO
                    print("‚úÖ VALIDA√á√ÉO APROVADA: Conte√∫do seguro")
                    pipeline_result['pipeline_path'].append('validation_passed')
                    pipeline_result['safety_level'] = 'VALIDATED_SAFE'
                    result = initial_generation
            
            # ETAPA 5: C√ÅLCULO DE PRECIS√ÉO FINAL
            pipeline_result['precision_score'] = self._calculate_precision_score(
                pipeline_result, explicit_facts
            )
            
            # ETAPA 6: COMPILA√á√ÉO FINAL
            final_result = {
                'success': True,
                'anamnese': result['anamnese'],
                'laudo_medico': result['laudo'],
                'transcription': transcription,
                'context_analysis': {'main_context': context_type, 'confidence': 0.9},
                
                # METADADOS DE PRECIS√ÉO
                'precision_metrics': {
                    'safety_level': pipeline_result['safety_level'],
                    'precision_score': pipeline_result['precision_score'],
                    'data_completeness': completeness['level'],
                    'pipeline_path': ' ‚Üí '.join(pipeline_result['pipeline_path']),
                    'facts_extracted': len(explicit_facts['sintomas_textualmente_relatados']),
                    'hallucination_flags': pipeline_result.get('validation_result', {}).get('hallucination_flags', [])
                },
                
                # AUDITORIA M√âDICA
                'medical_audit': {
                    'explicit_facts_used': explicit_facts,
                    'missing_critical_info': explicit_facts['informacoes_ausentes'],
                    'source_traceability': True,
                    'medical_safety_certified': pipeline_result['safety_level'] in ['MAXIMUM_SAFE', 'VALIDATED_SAFE', 'CORRECTED_SAFE']
                },
                
                'model': f"Pipeline Anti-Alucina√ß√£o M√©dica - {pipeline_result['safety_level']}",
                'timestamp': datetime.now().isoformat()
            }
            
            print(f"‚úÖ PIPELINE CONCLU√çDO: {pipeline_result['safety_level']} - Precis√£o: {pipeline_result['precision_score']:.2f}")
            return final_result
            
        except Exception as e:
            print(f"‚ùå Erro no pipeline: {e}")
            # FALLBACK ULTRA-SEGURO
            return await self._emergency_safe_fallback(patient_info, transcription, context_type, str(e))
    
    async def _generate_controlled_content(self, explicit_facts: Dict, context_type: str) -> Dict[str, Any]:
        """Gera conte√∫do usando IA com controle m√°ximo"""
        
        # Construir prompt ultra-restritivo
        facts_summary = self._build_facts_summary(explicit_facts)
        
        controlled_prompt = f"""
INSTRU√á√ÉO M√âDICA CR√çTICA: Voc√™ √© um ASSISTENTE DE DOCUMENTA√á√ÉO M√âDICA que APENAS transcreve informa√ß√µes EXPLICITAMENTE fornecidas.

PROIBI√á√ïES ABSOLUTAS:
‚ùå N√ÉO inferir sintomas n√£o mencionados
‚ùå N√ÉO assumir diagn√≥sticos  
‚ùå N√ÉO citar exames n√£o relatados
‚ùå N√ÉO mencionar medicamentos n√£o citados
‚ùå N√ÉO especular sobre causas
‚ùå N√ÉO usar conhecimento m√©dico geral

FATOS EXPL√çCITOS EXTRA√çDOS:
{facts_summary}

CONTEXTO M√âDICO: {context_type.upper()}

REGRAS DE DOCUMENTA√á√ÉO:
‚úÖ Use APENAS informa√ß√µes acima
‚úÖ Cite textualmente: "Paciente relatou: '[frase exata]'"
‚úÖ Para informa√ß√µes ausentes: "[N√£o relatado na consulta]"
‚úÖ Mantenha estrutura m√©dica formal
‚úÖ Foque no contexto {context_type}

Gere anamnese estruturada baseada EXCLUSIVAMENTE nos fatos fornecidos:
"""
        
        try:
            # GERA√á√ÉO DE ANAMNESE
            anamnese_response = await self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system",
                        "content": f"Voc√™ √© um assistente de documenta√ß√£o m√©dica para {context_type}. Use APENAS informa√ß√µes fornecidas explicitamente."
                    },
                    {
                        "role": "user",
                        "content": controlled_prompt
                    }
                ],
                temperature=0.1,  # M√≠nima criatividade
                max_tokens=1500
            )
            
            anamnese = anamnese_response.choices[0].message.content
            
            # GERA√á√ÉO DE LAUDO
            laudo_prompt = self._build_laudo_prompt(explicit_facts, anamnese, context_type)
            
            laudo_response = await self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system",
                        "content": f"Voc√™ √© um m√©dico perito em {context_type} que gera laudos baseados APENAS em informa√ß√µes documentadas."
                    },
                    {
                        "role": "user",
                        "content": laudo_prompt
                    }
                ],
                temperature=0.1,
                max_tokens=2000
            )
            
            laudo = laudo_response.choices[0].message.content
            
            return {
                'anamnese': anamnese,
                'laudo': laudo,
                'generation_method': 'controlled_ai'
            }
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o controlada: {e}")
            # Fallback para template
            return await self._generate_safe_template_based(explicit_facts, context_type)
    
    def _build_facts_summary(self, explicit_facts: Dict) -> str:
        """Constr√≥i resumo estruturado dos fatos"""
        summary_parts = []
        
        # Dados pessoais confirmados
        personal_data = explicit_facts['dados_pessoais_confirmados']
        if personal_data:
            summary_parts.append("DADOS PESSOAIS CONFIRMADOS:")
            for field, data in personal_data.items():
                summary_parts.append(f"- {field}: {data['valor']} (frase original: '{data['frase_original']}')")
        
        # Sintomas textualmente relatados
        symptoms = explicit_facts['sintomas_textualmente_relatados']
        if symptoms:
            summary_parts.append("\nSINTOMAS TEXTUALMENTE RELATADOS:")
            for symptom in symptoms:
                summary_parts.append(f"- {symptom['sintoma_exato']} (frase completa: '{symptom['frase_completa_original']}')")
        
        # Timeline especificada
        timeline = explicit_facts['timeline_especificada']
        if timeline:
            summary_parts.append("\nTIMELINE ESPECIFICADA:")
            for time_type, data in timeline.items():
                summary_parts.append(f"- {time_type}: {data['periodo']} (frase: '{data['frase_original']}')")
        
        # Tratamentos citados
        treatments = explicit_facts['tratamentos_citados']
        if treatments:
            summary_parts.append("\nTRATAMENTOS CITADOS:")
            for treatment in treatments:
                summary_parts.append(f"- {treatment['tratamento']} (frase: '{treatment['frase_original']}')")
        
        # Informa√ß√µes ausentes
        missing = explicit_facts['informacoes_ausentes']
        if missing:
            summary_parts.append(f"\nINFORMA√á√ïES N√ÉO FORNECIDAS: {', '.join(missing)}")
        
        return "\n".join(summary_parts) if summary_parts else "NENHUMA INFORMA√á√ÉO ESPEC√çFICA EXTRA√çDA"
    
    def _build_laudo_prompt(self, explicit_facts: Dict, anamnese: str, context_type: str) -> str:
        """Constr√≥i prompt para gera√ß√£o de laudo"""
        
        context_specific_instructions = {
            'bpc': 'Foque em limita√ß√µes para vida independente e necessidade de cuidador',
            'incapacidade': 'Foque na impossibilidade de exercer a fun√ß√£o laboral habitual',
            'auxilio_acidente': 'Foque na redu√ß√£o da capacidade laborativa sem incapacidade total',
            'isencao_ir': 'Foque na comprova√ß√£o de doen√ßa grave conforme legisla√ß√£o'
        }
        
        instruction = context_specific_instructions.get(context_type, 'An√°lise m√©dica geral')
        
        return f"""
GERA√á√ÉO DE LAUDO M√âDICO PARA {context_type.upper()}

ANAMNESE BASE:
{anamnese}

FATOS EXPL√çCITOS:
{self._build_facts_summary(explicit_facts)}

INSTRU√á√ïES ESPEC√çFICAS:
- {instruction}
- Use APENAS informa√ß√µes da anamnese e fatos expl√≠citos
- Mantenha estrutura de laudo m√©dico formal
- Inclua CID-10 quando apropriado
- Para informa√ß√µes n√£o dispon√≠veis: "[N√£o avaliado na consulta]"

Gere laudo m√©dico estruturado:
"""
    
    async def _generate_safe_template_based(self, explicit_facts: Dict, context_type: str) -> Dict[str, Any]:
        """Gera documentos usando templates seguros"""
        
        # Extrair dados seguros
        personal_data = explicit_facts['dados_pessoais_confirmados']
        nome = personal_data.get('nome_exato', {}).get('valor', '[Nome n√£o informado]')
        idade = personal_data.get('idade_exata', {}).get('valor', '[Idade n√£o informada]')
        profissao = personal_data.get('profissao_exata', {}).get('valor', '[Profiss√£o n√£o informada]')
        
        # Construir queixa principal segura
        symptoms = explicit_facts['sintomas_textualmente_relatados']
        if symptoms:
            queixa_parts = []
            for symptom in symptoms[:3]:  # Limitar a 3 sintomas principais
                queixa_parts.append(f"Relatou textualmente: '{symptom['sintoma_exato']}'")
            queixa_principal = ". ".join(queixa_parts)
        else:
            queixa_principal = "[Sintomas espec√≠ficos n√£o detalhados na consulta]"
        
        # Timeline segura
        timeline = explicit_facts['timeline_especificada']
        historia_atual = "Baseado no relato da consulta de telemedicina."
        if timeline:
            for time_info in timeline.values():
                historia_atual += f" Mencionou: '{time_info['frase_original']}'."
        
        # Avalia√ß√£o contextual
        context_evaluations = {
            'bpc': f"Consulta para avalia√ß√£o de BPC/LOAS. Avalia√ß√£o baseada no relato do paciente.",
            'incapacidade': f"Consulta para avalia√ß√£o de incapacidade laboral. An√°lise baseada no relato profissional.",
            'auxilio_acidente': f"Consulta para avalia√ß√£o de aux√≠lio-acidente. Baseado no relato de sequelas.",
            'isencao_ir': f"Consulta para avalia√ß√£o de isen√ß√£o IR. Baseado no relato m√©dico."
        }
        
        # Preencher template de anamnese
        anamnese = self.safe_templates['anamnese_minima'].format(
            nome=nome,
            idade=f"{idade} anos" if idade != '[Idade n√£o informada]' else idade,
            profissao=profissao,
            data=datetime.now().strftime('%d/%m/%Y'),
            queixa_principal=queixa_principal,
            historia_atual=historia_atual,
            avaliacao_contexto=context_evaluations.get(context_type, 'Consulta m√©dica geral.')
        )
        
        # Preencher template de laudo
        laudo = self.safe_templates['laudo_minimo'].format(
            contexto=context_type.upper(),
            nome=nome,
            data=datetime.now().strftime('%d/%m/%Y'),
            historia_clinica_resumida="Conforme relato na consulta de telemedicina.",
            limitacoes_relatadas="Conforme relatado pelo paciente na consulta." if symptoms else "[N√£o especificadas na consulta]",
            exames_mencionados="[N√£o apresentados na consulta]",
            tratamentos_citados="Conforme relatado pelo paciente." if explicit_facts['tratamentos_citados'] else "[N√£o especificados]",
            prognostico_contextual=f"A ser avaliado conforme evolu√ß√£o e contexto de {context_type}.",
            conclusao_especifica=f"Consulta realizada para fins de {context_type}, baseada exclusivamente no relato do paciente."
        )
        
        return {
            'anamnese': anamnese,
            'laudo': laudo,
            'generation_method': 'safe_template'
        }
    
    async def _apply_automatic_corrections(self, initial_generation: Dict, validation_result: Dict, explicit_facts: Dict, context_type: str) -> Dict[str, Any]:
        """Aplica corre√ß√µes autom√°ticas baseadas na valida√ß√£o"""
        
        corrections = validation_result.get('corrections', {})
        corrected_anamnese = corrections.get('corrected_text', initial_generation['anamnese'])
        
        # Se muitas corre√ß√µes foram necess√°rias, reverter para template seguro
        if len(validation_result['hallucination_flags']) > 3:
            print("üõ°Ô∏è MUITAS ALUCINA√á√ïES: Revertendo para template ultra-seguro")
            return await self._generate_safe_template_based(explicit_facts, context_type)
        
        # Aplicar corre√ß√µes menores
        return {
            'anamnese': corrected_anamnese,
            'laudo': initial_generation['laudo'],  # TODO: Aplicar corre√ß√µes no laudo tamb√©m
            'generation_method': 'corrected_ai',
            'corrections_applied': corrections.get('modifications_made', [])
        }
    
    def _calculate_precision_score(self, pipeline_result: Dict, explicit_facts: Dict) -> float:
        """Calcula score de precis√£o final"""
        
        base_score = 0.5
        
        # Bonus por caminho seguro
        if pipeline_result['safety_level'] == 'MAXIMUM_SAFE':
            base_score += 0.3
        elif pipeline_result['safety_level'] == 'VALIDATED_SAFE':
            base_score += 0.4
        elif pipeline_result['safety_level'] == 'CORRECTED_SAFE':
            base_score += 0.2
        
        # Bonus por completude dos dados
        completeness = explicit_facts['completude_dados']['score']
        base_score += completeness * 0.3
        
        # Penalidade por alucina√ß√µes detectadas
        validation_result = pipeline_result.get('validation_result', {})
        hallucination_count = len(validation_result.get('hallucination_flags', []))
        base_score -= hallucination_count * 0.1
        
        return max(0.0, min(1.0, base_score))
    
    async def _emergency_safe_fallback(self, patient_info: str, transcription: str, context_type: str, error: str) -> Dict[str, Any]:
        """Fallback ultra-seguro em caso de erro cr√≠tico"""
        
        return {
            'success': True,
            'anamnese': f"""
## üìã ANAMNESE - MODO SEGURO DE EMERG√äNCIA

### IDENTIFICA√á√ÉO
Paciente: {patient_info}
Data: {datetime.now().strftime('%d/%m/%Y')}
Modalidade: Telemedicina

### OBSERVA√á√ïES
- Sistema executado em modo de seguran√ßa devido a erro t√©cnico
- Transcri√ß√£o dispon√≠vel mas processamento limitado
- Recomenda-se revis√£o m√©dica manual
- Contexto identificado: {context_type}

**ERRO T√âCNICO:** {error}
**TRANSCRI√á√ÉO ORIGINAL:** [Dispon√≠vel para revis√£o m√©dica]
""",
            'laudo_medico': f"""
## üè• LAUDO M√âDICO - MODO SEGURO

### IDENTIFICA√á√ÉO
Data: {datetime.now().strftime('%d/%m/%Y')}
Contexto: {context_type.upper()}

### OBSERVA√á√ÉO CR√çTICA
Documento gerado em modo de seguran√ßa devido a limita√ß√µes t√©cnicas.
Requer revis√£o e elabora√ß√£o m√©dica manual.

**RECOMENDA√á√ÉO:** Revis√£o m√©dica presencial ou nova consulta de telemedicina.
""",
            'transcription': transcription,
            'precision_metrics': {
                'safety_level': 'EMERGENCY_SAFE',
                'precision_score': 0.3,
                'pipeline_path': 'emergency_fallback',
                'requires_manual_review': True
            },
            'model': 'Pipeline Seguro de Emerg√™ncia',
            'timestamp': datetime.now().isoformat()
        }

# Inst√¢ncia global
anti_hallucination_pipeline = AntiHallucinationPipeline()

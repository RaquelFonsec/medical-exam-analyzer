import asyncio
import pytesseract
import easyocr
import pdfplumber
from pdf2image import convert_from_path
from PIL import Image
import cv2
import numpy as np
import os

class OCRService:
    def __init__(self):
        self.easyocr_reader = easyocr.Reader(['pt', 'en'])
        # Configurar Tesseract se necessário
        # pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'  # Linux
    
    async def extract_from_pdf(self, pdf_path: str) -> str:
        """Extrai texto de PDF"""
        try:
            # Tentar extrair texto diretamente
            text = ""
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    page_text = page.extract_text()
                    if page_text:
                        text += page_text + "\n"
            
            # Se não conseguir texto, usar OCR
            if len(text.strip()) < 50:
                text = await self._pdf_ocr(pdf_path)
            
            return self._clean_text(text)
            
        except Exception as e:
            raise Exception(f"Erro na extração PDF: {str(e)}")
    
    async def extract_from_image(self, image_path: str) -> str:
        """Extrai texto de imagem"""
        try:
            # Pré-processar imagem
            processed_image = self._preprocess_image(image_path)
            
            # Usar EasyOCR (melhor para texto médico)
            result = self.easyocr_reader.readtext(processed_image)
            text = " ".join([item[1] for item in result if item[2] > 0.5])
            
            # Fallback para Tesseract se necessário
            if len(text.strip()) < 50:
                text = pytesseract.image_to_string(
                    processed_image, 
                    lang='por+eng',
                    config='--psm 6'
                )
            
            return self._clean_text(text)
            
        except Exception as e:
            raise Exception(f"Erro na extração de imagem: {str(e)}")
    
    def _preprocess_image(self, image_path: str) -> np.ndarray:
        """Pré-processa imagem para melhor OCR"""
        # Carregar imagem
        image = cv2.imread(image_path)
        
        # Converter para escala de cinza
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # Aplicar filtros
        # Reduzir ruído
        denoised = cv2.medianBlur(gray, 3)
        
        # Aumentar contraste
        contrast = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        enhanced = contrast.apply(denoised)
        
        # Binarização adaptativa
        binary = cv2.adaptiveThreshold(
            enhanced, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
            cv2.THRESH_BINARY, 11, 2
        )
        
        return binary
    
    async def _pdf_ocr(self, pdf_path: str) -> str:
        """OCR em PDF convertido para imagens"""
        try:
            # Converter PDF para imagens
            pages = convert_from_path(pdf_path, dpi=300)
            
            all_text = ""
            for page in pages:
                # Converter PIL para numpy
                page_array = np.array(page)
                
                # OCR na página
                result = self.easyocr_reader.readtext(page_array)
                page_text = " ".join([item[1] for item in result if item[2] > 0.5])
                all_text += page_text + "\n"
            
            return all_text
            
        except Exception as e:
            raise Exception(f"Erro no OCR do PDF: {str(e)}")
    
    def _clean_text(self, text: str) -> str:
        """Limpa e normaliza texto extraído"""
        import re
        
        # Remover quebras excessivas
        text = re.sub(r'\n+', '\n', text)
        
        # Remover espaços excessivos
        text = re.sub(r' +', ' ', text)
        
        # Remover caracteres não printáveis
        text = ''.join(char for char in text if char.isprintable() or char in '\n\t')
        
        return text.strip()

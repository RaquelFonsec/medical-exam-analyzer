"""
API FastAPI para o Sistema de An√°lise M√©dica
"""

import os
import sys
from typing import Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
import asyncio
import json
from datetime import datetime

# Adicionar path do sistema m√©dico
sys.path.append('.')

# Importa√ß√µes do sistema m√©dico
try:
    from medical_system.config.system_config import (
        MedicalSystemConfiguration,
        validate_system_setup
    )
    from medical_system.utils.validators import validate_medical_analysis_result
    MEDICAL_SYSTEM_AVAILABLE = True
    print("‚úÖ Sistema m√©dico carregado com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è Sistema m√©dico n√£o dispon√≠vel: {e}")
    MEDICAL_SYSTEM_AVAILABLE = False

# ============================================================================
# CONFIGURA√á√ÉO FASTAPI
# ============================================================================

app = FastAPI(
    title="Sistema de An√°lise M√©dica",
    description="API para an√°lise automatizada de benef√≠cios previdenci√°rios",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# MODELOS PYDANTIC FLEX√çVEIS
# ============================================================================

class MedicalTranscriptionRequest(BaseModel):
    """Request para an√°lise m√©dica - mais flex√≠vel"""
    transcription: str = Field(..., min_length=1, description="Texto da transcri√ß√£o m√©dica")
    patient_id: Optional[str] = Field(default=None, description="ID do paciente")
    config: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Configura√ß√µes personalizadas")
    
    class Config:
        # Permitir campos extras sem erro
        extra = "ignore"

class MedicalAnalysisResponse(BaseModel):
    """Response da an√°lise m√©dica"""
    status: str
    analysis_id: Optional[str] = None
    result: Dict[str, Any] = Field(default_factory=dict)
    error: Optional[str] = None

# ============================================================================
# SERVI√áO RAG MOCK
# ============================================================================

class MockRAGService:
    def __init__(self):
        self.knowledge_base = [
            "Aux√≠lio-doen√ßa √© concedido ao segurado incapacitado temporariamente.",
            "BPC/LOAS √© destinado a pessoas com defici√™ncia ou idosos vulner√°veis.",
            "Aposentadoria por invalidez √© para incapacidade total e permanente."
        ]
    
    def search_similar_documents(self, query: str, k: int = 3):
        docs = []
        for i, doc in enumerate(self.knowledge_base[:k]):
            score = 0.9 - (i * 0.1)
            docs.append((doc, score))
        return docs

# ============================================================================
# ROTAS DA API
# ============================================================================

@app.get("/")
async def root():
    return {
        "message": "Sistema de An√°lise M√©dica API",
        "version": "1.0.0",
        "status": "running",
        "system_available": MEDICAL_SYSTEM_AVAILABLE
    }

@app.get("/health")
async def health_check():
    if not MEDICAL_SYSTEM_AVAILABLE:
        return {
            "status": "unhealthy",
            "system_ready": False,
            "timestamp": datetime.now().isoformat(),
            "error": "Sistema m√©dico n√£o dispon√≠vel"
        }
    
    try:
        system_ready = validate_system_setup()
        requirements = MedicalSystemConfiguration.validate_system_requirements()
        
        return {
            "status": "healthy" if system_ready else "degraded",
            "system_ready": system_ready,
            "timestamp": requirements["timestamp"],
            "openai_configured": bool(os.getenv("OPENAI_API_KEY")),
            "issues": requirements.get("critical_issues", [])
        }
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "system_ready": False,
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

# ============================================================================
# ROTA PRINCIPAL - AN√ÅLISE M√âDICA
# ============================================================================

async def process_medical_analysis(transcription: str, patient_id: str = None, config: dict = None):
    """Fun√ß√£o helper para processar an√°lise m√©dica"""
    
    if not MEDICAL_SYSTEM_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="Sistema m√©dico n√£o dispon√≠vel"
        )
    
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        raise HTTPException(
            status_code=400,
            detail="OPENAI_API_KEY n√£o configurada"
        )
    
    if not transcription or len(transcription.strip()) < 5:
        raise HTTPException(
            status_code=400,
            detail="Transcri√ß√£o deve ter pelo menos 5 caracteres"
        )
    
    try:
        analysis_id = f"analysis_{int(datetime.now().timestamp())}"
        
        print(f"üî¨ Iniciando an√°lise {analysis_id}")
        print(f"üìÑ Transcri√ß√£o: {len(transcription)} caracteres")
        
        # Criar sistema m√©dico
        rag_service = MockRAGService()
        medical_system, sys_config = MedicalSystemConfiguration.create_complete_system(
            openai_api_key=openai_api_key,
            rag_service=rag_service,
            custom_config=config or {}
        )
        
        # Processar an√°lise
        result = await medical_system.process_medical_transcription(transcription)
        
        # Validar resultado
        validation = validate_medical_analysis_result(result)
        result["validation"] = validation
        result["analysis_id"] = analysis_id
        
        beneficio = result.get('beneficio_classificado', 'N/A')
        print(f"‚úÖ An√°lise {analysis_id} conclu√≠da: {beneficio}")
        
        return {
            "status": "success",
            "analysis_id": analysis_id,
            "result": result
        }
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Erro na an√°lise: {error_msg}")
        
        return {
            "status": "error",
            "analysis_id": f"error_{int(datetime.now().timestamp())}",
            "error": error_msg,
            "result": {}
        }

@app.post("/analyze")
async def analyze_medical_transcription(request: MedicalTranscriptionRequest):
    """Rota padr√£o para an√°lise m√©dica"""
    return await process_medical_analysis(
        transcription=request.transcription,
        patient_id=request.patient_id,
        config=request.config
    )

@app.post("/api/intelligent-medical-analysis")
async def intelligent_medical_analysis(request: Request):
    """
    Rota espec√≠fica para an√°lise m√©dica inteligente
    Aceita dados de qualquer formato JSON
    """
    
    try:
        # Log da requisi√ß√£o
        print(f"üìã Recebida requisi√ß√£o em /api/intelligent-medical-analysis")
        
        # Ler body da requisi√ß√£o
        body = await request.body()
        print(f"üìÑ Body recebido: {body[:200]}...")
        
        # Parse do JSON
        try:
            json_data = json.loads(body)
            print(f"üìä JSON data keys: {list(json_data.keys())}")
        except json.JSONDecodeError as e:
            print(f"‚ùå Erro no parse JSON: {e}")
            raise HTTPException(status_code=400, detail="JSON inv√°lido")
        
        # Extrair dados necess√°rios (flex√≠vel)
        transcription = (
            json_data.get('transcription') or 
            json_data.get('text') or 
            json_data.get('content') or
            json_data.get('transcript') or
            ""
        )
        
        patient_id = (
            json_data.get('patient_id') or 
            json_data.get('patientId') or 
            json_data.get('id') or
            None
        )
        
        config = json_data.get('config', {})
        
        print(f"üìù Transcri√ß√£o extra√≠da: {len(transcription)} caracteres")
        print(f"üë§ Patient ID: {patient_id}")
        
        # Validar se tem transcri√ß√£o
        if not transcription:
            available_fields = list(json_data.keys())
            raise HTTPException(
                status_code=400, 
                detail=f"Campo 'transcription' n√£o encontrado. Campos dispon√≠veis: {available_fields}"
            )
        
        # Processar an√°lise
        return await process_medical_analysis(transcription, patient_id, config)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/test")
async def test_analysis():
    """Teste r√°pido do sistema"""
    
    mock_transcription = """
    Paciente Jo√£o Silva, 45 anos, carpinteiro h√° 20 anos.
    Refere dor lombar intensa h√° 6 meses, com irradia√ß√£o para perna direita.
    N√£o consegue mais carregar peso ou trabalhar em p√©.
    Radiografia mostra artrose L4-L5.
    Solicita aux√≠lio-doen√ßa para afastamento.
    """
    
    return await process_medical_analysis(
        transcription=mock_transcription,
        patient_id="test_001",
        config={"pipeline_timeout_seconds": 180}
    )

# ============================================================================
# TRATAMENTO DE ERROS
# ============================================================================

@app.exception_handler(422)
async def validation_exception_handler(request: Request, exc):
    """Handler espec√≠fico para erro 422"""
    print(f"‚ùå Erro 422 em {request.url.path}")
    print(f"üìÑ Body: {await request.body()}")
    
    return JSONResponse(
        status_code=422,
        content={
            "error": "Dados de entrada inv√°lidos",
            "detail": "Verifique se o campo 'transcription' est√° presente",
            "expected_format": {
                "transcription": "string (obrigat√≥rio)",
                "patient_id": "string (opcional)",
                "config": "object (opcional)"
            },
            "path": str(request.url.path)
        }
    )

@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "Endpoint n√£o encontrado",
            "path": str(request.url.path),
            "available_endpoints": ["/", "/health", "/analyze", "/api/intelligent-medical-analysis", "/test"]
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erro interno do servidor",
            "path": str(request.url.path)
        }
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)


"""
Sistema Integrado de An√°lise M√©dica - Exemplo Principal
Demonstra o uso completo do sistema com LangGraph + RAG + Pydantic
"""

import asyncio
import os
import sys
from typing import Dict, Any
from datetime import datetime

# Adicionar path do sistema m√©dico
sys.path.append('.')

# Importa√ß√µes do sistema m√©dico
from medical_system.config.system_config import (
    MedicalSystemConfiguration,
    load_system_config,
    validate_system_setup
)
from medical_system.utils.validators import (
    validate_medical_analysis_result,
    validate_patient_data,
    calculate_analysis_quality_score
)

# Mock do servi√ßo RAG para demonstra√ß√£o
class MockRAGService:
    """Servi√ßo RAG mock para demonstra√ß√£o (substitua pela sua implementa√ß√£o)"""
    
    def __init__(self):
        # Base de conhecimento mock
        self.knowledge_base = [
            "Aux√≠lio-doen√ßa √© concedido ao segurado incapacitado temporariamente para o trabalho.",
            "BPC/LOAS √© destinado a pessoas com defici√™ncia ou idosos acima de 65 anos em situa√ß√£o de vulnerabilidade.",
            "Aposentadoria por invalidez √© para incapacidade total e permanente para qualquer atividade laborativa.",
            "Dor lombar cr√¥nica pode causar limita√ß√£o funcional significativa para atividades laborativas.",
            "Transtornos mentais graves podem gerar incapacidade para o trabalho e conv√≠vio social.",
            "Cardiopatias graves limitam a capacidade para esfor√ßos f√≠sicos e atividades laborativas.",
            "Defici√™ncia visual severa impacta significativamente as atividades da vida di√°ria.",
            "Artrose avan√ßada causa dor e limita√ß√£o de movimento, afetando a capacidade laborativa."
        ]
    
    def search_similar_documents(self, query: str, k: int = 3):
        """Mock de busca em documentos similares"""
        # Simular busca por palavras-chave
        query_lower = query.lower()
        scores = []
        
        for i, doc in enumerate(self.knowledge_base):
            doc_lower = doc.lower()
            score = 0.5  # Score base
            
            # Aumentar score por palavras-chave encontradas
            keywords = query_lower.split()[:3]  # Primeiras 3 palavras
            for keyword in keywords:
                if keyword in doc_lower:
                    score += 0.2
            
            scores.append((doc, min(score, 1.0)))
        
        # Ordenar por score e retornar top k
        scores.sort(key=lambda x: x[1], reverse=True)
        return scores[:k]

async def process_medical_consultation(
    transcription_text: str,
    openai_api_key: str,
    rag_service = None,
    faiss_index = None,
    custom_config: Dict = None
) -> Dict[str, Any]:
    """
    Fun√ß√£o principal para processar consulta m√©dica
    
    Args:
        transcription_text: Texto da transcri√ß√£o da consulta m√©dica
        openai_api_key: Chave da API OpenAI
        rag_service: Servi√ßo RAG (opcional, usa mock se n√£o fornecido)
        faiss_index: √çndice FAISS (opcional)
        custom_config: Configura√ß√µes personalizadas (opcional)
        
    Returns:
        Dict com resultado completo da an√°lise
    """
    
    print(f"üè• INICIANDO PROCESSAMENTO M√âDICO")
    print(f"üìÑ Texto: {len(transcription_text)} caracteres")
    print("=" * 60)
    
    # Usar RAG mock se n√£o fornecido
    if rag_service is None:
        rag_service = MockRAGService()
        print("üîß Usando RAG mock para demonstra√ß√£o")
    
    try:
        # Criar sistema integrado com configura√ß√µes
        medical_system, config = MedicalSystemConfiguration.create_complete_system(
            openai_api_key=openai_api_key,
            rag_service=rag_service,
            faiss_index=faiss_index,
            custom_config=custom_config
        )
        
        # Processar transcri√ß√£o m√©dica
        print("‚ö° Executando pipeline de an√°lise...")
        result = await medical_system.process_medical_transcription(transcription_text)
        
        # Validar resultado
        validation = validate_medical_analysis_result(result)
        result["validation"] = validation
        
        print(f"‚úÖ An√°lise conclu√≠da!")
        return result
        
    except Exception as e:
        print(f"‚ùå Erro durante processamento: {str(e)}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

def display_analysis_results(result: Dict[str, Any]):
    """Exibe resultados da an√°lise de forma organizada"""
    
    print("\nüè• RESULTADO DA AN√ÅLISE M√âDICA")
    print("=" * 60)
    
    # Status geral
    status = result.get('status', 'unknown')
    status_icon = "‚úÖ" if status == "success" else "‚ùå"
    print(f"{status_icon} Status: {status.upper()}")
    
    if status == "error":
        print(f"‚ùå Erro: {result.get('error', 'Erro desconhecido')}")
        return
    
    # Dados do paciente
    paciente = result.get('paciente', {})
    identificacao = paciente.get('identificacao', {})
    
    print(f"\nüë§ DADOS DO PACIENTE:")
    print(f"   Nome: {identificacao.get('nome', 'N√£o informado')}")
    print(f"   Idade: {paciente.get('idade_anos', 'N√£o informada')} anos")
    print(f"   Profiss√£o: {paciente.get('profissao', 'N√£o informada')}")
    
    # An√°lise m√©dica
    analise = result.get('analise_medica', {})
    print(f"\nüî¨ AN√ÅLISE M√âDICA:")
    print(f"   Especialidade: {analise.get('especialidade_principal', 'N√£o identificada').title()}")
    print(f"   CID Principal: {analise.get('cid_principal', 'N√£o informado')}")
    print(f"   Descri√ß√£o: {analise.get('cid_descricao', 'N√£o informada')}")
    print(f"   Gravidade: {analise.get('gravidade', 'N√£o avaliada').title()}")
    print(f"   Progn√≥stico: {analise.get('prognostico', 'N√£o informado').title()}")
    
    # Classifica√ß√£o do benef√≠cio
    beneficio = result.get('beneficio_classificado', 'N√ÉO_CLASSIFICADO')
    print(f"\nüéØ CLASSIFICA√á√ÉO DO BENEF√çCIO:")
    print(f"   Tipo: {beneficio}")
    print(f"   Justificativa: {result.get('justificativa_beneficio', 'N√£o dispon√≠vel')[:100]}...")
    
    # Capacidade funcional
    print(f"\n‚öïÔ∏è  CAPACIDADE FUNCIONAL:")
    print(f"   Capacidade Laborativa: {result.get('capacidade_laborativa', 'N√£o avaliada').title()}")
    
    limitacoes = result.get('limitacoes_funcionais', [])
    if limitacoes:
        print(f"   Limita√ß√µes: {', '.join(limitacoes)}")
    
    auxilio_terceiros = result.get('necessita_auxilio_terceiros', False)
    print(f"   Necessita Aux√≠lio de Terceiros: {'Sim' if auxilio_terceiros else 'N√£o'}")
    
    # Nexo ocupacional
    nexo = result.get('nexo_ocupacional', {})
    print(f"\nüè≠ NEXO OCUPACIONAL:")
    print(f"   Identificado: {'Sim' if nexo.get('identificado', False) else 'N√£o'}")
    print(f"   Observa√ß√£o: {nexo.get('observacao', 'Nenhuma')}")
    
    # Recomenda√ß√µes
    recomendacoes = result.get('recomendacoes', {})
    print(f"\nüí° RECOMENDA√á√ïES:")
    print(f"   Especialidade Indicada: {recomendacoes.get('especialidade_indicada', 'N√£o especificada').title()}")
    
    exames = recomendacoes.get('exames_complementares', [])
    if exames:
        print(f"   Exames Complementares:")
        for exame in exames[:3]:  # Mostrar at√© 3 exames
            print(f"     ‚Ä¢ {exame}")
    
    # Valida√ß√£o e qualidade
    validation = result.get('validation', {})
    if validation:
        print(f"\nüìä QUALIDADE DA AN√ÅLISE:")
        print(f"   V√°lida: {'Sim' if validation.get('valid', False) else 'N√£o'}")
        print(f"   Score de Qualidade: {validation.get('score', 0):.1f}/100")
        
        if validation.get('warnings'):
            print(f"   Avisos: {len(validation['warnings'])} encontrado(s)")
        
        if validation.get('errors'):
            print(f"   Erros: {len(validation['errors'])} encontrado(s)")
    
    # Metadados
    metadados = result.get('metadados', {})
    print(f"\nüìã METADADOS:")
    print(f"   M√©todo: {metadados.get('metodo_analise', 'Desconhecido')}")
    print(f"   Confiabilidade: {metadados.get('confiabilidade', 'N√£o avaliada').title()}")
    print(f"   Caracteres Processados: {metadados.get('texto_original_caracteres', 0)}")
    
    # M√©tricas do pipeline (se dispon√≠vel)
    pipeline_metrics = metadados.get('pipeline_metrics', {})
    if pipeline_metrics:
        print(f"   Taxa de Sucesso: {pipeline_metrics.get('success_rate', 0):.1f}%")
        print(f"   Tempo M√©dio: {pipeline_metrics.get('average_processing_time', 0):.2f}s")

def display_medical_report(result: Dict[str, Any]):
    """Exibe o laudo m√©dico completo"""
    
    laudo = result.get('laudo_medico', '')
    if not laudo:
        print("\n‚ùå Laudo m√©dico n√£o dispon√≠vel")
        return
    
    print("\nüìÑ LAUDO M√âDICO COMPLETO")
    print("=" * 60)
    print(laudo)
    print("=" * 60)

async def demo_analysis():
    """Demonstra√ß√£o completa do sistema"""
    
    print("üè• SISTEMA INTEGRADO DE AN√ÅLISE M√âDICA")
    print("üöÄ Demonstra√ß√£o Completa")
    print("=" * 60)
    
    # Verificar configura√ß√£o
    if not validate_system_setup():
        print("‚ùå Sistema n√£o est√° configurado corretamente")
        requirements = MedicalSystemConfiguration.validate_system_requirements()
        
        if requirements['critical_issues']:
            print("\nüí• Problemas cr√≠ticos:")
            for issue in requirements['critical_issues']:
                print(f"   ‚Ä¢ {issue}")
        
        print("\nüí° Configure o sistema antes de continuar")
        return None
    
    # Verificar API key
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        print("‚ùå Configure a vari√°vel de ambiente OPENAI_API_KEY")
        print("   Exemplo: export OPENAI_API_KEY='sua-chave-aqui'")
        return None
    
    # Casos de teste
    test_cases = [
        {
            "name": "Caso 1: Dor Lombar - Carpinteiro",
            "transcription": """
            Paciente Jo√£o Silva, 45 anos, trabalha h√° 20 anos como carpinteiro.
            Refere dor lombar intensa h√° 6 meses, com irradia√ß√£o para perna direita.
            Dor piora com movimento e melhora com repouso. N√£o consegue mais carregar peso.
            Trabalha 8 horas di√°rias em p√©, carregando materiais pesados.
            Radiografia mostra artrose L4-L5. Fez fisioterapia sem melhora significativa.
            N√£o consegue mais exercer sua fun√ß√£o devido √† dor e limita√ß√£o de movimento.
            Solicita aux√≠lio-doen√ßa para afastamento do trabalho.
            """
        },
        {
            "name": "Caso 2: Depress√£o - Aposentado",
            "transcription": """
            Paciente Maria Santos, 68 anos, aposentada h√° 3 anos.
            Apresenta quadro depressivo grave h√° 1 ano, com idea√ß√£o suicida.
            Isolamento social, perda de interesse em atividades, ins√¥nia.
            Faz uso de sertralina 100mg e clonazepam 2mg.
            Hist√≥rico de interna√ß√£o psiqui√°trica recente por tentativa de suic√≠dio.
            Mora sozinha, sem renda al√©m da aposentadoria de 1 sal√°rio m√≠nimo.
            Filha solicita BPC para complemento de renda devido √†s despesas m√©dicas.
            """
        },
        {
            "name": "Caso 3: Defici√™ncia Visual - Jovem",
            "transcription": """
            Paciente Pedro Costa, 28 anos, desenvolvedor de software.
            Cegueira progressiva por glaucoma h√° 2 anos, j√° com perda visual bilateral severa.
            Acuidade visual 20/400 em ambos os olhos, n√£o corrig√≠vel.
            Fazia uso de computador 10 horas/dia, agora imposs√≠vel trabalhar.
            Nunca contribuiu para INSS por trabalhar como aut√¥nomo informal.
            Mora com os pais, fam√≠lia com renda per capita de R$ 200,00.
            Solicita BPC/LOAS por defici√™ncia visual e vulnerabilidade social.
            """
        }
    ]
    
    # Configura√ß√µes personalizadas para demo
    custom_config = {
        "pipeline_timeout_seconds": 180,  # 3 minutos para demo
        "validation_quality_threshold": 60.0,  # Threshold mais baixo para demo
        "system_enable_audit_log": False  # Desabilitar logs extensos na demo
    }
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüî¨ PROCESSANDO {test_case['name'].upper()}")
        print("-" * 50)
        
        try:
            # Processar caso
            result = await process_medical_consultation(
                transcription_text=test_case['transcription'],
                openai_api_key=openai_api_key,
                custom_config=custom_config
            )
            
            # Exibir resultados
            display_analysis_results(result)
            
            # Perguntar se quer ver o laudo completo
            print(f"\nüìÑ Deseja ver o laudo m√©dico completo do {test_case['name']}?")
            print("   (Pressione Enter para continuar ou 'l' + Enter para ver laudo)")
            
            user_input = input().strip().lower()
            if user_input == 'l':
                display_medical_report(result)
            
            results.append({
                "case": test_case['name'],
                "result": result,
                "success": result.get('status') == 'success'
            })
            
            # Pausa entre casos
            if i < len(test_cases):
                print(f"\n‚è∏Ô∏è  Pressione Enter para processar pr√≥ximo caso...")
                input()
        
        except Exception as e:
            print(f"‚ùå Erro no caso {test_case['name']}: {str(e)}")
            results.append({
                "case": test_case['name'],
                "result": {"status": "error", "error": str(e)},
                "success": False
            })
    
    # Resumo final
    print(f"\nüìä RESUMO DA DEMONSTRA√á√ÉO")
    print("=" * 60)
    
    successful = sum(1 for r in results if r['success'])
    total = len(results)
    
    print(f"‚úÖ Casos processados com sucesso: {successful}/{total}")
    print(f"üìà Taxa de sucesso: {(successful/total)*100:.1f}%")
    
    # Detalhes por caso
    for result in results:
        status_icon = "‚úÖ" if result['success'] else "‚ùå"
        case_result = result['result']
        
        print(f"\n{status_icon} {result['case']}:")
        
        if result['success']:
            beneficio = case_result.get('beneficio_classificado', 'N√ÉO_CLASSIFICADO')
            quality = case_result.get('validation', {}).get('score', 0)
            print(f"   Benef√≠cio: {beneficio}")
            print(f"   Qualidade: {quality:.1f}/100")
        else:
            print(f"   Erro: {case_result.get('error', 'Erro desconhecido')}")
    
    print(f"\nüéâ Demonstra√ß√£o conclu√≠da!")
    print(f"üí° Para usar em produ√ß√£o:")
    print(f"   1. Configure seu pr√≥prio servi√ßo RAG")
    print(f"   2. Ajuste as configura√ß√µes conforme necess√°rio")
    print(f"   3. Implemente valida√ß√µes adicionais espec√≠ficas")
    print(f"   4. Configure monitoramento e logs")
    
    return results

def main():
    """Fun√ß√£o principal do sistema"""
    
    print("üè• SISTEMA INTEGRADO DE AN√ÅLISE M√âDICA")
    print("‚öïÔ∏è  An√°lise Automatizada de Benef√≠cios Previdenci√°rios")
    print("ü§ñ Powered by LangGraph + RAG + Pydantic")
    print("=" * 60)
    
    # Menu de op√ß√µes
    while True:
        print(f"\nüìã MENU PRINCIPAL:")
        print(f"   1. üöÄ Executar Demonstra√ß√£o Completa")
        print(f"   2. üîß Validar Configura√ß√£o do Sistema")
        print(f"   3. ‚öôÔ∏è  Gerar Template de Configura√ß√£o")
        print(f"   4. üìä Processar Caso Individual")
        print(f"   5. ‚ùå Sair")
        
        try:
            choice = input(f"\nüëâ Escolha uma op√ß√£o (1-5): ").strip()
            
            if choice == '1':
                print(f"\nüöÄ Iniciando demonstra√ß√£o...")
                asyncio.run(demo_analysis())
                
            elif choice == '2':
                print(f"\nüîß Validando sistema...")
                requirements = MedicalSystemConfiguration.validate_system_requirements()
                
                if requirements['system_ready']:
                    print("‚úÖ Sistema configurado corretamente!")
                else:
                    print("‚ùå Problemas encontrados:")
                    for issue in requirements['critical_issues']:
                        print(f"   ‚Ä¢ {issue}")
                
                if requirements['warnings']:
                    print("\n‚ö†Ô∏è  Avisos:")
                    for warning in requirements['warnings']:
                        print(f"   ‚Ä¢ {warning}")
                        
            elif choice == '3':
                print(f"\n‚öôÔ∏è  Gerando template...")
                success = MedicalSystemConfiguration.generate_config_template()
                if success:
                    print("‚úÖ Template criado: medical_system_config.json")
                    
            elif choice == '4':
                print(f"\nüìä Processamento individual:")
                transcription = input("Digite a transcri√ß√£o m√©dica: ").strip()
                
                if transcription:
                    openai_api_key = os.getenv("OPENAI_API_KEY")
                    if openai_api_key:
                        print("‚ö° Processando...")
                        result = asyncio.run(process_medical_consultation(transcription, openai_api_key))
                        display_analysis_results(result)
                    else:
                        print("‚ùå Configure OPENAI_API_KEY")
                else:
                    print("‚ùå Transcri√ß√£o n√£o pode estar vazia")
                    
            elif choice == '5':
                print(f"\nüëã Obrigado por usar o Sistema de An√°lise M√©dica!")
                break
                
            else:
                print(f"‚ùå Op√ß√£o inv√°lida. Escolha entre 1-5.")
                
        except KeyboardInterrupt:
            print(f"\n\nüëã Sistema interrompido pelo usu√°rio. At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {str(e)}")

if __name__ == "__main__":
    main()
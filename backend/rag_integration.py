# ============================================================================
# RAG FAISS INTEGRATION SETUP
# Configura√ß√£o e inicializa√ß√£o da base de conhecimento m√©dico
# ============================================================================

import os
import json
import logging
from typing import List, Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class RAGMedicalSetup:
    """Setup e configura√ß√£o do RAG FAISS para laudos m√©dicos"""
    
    def __init__(self, base_path: str = "./rag"):
        self.base_path = Path(base_path)
        self.ensure_directories()
    
    def ensure_directories(self):
        """Cria diret√≥rios necess√°rios"""
        directories = [
            self.base_path,
            self.base_path / "data",
            self.base_path / "indices", 
            self.base_path / "embeddings"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ Diret√≥rio garantido: {directory}")
    
    def create_sample_medical_cases(self) -> List[Dict[str, Any]]:
        """Cria casos m√©dicos de exemplo para a base FAISS"""
        
        sample_cases = [
            {
                "id": "caso_001",
                "tipo": "diabetes_hipertensao",
                "cid_principal": "E11.3",
                "cids_secundarios": ["I10", "F32.1"],
                "beneficio": "AUX√çLIO-DOEN√áA",
                "content": """
                Paciente masculino, 45 anos, cozinheiro, apresenta diabetes mellitus tipo 2 com complica√ß√µes oft√°lmicas (E11.3).
                Relata vis√£o emba√ßada, mal estar no trabalho devido ao calor da cozinha, tontura frequente.
                Medicamentos: metformina 850mg 2x/dia, losartana 50mg 1x/dia.
                Press√£o arterial: 18x12 mmHg (descompensada). Tamb√©m apresenta epis√≥dio depressivo moderado (F32.1).
                Incapacidade tempor√°ria para atividades laborais habituais devido √† exposi√ß√£o ao calor e esfor√ßo f√≠sico.
                Indica√ß√£o: AUX√çLIO-DOEN√áA por 90 dias com reavalia√ß√£o.
                """,
                "gravidade": "MODERADA",
                "duration_months": 3,
                "keywords": ["diabetes", "hipertens√£o", "cozinheiro", "calor", "vis√£o emba√ßada", "metformina", "losartana"]
            },
            
            {
                "id": "caso_002", 
                "tipo": "sindrome_tunel_carpo",
                "cid_principal": "G56.0",
                "cids_secundarios": ["M70.1"],
                "beneficio": "AUX√çLIO-DOEN√áA",
                "content": """
                Paciente feminina, 38 anos, digitadora, s√≠ndrome do t√∫nel do carpo bilateral (G56.0).
                Formigamento e dorm√™ncia nas m√£os, principalmente √† noite. Bursite da m√£o direita (M70.1).
                Atividade repetitiva por 12 horas di√°rias h√° 8 anos. 
                Tratamento: anti-inflamat√≥rios, fisioterapia, √≥rteses noturnas.
                Resposta parcial ao tratamento. Limita√ß√£o funcional significativa para digita√ß√£o.
                Indica√ß√£o: AUX√çLIO-DOEN√áA por 60 dias com readapta√ß√£o funcional posterior.
                """,
                "gravidade": "MODERADA",
                "duration_months": 2,
                "keywords": ["t√∫nel do carpo", "digitadora", "formigamento", "dorm√™ncia", "repetitivo", "fisioterapia"]
            },
            
            {
                "id": "caso_003",
                "tipo": "depressao_grave_ansiedade", 
                "cid_principal": "F32.2",
                "cids_secundarios": ["F41.1"],
                "beneficio": "AUX√çLIO-DOEN√áA",
                "content": """
                Paciente masculino, 52 anos, professor, epis√≥dio depressivo grave sem sintomas psic√≥ticos (F32.2).
                Transtorno de ansiedade generalizada (F41.1). In√≠cio h√° 8 meses ap√≥s sobrecarga de trabalho.
                Sintomas: tristeza profunda, anedonia, ins√¥nia, fadiga, dificuldade de concentra√ß√£o.
                Medicamentos: sertralina 100mg, clonazepam 2mg, escitalopram 10mg.
                Tentativas de retorno ao trabalho falharam. Incapacidade total atual.
                Indica√ß√£o: AUX√çLIO-DOEN√áA por 120 dias com acompanhamento psiqui√°trico intensivo.
                """,
                "gravidade": "GRAVE",
                "duration_months": 4,
                "keywords": ["depress√£o grave", "ansiedade", "professor", "sobrecarga", "sertralina", "ins√¥nia"]
            },
            
            {
                "id": "caso_004",
                "tipo": "lombalgia_cronica",
                "cid_principal": "M54.5", 
                "cids_secundarios": ["M51.1"],
                "beneficio": "AUX√çLIO-DOEN√áA", 
                "content": """
                Paciente masculino, 41 anos, pedreiro, lombalgia cr√¥nica (M54.5).
                Transtorno de disco intervertebral lombar (M51.1). Dor constante h√° 2 anos.
                Limita√ß√£o severa para carregar peso, subir escadas, flex√£o do tronco.
                Tratamento: anti-inflamat√≥rios, relaxantes musculares, fisioterapia, RPG.
                Resposta insuficiente. Impossibilidade de continuar atividade de pedreiro.
                Indica√ß√£o: AUX√çLIO-DOEN√áA por 90 dias com avalia√ß√£o para readapta√ß√£o.
                """,
                "gravidade": "GRAVE",
                "duration_months": 3,
                "keywords": ["lombalgia", "pedreiro", "disco intervertebral", "carregar peso", "fisioterapia"]
            },
            
            {
                "id": "caso_005",
                "tipo": "hipertensao_diabetes_crianca",
                "cid_principal": "E10.3",
                "cids_secundarios": ["I10"],
                "beneficio": "BPC/LOAS",
                "content": """
                Paciente pedi√°trico, 12 anos, diabetes mellitus tipo 1 com complica√ß√µes oft√°lmicas (E10.3).
                Hipertens√£o arterial secund√°ria (I10). Fam√≠lia de baixa renda.
                Controle glic√™mico dif√≠cil, m√∫ltiplas interna√ß√µes por cetoacidose.
                Tratamento: insulina NPH + regular, medica√ß√£o anti-hipertensiva.
                Necessidades educacionais especiais, acompanhamento multidisciplinar.
                Limita√ß√µes permanentes. Indica√ß√£o: BPC/LOAS por defici√™ncia permanente.
                """,
                "gravidade": "GRAVE",
                "duration_months": 999,  # Permanente
                "keywords": ["diabetes tipo 1", "crian√ßa", "cetoacidose", "insulina", "BPC", "baixa renda"]
            },
            
            {
                "id": "caso_006",
                "tipo": "infarto_recent_hipertensao",
                "cid_principal": "I21.9",
                "cids_secundarios": ["I10", "E78.5"],
                "beneficio": "AUX√çLIO-DOEN√áA",
                "content": """
                Paciente masculino, 58 anos, motorista, infarto agudo do mioc√°rdio (I21.9).
                Hipertens√£o arterial (I10), hiperlipidemia (E78.5). Evento h√° 3 semanas.
                Angioplastia prim√°ria com stent. Fra√ß√£o de eje√ß√£o 45%.
                Medicamentos: AAS, clopidogrel, atenolol, sinvastatina, enalapril.
                Restri√ß√£o absoluta para dirigir ve√≠culos de carga por 6 meses.
                Indica√ß√£o: AUX√çLIO-DOEN√áA por 180 dias com reabilita√ß√£o card√≠aca.
                """,
                "gravidade": "GRAVE",
                "duration_months": 6,
                "keywords": ["infarto", "motorista", "angioplastia", "stent", "dirigir", "reabilita√ß√£o card√≠aca"]
            }
        ]
        
        return sample_cases
    
    def save_sample_cases(self, cases: List[Dict[str, Any]]):
        """Salva casos de exemplo em arquivo JSON"""
        
        cases_file = self.base_path / "data" / "medical_cases.json"
        
        with open(cases_file, 'w', encoding='utf-8') as f:
            json.dump(cases, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ {len(cases)} casos m√©dicos salvos em: {cases_file}")
    
    def create_cid_knowledge_base(self) -> List[Dict[str, Any]]:
        """Cria base de conhecimento de CIDs"""
        
        cid_knowledge = [
            {
                "cid": "E11.3",
                "description": "Diabetes mellitus tipo 2 com complica√ß√µes oft√°lmicas",
                "categoria": "End√≥crino",
                "gravidade_usual": "MODERADA",
                "content": """
                CID E11.3 - Diabetes mellitus tipo 2 com complica√ß√µes oft√°lmicas.
                Caracter√≠sticas: retinopatia diab√©tica, edema macular, glaucoma secund√°rio.
                Sintomas: vis√£o emba√ßada, perda visual progressiva, dificuldade para enxergar √† noite.
                Tratamento: controle glic√™mico rigoroso, acompanhamento oftalmol√≥gico.
                Progn√≥stico: progressivo se n√£o controlado adequadamente.
                Incapacidade: limita√ß√µes visuais podem impedir atividades de precis√£o.
                """
            },
            
            {
                "cid": "G56.0", 
                "description": "S√≠ndrome do t√∫nel do carpo",
                "categoria": "Neurol√≥gico",
                "gravidade_usual": "MODERADA",
                "content": """
                CID G56.0 - S√≠ndrome do t√∫nel do carpo.
                Compress√£o do nervo mediano no punho. Comum em atividades repetitivas.
                Sintomas: formigamento, dorm√™ncia, dor no polegar, indicador e m√©dio.
                Piora noturna t√≠pica. Pode evoluir para fraqueza e atrofia tenar.
                Tratamento: √≥rteses, anti-inflamat√≥rios, fisioterapia, cirurgia.
                Incapacidade: limita√ß√£o funcional para atividades manuais finas.
                """
            },
            
            {
                "cid": "F32.2",
                "description": "Epis√≥dio depressivo grave sem sintomas psic√≥ticos", 
                "categoria": "Psiqui√°trico",
                "gravidade_usual": "GRAVE",
                "content": """
                CID F32.2 - Epis√≥dio depressivo grave sem sintomas psic√≥ticos.
                Sintomas severos: humor deprimido, anedonia, fadiga, culpa excessiva.
                Perda significativa de interesse, altera√ß√µes do sono e apetite.
                Idea√ß√£o suicida poss√≠vel. Comprometimento funcional importante.
                Tratamento: antidepressivos, psicoterapia, √†s vezes hospitaliza√ß√£o.
                Incapacidade: total tempor√°ria, com possibilidade de recupera√ß√£o.
                """
            },
            
            {
                "cid": "I21.9",
                "description": "Infarto agudo do mioc√°rdio n√£o especificado",
                "categoria": "Cardiovascular", 
                "gravidade_usual": "GRAVE",
                "content": """
                CID I21.9 - Infarto agudo do mioc√°rdio n√£o especificado.
                Necrose do m√∫sculo card√≠aco por oclus√£o coronariana aguda.
                Sintomas: dor tor√°cica intensa, dispneia, sudorese, n√°useas.
                Emerg√™ncia m√©dica. Tratamento: revasculariza√ß√£o urgente.
                Complica√ß√µes: insufici√™ncia card√≠aca, arritmias, morte s√∫bita.
                Incapacidade: absoluta inicialmente, reabilita√ß√£o gradual necess√°ria.
                """
            }
        ]
        
        return cid_knowledge
    
    def save_cid_knowledge(self, cid_data: List[Dict[str, Any]]):
        """Salva base de conhecimento de CIDs"""
        
        cid_file = self.base_path / "data" / "cid_knowledge.json" 
        
        with open(cid_file, 'w', encoding='utf-8') as f:
            json.dump(cid_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ {len(cid_data)} CIDs salvos em: {cid_file}")
    
    def setup_complete_rag_base(self):
        """Setup completo da base RAG FAISS"""
        
        print("üîß Configurando base RAG FAISS...")
        
        # 1. Criar casos m√©dicos de exemplo
        medical_cases = self.create_sample_medical_cases()
        self.save_sample_cases(medical_cases)
        
        # 2. Criar base de conhecimento de CIDs
        cid_knowledge = self.create_cid_knowledge_base()
        self.save_cid_knowledge(cid_knowledge)
        
        # 3. Criar arquivo de configura√ß√£o
        config = {
            "vector_dimension": 1536,  # OpenAI embeddings
            "index_type": "HNSW",
            "distance_metric": "cosine",
            "max_candidates": 100,
            "ef_search": 50,
            "medical_specialties": [
                "Endocrinologia", "Cardiologia", "Neurologia", 
                "Psiquiatria", "Ortopedia", "Medicina do Trabalho"
            ],
            "supported_benefits": [
                "AUX√çLIO-DOEN√áA", "AUX√çLIO-ACIDENTE", 
                "BPC/LOAS", "APOSENTADORIA POR INVALIDEZ"
            ]
        }
        
        config_file = self.base_path / "config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Base RAG configurada em: {self.base_path}")
        print(f"üìä {len(medical_cases)} casos m√©dicos")
        print(f"üè• {len(cid_knowledge)} CIDs na base")
        print("üöÄ Pronto para integra√ß√£o com Pydantic AI!")
        
        return {
            "base_path": str(self.base_path),
            "medical_cases_count": len(medical_cases),
            "cid_knowledge_count": len(cid_knowledge),
            "config": config
        }

# ============================================================================
# SCRIPT DE INICIALIZA√á√ÉO
# ============================================================================

def initialize_rag_system():
    """Inicializa sistema RAG FAISS"""
    
    print("üöÄ Inicializando sistema RAG FAISS...")
    
    setup = RAGMedicalSetup()
    result = setup.setup_complete_rag_base()
    
    print("\nüìã RESUMO DA CONFIGURA√á√ÉO:")
    print(f"   üìÅ Diret√≥rio base: {result['base_path']}")
    print(f"   üìä Casos m√©dicos: {result['medical_cases_count']}")
    print(f"   üè• CIDs na base: {result['cid_knowledge_count']}")
    
    print("\nüîó PR√ìXIMOS PASSOS:")
    print("   1. Certifique-se de que pydantic_medical_service.py pode importar os dados")
    print("   2. Configure OPENAI_API_KEY para embeddings")
    print("   3. Execute o sistema principal integrado")
    
    return result

if __name__ == "__main__":
    initialize_rag_system()
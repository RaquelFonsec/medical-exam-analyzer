#!/usr/bin/env python3
"""
Teste final completo da integra√ß√£o RAG + MultimodalAIService
"""

import os
import sys
import asyncio
from datetime import datetime

# Adicionar caminho do projeto
sys.path.append('/home/raquel/medical-exam-analyzer/backend')

async def test_complete_multimodal_analysis():
    """Teste completo da an√°lise multimodal com RAG"""
    
    print("üß™ TESTE FINAL - AN√ÅLISE MULTIMODAL COMPLETA COM RAG")
    print("="*60)
    
    try:
        from app.services.multimodal_ai_service import multimodal_ai_service
        
        # Casos de teste completos
        test_cases = [
            {
                'name': 'Helena - Pedreira (Caso Ortop√©dico)',
                'patient_info': 'helena silva 45 anos',
                'transcription': '''Doutor, sou Helena Silva, tenho 45 anos, trabalho como pedreira h√° 20 anos na constru√ß√£o civil. 
                H√° 2 anos, durante o trabalho carregando materiais pesados, machuquei a coluna. 
                Desde ent√£o tenho dor lombar constante que piora quando fa√ßo esfor√ßo. 
                N√£o consigo mais carregar nem uma sacola de compras. 
                A dor √© insuport√°vel e n√£o aguento mais trabalhar na obra. 
                Quero me aposentar por invalidez porque n√£o tenho condi√ß√µes de continuar trabalhando.''',
                'expected': {
                    'specialty': 'Ortopedia',
                    'condition_keywords': ['lombar', 'coluna', 'ocupacional'],
                    'severity': ['Alta', 'Muito Alta']
                }
            },
            {
                'name': 'Carlos - Motorista (Caso Cardiol√≥gico)',
                'patient_info': 'carlos santos 48 anos',
                'transcription': '''Doutor, me chamo Carlos Santos, tenho 48 anos, sou motorista de caminh√£o h√° 25 anos. 
                H√° 4 meses tive um infarto do mioc√°rdio e desde ent√£o n√£o consigo mais fazer esfor√ßo f√≠sico. 
                Qualquer esfor√ßo me deixa ofegante e com dor no peito. 
                Tenho press√£o alta que n√£o controla nem com rem√©dio. 
                N√£o posso mais dirigir caminh√£o porque n√£o aguento o esfor√ßo e tenho medo de passar mal no volante. 
                Preciso de aux√≠lio-doen√ßa porque n√£o tenho condi√ß√µes de trabalhar.''',
                'expected': {
                    'specialty': 'Cardiologia',
                    'condition_keywords': ['cardiovascular', 'infarto', 'isqu√™mica'],
                    'severity': ['Alta', 'Muito Alta']
                }
            }
        ]
        
        results = []
        
        for i, case in enumerate(test_cases, 1):
            print(f"\n{'='*20} TESTE {i}: {case['name']} {'='*20}")
            print(f"Patient Info: {case['patient_info']}")
            print(f"Transcri√ß√£o: {case['transcription'][:100]}...")
            
            # Executar an√°lise multimodal completa
            result = await multimodal_ai_service.analyze_multimodal(
                patient_info=case['patient_info'],
                transcription=case['transcription']
            )
            
            # Analisar resultados
            success = result.get('success', False)
            specialty = result.get('especialidade', 'N/A')
            condition = result.get('dados_extraidos', {}).get('condicao_medica', '').lower()
            severity = result.get('dados_extraidos', {}).get('gravidade', 'N/A')
            name = result.get('dados_extraidos', {}).get('nome', 'N/A')
            
            print(f"\nüìä RESULTADOS DA AN√ÅLISE:")
            print(f"   ‚úÖ Sucesso: {success}")
            print(f"   üë§ Nome: {name}")
            print(f"   üè• Especialidade: {specialty}")
            print(f"   üîç Condi√ß√£o: {condition[:50]}...")
            print(f"   ‚ö†Ô∏è Gravidade: {severity}")
            
            # Verificar se especialidade est√° correta
            expected_specialty = case['expected']['specialty']
            if specialty == expected_specialty:
                print(f"   üéØ ESPECIALIDADE CORRETA!")
            else:
                print(f"   ‚ùå Especialidade incorreta - Esperado: {expected_specialty}")
            
            # Verificar condi√ß√£o
            condition_match = any(keyword in condition for keyword in case['expected']['condition_keywords'])
            if condition_match:
                print(f"   üéØ CONDI√á√ÉO CORRETA!")
            else:
                print(f"   ‚ùå Condi√ß√£o pode estar incorreta")
            
            results.append({
                'case': case['name'],
                'success': success,
                'specialty_correct': specialty == expected_specialty,
                'condition_match': condition_match
            })
        
        # Resumo final
        print(f"\n{'='*60}")
        print("üìä RESUMO FINAL DOS TESTES")
        print("="*60)
        
        total_tests = len(results)
        successful_tests = sum(1 for r in results if r['success'])
        correct_specialties = sum(1 for r in results if r['specialty_correct'])
        correct_conditions = sum(1 for r in results if r['condition_match'])
        
        print(f"‚úÖ Testes executados com sucesso: {successful_tests}/{total_tests}")
        print(f"üéØ Especialidades corretas: {correct_specialties}/{total_tests}")
        print(f"üîç Condi√ß√µes corretas: {correct_conditions}/{total_tests}")
        
        if successful_tests == total_tests and correct_specialties >= total_tests * 0.8:
            print(f"\nüéâ SISTEMA RAG FUNCIONANDO PERFEITAMENTE!")
            print("‚úÖ Integra√ß√£o RAG + MultimodalAIService conclu√≠da com sucesso")
            return True
        else:
            print(f"\n‚ö†Ô∏è Sistema precisa de ajustes")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro no teste final: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ EXECUTANDO TESTE FINAL DO SISTEMA RAG")
    return asyncio.run(test_complete_multimodal_analysis())

if __name__ == "__main__":
    main()
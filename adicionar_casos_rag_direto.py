#!/usr/bin/env python3
"""
Script para adicionar casos de benef√≠cios √† base RAG usando a API do sistema
"""

import requests
import json
import time

BASE_URL = "http://localhost:5003"

# Casos espec√≠ficos para cada benef√≠cio (simulando consultas reais)
casos_para_rag = [
    {
        "tipo": "AUX√çLIO-DOEN√áA",
        "caso": """Jo√£o Silva, 28 anos, pedreiro. Fratura do bra√ßo direito em queda no trabalho. 
        Dor intensa, fez cirurgia com placa. Fisioterapia por 3 meses. 
        M√©dico disse que vai ficar 100% bom. Volta ao trabalho em mar√ßo."""
    },
    {
        "tipo": "AUX√çLIO-DOEN√áA", 
        "caso": """Maria Santos, 32 anos, cozinheira. Pneumonia bilateral grave. 
        Internada 10 dias, agora em casa tomando antibi√≥tico. 
        Tosse, cansa√ßo, mas melhorando. Retorna trabalho em 6 semanas."""
    },
    {
        "tipo": "APOSENTADORIA POR INVALIDEZ",
        "caso": """Pedro Costa, 55 anos, motorista. Diabetes h√° 15 anos, agora com cegueira.
        Perdeu vis√£o dos dois olhos, n√£o consegue mais dirigir. 
        M√©dico disse que √© irrevers√≠vel. Nunca mais vai poder trabalhar."""
    },
    {
        "tipo": "APOSENTADORIA POR INVALIDEZ",
        "caso": """Ana Oliveira, 48 anos, professora. Esquizofrenia com surtos frequentes.
        M√∫ltiplas interna√ß√µes psiqui√°tricas. N√£o consegue mais dar aula.
        Doen√ßa cr√¥nica sem cura, incapacidade total para trabalho."""
    },
    {
        "tipo": "BPC/LOAS",
        "caso": """Carlos Mendes, 8 anos, paralisia cerebral. N√£o anda, n√£o fala.
        Fam√≠lia muito pobre, m√£e desempregada. Renda R$ 200 por m√™s.
        Precisa cuidados 24 horas. Defici√™ncia grave permanente."""
    },
    {
        "tipo": "BPC/LOAS",
        "caso": """Sebastiana Silva, 72 anos, vi√∫va. Dem√™ncia severa, n√£o reconhece fam√≠lia.
        Filha cuidadora, renda familiar R$ 300. Perdeu autonomia total.
        Precisa ajuda para comer, tomar banho, tudo."""
    },
    {
        "tipo": "AUX√çLIO-ACIDENTE",
        "caso": """Roberto Santos, 40 anos, oper√°rio. Acidente m√°quina, perdeu 2 dedos.
        CAT emitida pela empresa. Sequela permanente na m√£o direita.
        Pode trabalhar em outras fun√ß√µes com adapta√ß√£o."""
    },
    {
        "tipo": "AUX√çLIO-ACIDENTE",
        "caso": """Lucia Ferreira, 35 anos, faxineira. LER por esfor√ßo repetitivo.
        Tendinite cr√¥nica no bra√ßo direito. Doen√ßa do trabalho.
        Limita√ß√£o permanente para atividades de limpeza."""
    },
    {
        "tipo": "ISEN√á√ÉO IMPOSTO DE RENDA",
        "caso": """Carmen Costa, 60 anos, aposentada por invalidez. C√¢ncer de mama.
        Fez quimioterapia, cirurgia. Aposentadoria do INSS.
        Doen√ßa grave na lista da Receita Federal."""
    },
    {
        "tipo": "ISEN√á√ÉO IMPOSTO DE RENDA",
        "caso": """Jos√© Pereira, 58 anos, aposentado invalidez. Insufici√™ncia renal cr√¥nica.
        Hemodi√°lise 3x por semana. Aposentadoria por doen√ßa renal.
        Direito √† isen√ß√£o por doen√ßa grave."""
    }
]

def adicionar_casos_via_api():
    """Adiciona casos √† base RAG via API"""
    print("üöÄ ADICIONANDO CASOS √Ä BASE RAG VIA API")
    print("=" * 50)
    
    # Verificar se servidor est√° funcionando
    try:
        health = requests.get(f"{BASE_URL}/api/health", timeout=5)
        if health.status_code != 200:
            print("‚ùå Servidor n√£o est√° funcionando!")
            return
    except:
        print("‚ùå Servidor n√£o acess√≠vel!")
        return
    
    print("‚úÖ Servidor funcionando")
    
    casos_adicionados = 0
    for i, caso in enumerate(casos_para_rag, 1):
        print(f"\nüìù Processando caso {i}/{len(casos_para_rag)}: {caso['tipo']}")
        
        try:
            # Enviar caso para an√°lise (isso adiciona automaticamente ao RAG)
            response = requests.post(
                f"{BASE_URL}/api/intelligent-medical-analysis",
                data={"patient_info": caso['caso']},
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                classificacao = result.get('benefit_classification', {})
                beneficio = classificacao.get('tipo_beneficio', 'N/A')
                
                print(f"   ‚úÖ Processado - Classifica√ß√£o: {beneficio}")
                casos_adicionados += 1
            else:
                print(f"   ‚ùå Erro HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        
        # Pausa entre casos
        time.sleep(2)
    
    print(f"\nüéâ CASES PROCESSADOS!")
    print(f"   üìà Total processados: {casos_adicionados}/{len(casos_para_rag)}")
    print(f"   üìä Base RAG expandida com casos reais")
    
    # Verificar estat√≠sticas RAG
    try:
        stats = requests.get(f"{BASE_URL}/api/rag/stats", timeout=5)
        if stats.status_code == 200:
            rag_stats = stats.json()
            print(f"\nüìä ESTAT√çSTICAS RAG ATUALIZADAS:")
            print(f"   üî¢ Vetores: {rag_stats['statistics']['vector_count']}")
            print(f"   üìÑ Documentos: {rag_stats['statistics']['documents_loaded']}")
    except:
        print("   ‚ö†Ô∏è N√£o foi poss√≠vel obter estat√≠sticas RAG")

if __name__ == "__main__":
    adicionar_casos_via_api() 
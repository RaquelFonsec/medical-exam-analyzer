from flask import Flask, render_template, request, jsonify
import requests
import os
from werkzeug.utils import secure_filename
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'previdas-2024'

BACKEND_URL = "http://localhost:8000"
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'tiff'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def index():
    return render_template('index.html')

@app.route("/consultation")
def consultation():
    """Interface de consulta m√©dica (protegida)"""
    return render_template("consultation.html")
    return render_template('consultation.html')

@app.route('/api/upload-exam', methods=['POST'])
def upload_exam():
    try:
        if 'file' not in request.files:
            return jsonify({'success': False, 'error': 'Nenhum arquivo selecionado'}), 400
        
        file = request.files['file']
        exam_type = request.form.get('exam_type', 'geral')
        
        if file.filename == '':
            return jsonify({'success': False, 'error': 'Nenhum arquivo selecionado'}), 400
        
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            
            files = {'file': (filename, file, file.content_type)}
            data = {'exam_type': exam_type}
            
            response = requests.post(
                f"{BACKEND_URL}/upload-exam/",
                files=files,
                data=data,
                timeout=120
            )
            
            if response.status_code == 200:
                result = response.json()
                return jsonify({
                    'success': True,
                    'filename': result.get('filename'),
                    'extracted_text': result.get('extracted_text'),
                    'report': result.get('report'),
                    'confidence': result.get('confidence', 0.0)
                })
            else:
                return jsonify({'success': False, 'error': 'Erro no processamento'}), 500
        
        return jsonify({'success': False, 'error': 'Tipo de arquivo n√£o permitido'}), 400
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route("/consultation")
def consultation():
    """Interface de consulta m√©dica (protegida)"""
    return render_template("consultation.html")
    """USAR IA REAL DO OPENAI"""
    try:
        print("ü§ñ ENVIANDO PARA IA REAL...")
        
        patient_info = request.form.get('patient_info', '')
        
        if not patient_info.strip():
            patient_info = "Consulta m√©dica processada"
        
        print(f"üìù Dados do paciente: {patient_info}")
        
        response = requests.post(
            f"{BACKEND_URL}/ai-consultation/",
            data={'patient_info': patient_info},
            headers={'Content-Type': 'application/x-www-form-urlencoded'},
            timeout=120
        )
        
        print(f"üì° Status da IA: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ IA SUCCESS: {result.get('success', False)}")
            return jsonify(result)
        else:
            print(f"‚ùå IA ERROR: {response.text}")
            return jsonify({
                'success': False, 
                'error': f'IA Backend Error: {response.status_code} - {response.text}'
            }), 500
            
    except Exception as e:
        print(f"‚ùå FRONTEND ERROR: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route("/consultation")
def consultation():
    """Interface de consulta m√©dica (protegida)"""
    return render_template("consultation.html")
    """Processar com GPT-4o Multimodal + AWS Textract + Whisper"""
    try:
        patient_info = request.form.get('patient_info', '')
        
        print(f"üåü Processamento multimodal COMPLETO: {patient_info}")
        
        # Preparar dados
        data = {'patient_info': patient_info}
        files = {}
        
        # √Åudio se fornecido
        if 'audio_file' in request.files:
            audio_file = request.files['audio_file']
            if audio_file.filename:
                files['audio_file'] = (audio_file.filename, audio_file, audio_file.content_type)
                print(f"üé§ √Åudio enviado: {audio_file.filename}")
        
        # Imagem se fornecida  
        if 'image_file' in request.files:
            image_file = request.files['image_file']
            if image_file.filename:
                files['image_file'] = (image_file.filename, image_file, image_file.content_type)
                print(f"üìÑ Documento enviado: {image_file.filename}")
        
        # Chamar backend multimodal COMPLETO
        response = requests.post(
            f"{BACKEND_URL}/multimodal-analysis/",
            files=files,
            data=data,
            timeout=300  # 5 minutos para processamento completo
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ An√°lise multimodal COMPLETA conclu√≠da")
            
            # Retornar TODOS os dados estruturados
            return jsonify({
                "success": True,
                "transcription": result.get("transcription", "Nenhuma transcri√ß√£o dispon√≠vel"),
                "textract_data": result.get("textract_data", "Nenhum documento processado"),
                "medical_report": result.get("medical_report", "Erro na gera√ß√£o do laudo"),
                "modalities_used": result.get("modalities_used", {
                    "text": True,
                    "audio": False,
                    "image": False,
                    "textract": False
                }),
                "model": result.get("model", "GPT-4o + Whisper + AWS Textract"),
                "confidence": result.get("confidence", 0.95),
                "timestamp": result.get("timestamp", ""),
                "type": "multimodal_analysis"
            })
        else:
            print(f"‚ùå Erro backend: {response.status_code}")
            return jsonify({
                'success': False, 
                'error': f'Backend error: {response.status_code} - {response.text}'
            }), 500
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout no processamento")
        return jsonify({
            'success': False, 
            'error': 'Timeout: Processamento demorou mais que 5 minutos'
        }), 500
        
    except Exception as e:
        print(f"‚ùå Erro no frontend: {str(e)}")
        return jsonify({
            'success': False, 
            'error': f'Erro interno: {str(e)}'
        }), 500

@app.route('/api/multimodal-test')
def multimodal_test():
    """P√°gina de teste multimodal"""
    return render_template('multimodal_test.html')

if __name__ == '__main__':
    app.run(debug=True, port=5000, host='0.0.0.0')

@app.route("/consultation")
def consultation():
    """Interface de consulta m√©dica (protegida)"""
    return render_template("consultation.html")
    """Processar upload de arquivo de √°udio"""
    try:
        patient_info = request.form.get('patient_info', '')
        
        print(f"üìÅ Upload de √°udio: {patient_info}")
        
        # Preparar dados
        data = {'patient_info': patient_info}
        files = {}
        
        # Arquivo de √°udio
        if 'audio_upload' in request.files:
            audio_file = request.files['audio_upload']
            if audio_file.filename:
                files['audio_upload'] = (audio_file.filename, audio_file, audio_file.content_type)
                print(f"üìÅ Arquivo enviado: {audio_file.filename}")
        
        # Chamar backend
        response = requests.post(
            f"{BACKEND_URL}/upload-audio/",
            files=files,
            data=data,
            timeout=300
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Upload processado com sucesso")
            
            return jsonify({
                "success": True,
                "transcription": result.get("transcription", "Erro na transcri√ß√£o"),
                "medical_report": result.get("multimodal_report", "Erro no laudo"),
                "modalities_used": result.get("modalities_used", {}),
                "model": result.get("model", "GPT-4o"),
                "confidence": result.get("confidence", 0.95),
                "timestamp": result.get("timestamp", ""),
                "type": "audio_upload"
            })
        else:
            return jsonify({
                'success': False, 
                'error': f'Erro no backend: {response.status_code}'
            }), 500
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/login')
def login_page():
    """P√°gina de login m√©dico"""
    return render_template('login.html')

@app.route('/api/login', methods=['POST'])
def api_login():
    """API de login - redirecionar para backend"""
    try:
        # Repassar dados para backend
        response = requests.post(
            f"{BACKEND_URL}/login",
            json=request.get_json(),
            timeout=30
        )
        
        return jsonify(response.json())
        
    except Exception as e:
        return jsonify({
            'success': False, 
            'error': f'Erro de comunica√ß√£o: {str(e)}'
        }), 500

@app.route('/logout')
def logout():
    """Logout do sistema"""
    return redirect('/login')
